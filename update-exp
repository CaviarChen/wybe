#!/bin/sh
# update expected outputs to match actual ones, if appropriate

PAGER=${PAGER:-more}

# send source file name and content to stdout.  Inputs are file name and
# message text to follow it.
prefix () {
    echo "~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
    echo "$1\n$2" | fmt -c -w 78
    echo "~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
    cat $1
    echo "~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
    echo "$2" | fmt -c -w 78
    echo "~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
}


# Determine whether to accept compiler output as expected.  Inputs are:
#    source file name
#    compiler output file name
#    current expected output file name, or empty for new test cases
agree () {
    if [ -n "$3" ] ; then
        action=diff
        valid="yes accept|no keep|diff|(show) previous|(show) current|quit"
    else
        action=current
        valid="yes accept|no reject|(show) current|quit"
    fi
    while true ; do
        destination=$PAGER
        case "$action" in
            [A-Z]*) destination=cat
        esac
        case "$action" in
            [dD]*)
                (prefix "$1" 'Output Changes' ; \
	         dwdiff -c -d '()<>~!@:?.%#' "$3" "$2" ) | $destination ;;
            [pP]*)
                (prefix "$1" 'Previous Expected Output' ; \
	         cat "$3" ) | $destination ;;
            [cC]*)
                (prefix "$1" 'Current Output' ; \
	         cat "$2" ) | $destination ;;
            ask) ;; # just ask again
        esac
        echo "Accept output for $1?"
        echo "(upper case to see output without paging)"
	read -p "$valid: " action
	case "$action" in
	    [yYaA]*) return 0 ;;
	    [nNrR]*) return 1 ;;
	    [qQ]*) echo "Quitting..." ; exit 0 ;;
            [dDpP]) if [ -z "$3" ] ; then
                        echo "No previous expected output!"
                        action=ask
                    fi ;;
            [cC]) ;;
	    *) echo "Please answer $valid." ;;
	esac
    done
}

updatefile () {
    exp=$(echo "$f" | sed 's/\.wybe/.exp/')
    out=$(echo "$f" | sed 's/\.wybe/.out/')
    if ! [ -r "$out" ] ; then
        echo "No output file $out"
        exit 1
    fi

    if ! [ -r "$exp" ] ; then
        exp='' # no previous expected output
    fi
    if [ -n "$exp" ] && diff -q "$exp" "$out" > /dev/null ; then
        echo "Output for $f unchanged"
    else
	if agree "$f" "$out" "$exp" ; then
	    cp "$out" "$exp"
            echo "Expected output for $f updated"
	else
	    echo "Expected output for $f NOT changed"
        fi
    fi
}

if [ $# -eq 0 ] ; then
    make test
    for f in test-cases/*.wybe ; do
        updatefile "$f"
    done
else
    for f in "$@" ; do
        updatefile "$f"
    done
fi
