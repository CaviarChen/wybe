======================================================================
AFTER EVERYTHING:
 Module alias2
  public submods  : 
  public types    : 
  public resources: 
  public procs    : alias2.<0>
                    alias2.fcopy<0>
                    alias2.pcopy<0>
  imports         : use position
                    use wybe
  types           : 
  resources       : 
  procs           : 

*main* > public (0 calls)
0: (argc#0:wybe.int, [?argc#0:wybe.int], argv#0:wybe.int, [?argv#0:wybe.int], exit_code#0:wybe.int, [?exit_code#0:wybe.int], io#0:phantom, ?io#5:phantom): AliasPairs: []
    foreign c print_string("copy a position":wybe.string, ~#io#0:phantom, ?tmp$3#0:phantom) @wybe:nn:nn
    foreign c putchar('\n':wybe.char, ~tmp$3#0:phantom, ?#io#1:phantom) @wybe:nn:nn
    foreign lpvm alloc(16:wybe.int, ?tmp$6#0:position.position)
    foreign lpvm mutate(~tmp$6#0:position.position, ?tmp$7#0:position.position, 16:wybe.int, 0:wybe.int, 1:wybe.int, 0:wybe.int)
    foreign lpvm mutate(~tmp$7#0:position.position, ?tmp$0#0:position.position, 16:wybe.int, 8:wybe.int, 1:wybe.int, 20:wybe.int)
    alias2.pcopy<0>(~tmp$0#0:position.position, ?r#0:position.position, ~#io#1:phantom, ?#io#2:phantom) @alias2:20:2
    foreign c print_string("--- After calling pcopy: ":wybe.string, ~#io#2:phantom, ?tmp$10#0:phantom) @wybe:nn:nn
    foreign c putchar('\n':wybe.char, ~tmp$10#0:phantom, ?#io#3:phantom) @wybe:nn:nn
    foreign c print_string("expect r(0,20):":wybe.string, ~#io#3:phantom, ?#io#4:phantom) @wybe:nn:nn
    position.printPosition<0>(~r#0:position.position, ~#io#4:phantom, ?#io#5:phantom) @alias2:23:2


fcopy > public (0 calls)
0: fcopy(p1#0:position.position, ?$#0:position.position): AliasPairs: []
    foreign lpvm alloc(16:wybe.int, ?tmp$5#0:position.position)
    foreign lpvm mutate(~tmp$5#0:position.position, ?tmp$6#0:position.position, 16:wybe.int, 0:wybe.int, 1:wybe.int, 0:wybe.int)
    foreign lpvm mutate(~tmp$6#0:position.position, ?tmp$0#0:position.position, 16:wybe.int, 8:wybe.int, 1:wybe.int, 0:wybe.int)
    foreign lpvm access(p1#0:position.position, 0:wybe.int, ?tmp$1#0:wybe.int)
    foreign lpvm mutate(~tmp$0#0:position.position, ?%p2#1:position.position, 16:wybe.int, 0:wybe.int, 0:wybe.int, ~tmp$1#0:wybe.int)
    foreign lpvm access(~p1#0:position.position, 8:wybe.int, ?tmp$2#0:wybe.int)
    foreign lpvm mutate(~%p2#1:position.position, ?%$#0:position.position, 16:wybe.int, 8:wybe.int, 0:wybe.int, ~tmp$2#0:wybe.int)


pcopy > public (1 calls)
0: pcopy(p1#0:position.position, ?p2#2:position.position, io#0:phantom, ?io#3:phantom): AliasPairs: []
    foreign lpvm alloc(16:wybe.int, ?tmp$5#0:position.position)
    foreign lpvm mutate(~tmp$5#0:position.position, ?tmp$6#0:position.position, 16:wybe.int, 0:wybe.int, 1:wybe.int, 0:wybe.int)
    foreign lpvm mutate(~tmp$6#0:position.position, ?tmp$0#0:position.position, 16:wybe.int, 8:wybe.int, 1:wybe.int, 0:wybe.int)
    foreign lpvm access(p1#0:position.position, 0:wybe.int, ?tmp$1#0:wybe.int)
    foreign lpvm mutate(~tmp$0#0:position.position, ?%p2#1:position.position, 16:wybe.int, 0:wybe.int, 0:wybe.int, ~tmp$1#0:wybe.int)
    foreign lpvm access(~p1#0:position.position, 8:wybe.int, ?tmp$2#0:wybe.int)
    foreign lpvm mutate(~%p2#1:position.position, ?%p2#2:position.position, 16:wybe.int, 8:wybe.int, 0:wybe.int, ~tmp$2#0:wybe.int)
    foreign c print_string("--- Inside pcopy: ":wybe.string, ~#io#0:phantom, ?tmp$15#0:phantom) @wybe:nn:nn
    foreign c putchar('\n':wybe.char, ~tmp$15#0:phantom, ?#io#1:phantom) @wybe:nn:nn
    foreign c print_string("expect p2(0,20):":wybe.string, ~#io#1:phantom, ?#io#2:phantom) @wybe:nn:nn
    position.printPosition<0>(p2#2:position.position, ~#io#2:phantom, ?#io#3:phantom) @alias2:11:4

  LLVM code       :

; ModuleID = 'alias2'


declare external ccc void @"position.printPosition<0>"(i64*)

declare external ccc void @print_string(i8*)

declare external ccc void @putchar(i8)

@alias2.9 = constant [16 x i8] c"expect r(0,20):\00"

@alias2.8 = constant [26 x i8] c"--- After calling pcopy: \00"

@alias2.1 = constant [16 x i8] c"copy a position\00"

@alias2.59 = constant [17 x i8] c"expect p2(0,20):\00"

@alias2.58 = constant [19 x i8] c"--- Inside pcopy: \00"

declare external ccc i8* @wybe_malloc(i32)

declare external ccc void @llvm.memcpy.p0i8.p0i8.i32(i8*, i8*, i32, i1)

define external ccc void @"alias2.<0>"(i64 %"argc#0", i64 %"argv#0", i64 %"exit_code#0"){
entry:
  tail call ccc void @print_string(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @alias2.1, i32 0, i32 0))
  tail call ccc void @putchar(i8 10)
  %2 = tail call ccc i8* @wybe_malloc(i32 16)
  %3 = bitcast i8* %2 to i64*
  %4 = bitcast i64* %3 to i64*
  %5 = getelementptr i64, i64* %4, i64 0
  store i64 0, i64* %5
  %6 = bitcast i64* %3 to i64*
  %7 = getelementptr i64, i64* %6, i64 1
  store i64 20, i64* %7
  %"r#0" = tail call ccc i64* @"alias2.pcopy<0>"(i64* %3)
  tail call ccc void @print_string(i8* getelementptr inbounds ([26 x i8], [26 x i8]* @alias2.8, i32 0, i32 0))
  tail call ccc void @putchar(i8 10)
  tail call ccc void @print_string(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @alias2.9, i32 0, i32 0))
  tail call ccc void @"position.printPosition<0>"(i64* %"r#0")
  ret void
}

define external ccc i64* @"alias2.fcopy<0>"(i64* %"p1#0"){
entry:
  %10 = tail call ccc i8* @wybe_malloc(i32 16)
  %11 = bitcast i8* %10 to i64*
  %12 = bitcast i64* %11 to i64*
  %13 = getelementptr i64, i64* %12, i64 0
  store i64 0, i64* %13
  %14 = bitcast i64* %11 to i64*
  %15 = getelementptr i64, i64* %14, i64 1
  store i64 0, i64* %15
  %16 = bitcast i64* %"p1#0" to i64*
  %17 = getelementptr i64, i64* %16, i64 0
  %18 = load i64, i64* %17
  %19 = tail call ccc i8* @wybe_malloc(i32 16)
  %20 = bitcast i8* %19 to i64*
  %21 = bitcast i64* %20 to i8*
  %22 = bitcast i64* %11 to i8*
  tail call ccc void @llvm.memcpy.p0i8.p0i8.i32(i8* %21, i8* %22, i32 16, i1 0)
  %23 = bitcast i64* %20 to i64*
  %24 = getelementptr i64, i64* %23, i64 0
  store i64 %18, i64* %24
  %25 = bitcast i64* %"p1#0" to i64*
  %26 = getelementptr i64, i64* %25, i64 1
  %27 = load i64, i64* %26
  %28 = tail call ccc i8* @wybe_malloc(i32 16)
  %29 = bitcast i8* %28 to i64*
  %30 = bitcast i64* %29 to i8*
  %31 = bitcast i64* %20 to i8*
  tail call ccc void @llvm.memcpy.p0i8.p0i8.i32(i8* %30, i8* %31, i32 16, i1 0)
  %32 = bitcast i64* %29 to i64*
  %33 = getelementptr i64, i64* %32, i64 1
  store i64 %27, i64* %33
  ret i64* %29
}

define external ccc i64* @"alias2.pcopy<0>"(i64* %"p1#0"){
entry:
  %34 = tail call ccc i8* @wybe_malloc(i32 16)
  %35 = bitcast i8* %34 to i64*
  %36 = bitcast i64* %35 to i64*
  %37 = getelementptr i64, i64* %36, i64 0
  store i64 0, i64* %37
  %38 = bitcast i64* %35 to i64*
  %39 = getelementptr i64, i64* %38, i64 1
  store i64 0, i64* %39
  %40 = bitcast i64* %"p1#0" to i64*
  %41 = getelementptr i64, i64* %40, i64 0
  %42 = load i64, i64* %41
  %43 = tail call ccc i8* @wybe_malloc(i32 16)
  %44 = bitcast i8* %43 to i64*
  %45 = bitcast i64* %44 to i8*
  %46 = bitcast i64* %35 to i8*
  tail call ccc void @llvm.memcpy.p0i8.p0i8.i32(i8* %45, i8* %46, i32 16, i1 0)
  %47 = bitcast i64* %44 to i64*
  %48 = getelementptr i64, i64* %47, i64 0
  store i64 %42, i64* %48
  %49 = bitcast i64* %"p1#0" to i64*
  %50 = getelementptr i64, i64* %49, i64 1
  %51 = load i64, i64* %50
  %52 = tail call ccc i8* @wybe_malloc(i32 16)
  %53 = bitcast i8* %52 to i64*
  %54 = bitcast i64* %53 to i8*
  %55 = bitcast i64* %44 to i8*
  tail call ccc void @llvm.memcpy.p0i8.p0i8.i32(i8* %54, i8* %55, i32 16, i1 0)
  %56 = bitcast i64* %53 to i64*
  %57 = getelementptr i64, i64* %56, i64 1
  store i64 %51, i64* %57
  tail call ccc void @print_string(i8* getelementptr inbounds ([19 x i8], [19 x i8]* @alias2.58, i32 0, i32 0))
  tail call ccc void @putchar(i8 10)
  tail call ccc void @print_string(i8* getelementptr inbounds ([17 x i8], [17 x i8]* @alias2.59, i32 0, i32 0))
  tail call ccc void @"position.printPosition<0>"(i64* %53)
  ret i64* %53
}
--------------------------------------------------
 Module position
  public submods  : 
  public types    : position: (position.position,"pointer")
  public resources: 
  public procs    : position.printPosition<0>
                    position.position.=<0>
                    position.position.position<0>
                    position.position.position<1>
                    position.position.x<0>
                    position.position.x<1>
                    position.position.y<0>
                    position.position.y<1>
  imports         : public use position.position
                    use wybe
  types           : position/0 (pointer)  @position:1:8
  resources       : 
  submodules      : position.position
  procs           : 

printPosition > public (0 calls)
0: printPosition(pos#0:position.position, io#0:phantom, ?io#5:phantom): AliasPairs: []
    foreign c print_string(" (":wybe.string, ~#io#0:phantom, ?#io#1:phantom) @wybe:nn:nn
    foreign lpvm access(pos#0:position.position, 0:wybe.int, ?tmp$0#0:wybe.int)
    foreign c print_int(~tmp$0#0:wybe.int, ~#io#1:phantom, ?#io#2:phantom) @wybe:nn:nn
    foreign c print_string(",":wybe.string, ~#io#2:phantom, ?#io#3:phantom) @wybe:nn:nn
    foreign lpvm access(~pos#0:position.position, 8:wybe.int, ?tmp$1#0:wybe.int)
    foreign c print_int(~tmp$1#0:wybe.int, ~#io#3:phantom, ?#io#4:phantom) @wybe:nn:nn
    foreign c print_string(")":wybe.string, ~#io#4:phantom, ?tmp$14#0:phantom) @wybe:nn:nn
    foreign c putchar('\n':wybe.char, ~tmp$14#0:phantom, ?#io#5:phantom) @wybe:nn:nn

  LLVM code       :

; ModuleID = 'position'


declare external ccc void @putchar(i8)

declare external ccc void @print_string(i8*)

declare external ccc void @print_int(i64)

@position.9 = constant [2 x i8] c")\00"

@position.5 = constant [2 x i8] c",\00"

@position.1 = constant [3 x i8] c" (\00"

declare external ccc i8* @wybe_malloc(i32)

declare external ccc void @llvm.memcpy.p0i8.p0i8.i32(i8*, i8*, i32, i1)

define external ccc void @"position.printPosition<0>"(i64* %"pos#0"){
entry:
  tail call ccc void @print_string(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @position.1, i32 0, i32 0))
  %2 = bitcast i64* %"pos#0" to i64*
  %3 = getelementptr i64, i64* %2, i64 0
  %4 = load i64, i64* %3
  tail call ccc void @print_int(i64 %4)
  tail call ccc void @print_string(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @position.5, i32 0, i32 0))
  %6 = bitcast i64* %"pos#0" to i64*
  %7 = getelementptr i64, i64* %6, i64 1
  %8 = load i64, i64* %7
  tail call ccc void @print_int(i64 %8)
  tail call ccc void @print_string(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @position.9, i32 0, i32 0))
  tail call ccc void @putchar(i8 10)
  ret void
}
--------------------------------------------------
 Module position.position([])
  public submods  : 
  public types    : 
  public resources: 
  public procs    : position.position.=<0>
                    position.position.position<0>
                    position.position.position<1>
                    position.position.x<0>
                    position.position.x<1>
                    position.position.y<0>
                    position.position.y<1>
  imports         : use position
                    use wybe
  types           : 
  resources       : 
  procs           : 

= > public inline test (3 calls)
0: =($left#0:position.position, $right#0:position.position, ?$$#0:wybe.bool): AliasPairs: []
    foreign lpvm access($left#0:position.position, 0:wybe.int, ?$left$x#0:wybe.int)
    foreign lpvm access(~$left#0:position.position, 8:wybe.int, ?$left$y#0:wybe.int)
    foreign lpvm access($right#0:position.position, 0:wybe.int, ?$right$x#0:wybe.int)
    foreign lpvm access(~$right#0:position.position, 8:wybe.int, ?$right$y#0:wybe.int)
    foreign llvm icmp eq(~$left$x#0:wybe.int, ~$right$x#0:wybe.int, ?tmp$2#0:wybe.bool) @wybe:nn:nn
    case ~tmp$2#0:wybe.bool of
    0:
        foreign llvm move(0:wybe.bool, ?$$#0:wybe.bool)

    1:
        foreign llvm icmp eq(~$left$y#0:wybe.int, ~$right$y#0:wybe.int, ?$$#0:wybe.bool) @wybe:nn:nn



position > public inline (0 calls)
0: position(x#0:wybe.int, y#0:wybe.int, ?$#0:position.position): AliasPairs: []
    foreign lpvm alloc(16:wybe.int, ?$rec#0:position.position)
    foreign lpvm mutate(~%$rec#0:position.position, ?%$rec#1:position.position, 16:wybe.int, 0:wybe.int, 1:wybe.int, ~x#0:wybe.int)
    foreign lpvm mutate(~%$rec#1:position.position, ?%$#0:position.position, 16:wybe.int, 8:wybe.int, 1:wybe.int, ~y#0:wybe.int)
position > public inline (4 calls)
1: position(?x#0:wybe.int, ?y#0:wybe.int, $#0:position.position): AliasPairs: []
    foreign lpvm access($#0:position.position, 0:wybe.int, ?x#0:wybe.int)
    foreign lpvm access(~$#0:position.position, 8:wybe.int, ?y#0:wybe.int)


x > public inline (0 calls)
0: x($rec#0:position.position, ?$#0:wybe.int): AliasPairs: []
    foreign lpvm access(~$rec#0:position.position, 0:wybe.int, ?$#0:wybe.int)
x > public inline (0 calls)
1: x($rec#0:position.position, ?$rec#1:position.position, $field#0:wybe.int): AliasPairs: []
    foreign lpvm mutate(~%$rec#0:position.position, ?%$rec#1:position.position, 16:wybe.int, 0:wybe.int, 0:wybe.int, ~$field#0:wybe.int)


y > public inline (0 calls)
0: y($rec#0:position.position, ?$#0:wybe.int): AliasPairs: []
    foreign lpvm access(~$rec#0:position.position, 8:wybe.int, ?$#0:wybe.int)
y > public inline (0 calls)
1: y($rec#0:position.position, ?$rec#1:position.position, $field#0:wybe.int): AliasPairs: []
    foreign lpvm mutate(~%$rec#0:position.position, ?%$rec#1:position.position, 16:wybe.int, 8:wybe.int, 0:wybe.int, ~$field#0:wybe.int)

  LLVM code       :

; ModuleID = 'position.position'


declare external ccc i8* @wybe_malloc(i32)

declare external ccc void @llvm.memcpy.p0i8.p0i8.i32(i8*, i8*, i32, i1)

define external ccc i1 @"position.position.=<0>"(i64* %"$left#0", i64* %"$right#0"){
entry:
  %1 = bitcast i64* %"$left#0" to i64*
  %2 = getelementptr i64, i64* %1, i64 0
  %3 = load i64, i64* %2
  %4 = bitcast i64* %"$left#0" to i64*
  %5 = getelementptr i64, i64* %4, i64 1
  %6 = load i64, i64* %5
  %7 = bitcast i64* %"$right#0" to i64*
  %8 = getelementptr i64, i64* %7, i64 0
  %9 = load i64, i64* %8
  %10 = bitcast i64* %"$right#0" to i64*
  %11 = getelementptr i64, i64* %10, i64 1
  %12 = load i64, i64* %11
  %"tmp$2#0" = icmp eq i64 %3, %9
  br i1 %"tmp$2#0", label %if.then, label %if.else
if.then:
  %"$$#0" = icmp eq i64 %6, %12
  ret i1 %"$$#0"
if.else:
  ret i1 0
}

define external ccc i64* @"position.position.position<0>"(i64 %"x#0", i64 %"y#0"){
entry:
  %13 = tail call ccc i8* @wybe_malloc(i32 16)
  %14 = bitcast i8* %13 to i64*
  %15 = bitcast i64* %14 to i64*
  %16 = getelementptr i64, i64* %15, i64 0
  store i64 %"x#0", i64* %16
  %17 = bitcast i64* %14 to i64*
  %18 = getelementptr i64, i64* %17, i64 1
  store i64 %"y#0", i64* %18
  ret i64* %14
}

define external ccc {i64, i64} @"position.position.position<1>"(i64* %"$#0"){
entry:
  %19 = bitcast i64* %"$#0" to i64*
  %20 = getelementptr i64, i64* %19, i64 0
  %21 = load i64, i64* %20
  %22 = bitcast i64* %"$#0" to i64*
  %23 = getelementptr i64, i64* %22, i64 1
  %24 = load i64, i64* %23
  %25 = insertvalue {i64, i64} undef, i64 %21, 0
  %26 = insertvalue {i64, i64} %25, i64 %24, 1
  ret {i64, i64} %26
}

define external ccc i64 @"position.position.x<0>"(i64* %"$rec#0"){
entry:
  %27 = bitcast i64* %"$rec#0" to i64*
  %28 = getelementptr i64, i64* %27, i64 0
  %29 = load i64, i64* %28
  ret i64 %29
}

define external ccc i64* @"position.position.x<1>"(i64* %"$rec#0", i64 %"$field#0"){
entry:
  %30 = tail call ccc i8* @wybe_malloc(i32 16)
  %31 = bitcast i8* %30 to i64*
  %32 = bitcast i64* %31 to i8*
  %33 = bitcast i64* %"$rec#0" to i8*
  tail call ccc void @llvm.memcpy.p0i8.p0i8.i32(i8* %32, i8* %33, i32 16, i1 0)
  %34 = bitcast i64* %31 to i64*
  %35 = getelementptr i64, i64* %34, i64 0
  store i64 %"$field#0", i64* %35
  ret i64* %31
}

define external ccc i64 @"position.position.y<0>"(i64* %"$rec#0"){
entry:
  %36 = bitcast i64* %"$rec#0" to i64*
  %37 = getelementptr i64, i64* %36, i64 1
  %38 = load i64, i64* %37
  ret i64 %38
}

define external ccc i64* @"position.position.y<1>"(i64* %"$rec#0", i64 %"$field#0"){
entry:
  %39 = tail call ccc i8* @wybe_malloc(i32 16)
  %40 = bitcast i8* %39 to i64*
  %41 = bitcast i64* %40 to i8*
  %42 = bitcast i64* %"$rec#0" to i8*
  tail call ccc void @llvm.memcpy.p0i8.p0i8.i32(i8* %41, i8* %42, i32 16, i1 0)
  %43 = bitcast i64* %40 to i64*
  %44 = getelementptr i64, i64* %43, i64 1
  store i64 %"$field#0", i64* %44
  ret i64* %40
}
