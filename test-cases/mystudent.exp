======================================================================
AFTER EVERYTHING:
 Module mystudent
  public submods  : 
  public types    : course: (mystudent.course,"pointer")
                    student: (mystudent.student,"pointer")
  public resources: 
  public procs    : mystudent.printStudent<0>
                    mystudent.course.=<0>
                    mystudent.course.=<1>
                    mystudent.course.=<2>
                    mystudent.course.code<0>
                    mystudent.course.code<1>
                    mystudent.course.course<0>
                    mystudent.course.course<1>
                    mystudent.course.name<0>
                    mystudent.course.name<1>
                    mystudent.student.=<0>
                    mystudent.student.=<1>
                    mystudent.student.=<2>
                    mystudent.student.id<0>
                    mystudent.student.id<1>
                    mystudent.student.major<0>
                    mystudent.student.major<1>
                    mystudent.student.student<0>
                    mystudent.student.student<1>
  imports         : public use mystudent.course
                    public use mystudent.student
                    use wybe
  types           : course/0 (pointer)  @mystudent:1:8, student/0 (pointer)  @mystudent:2:8
  resources       : 
  procs           : 

printStudent > public (0 calls)
0: printStudent(stu#0:mystudent.student, wybe.io$io#0:wybe.phantom, ?wybe.io$io#6:wybe.phantom): AliasPairs: [(stu#0,tmp$1#0)]
    foreign c print_string("student id: ":wybe.string, ~#wybe.io$io#0:wybe.phantom, ?#wybe.io$io#1:wybe.phantom) @wybe:92:41
    foreign lpvm access(stu#0:mystudent.student, 0:wybe.int, ?tmp$0#0:wybe.int)
    foreign c print_int(~tmp$0#0:wybe.int, ~#wybe.io$io#1:wybe.phantom, ?tmp$9#0:wybe.phantom) @wybe:80:38
    foreign c putchar('\n':wybe.char, ~tmp$9#0:wybe.phantom, ?#wybe.io$io#2:wybe.phantom) @wybe:78:28
    foreign lpvm access(~stu#0:mystudent.student, 8:wybe.int, ?tmp$1#0:mystudent.course)
    foreign c print_string("course code: ":wybe.string, ~#wybe.io$io#2:wybe.phantom, ?#wybe.io$io#3:wybe.phantom) @wybe:92:41
    foreign lpvm access(tmp$1#0:mystudent.course, 0:wybe.int, ?tmp$2#0:wybe.int)
    foreign c print_int(~tmp$2#0:wybe.int, ~#wybe.io$io#3:wybe.phantom, ?tmp$17#0:wybe.phantom) @wybe:80:38
    foreign c putchar('\n':wybe.char, ~tmp$17#0:wybe.phantom, ?#wybe.io$io#4:wybe.phantom) @wybe:78:28
    foreign c print_string("course name: ":wybe.string, ~#wybe.io$io#4:wybe.phantom, ?#wybe.io$io#5:wybe.phantom) @wybe:92:41
    foreign lpvm access(~tmp$1#0:mystudent.course, 8:wybe.int, ?tmp$3#0:wybe.string)
    foreign c print_string(~tmp$3#0:wybe.string, ~#wybe.io$io#5:wybe.phantom, ?tmp$23#0:wybe.phantom) @wybe:92:41
    foreign c putchar('\n':wybe.char, ~tmp$23#0:wybe.phantom, ?#wybe.io$io#6:wybe.phantom) @wybe:78:28
  submodules      : mystudent.course, mystudent.student
--------------------------------------------------
 Module mystudent.course([])
  public submods  : 
  public types    : 
  public resources: 
  public procs    : mystudent.course.=<0>
                    mystudent.course.=<1>
                    mystudent.course.=<2>
                    mystudent.course.code<0>
                    mystudent.course.code<1>
                    mystudent.course.course<0>
                    mystudent.course.course<1>
                    mystudent.course.name<0>
                    mystudent.course.name<1>
  imports         : use mystudent
                    use wybe
  types           : 
  resources       : 
  procs           : 

= > public inline (0 calls)
0: =(?out#0:mystudent.course, in#0:mystudent.course): AliasPairs: []
    foreign llvm move(~in#0:mystudent.course, ?out#0:mystudent.course)
= > public inline (0 calls)
1: =(in#0:mystudent.course, ?out#0:mystudent.course): AliasPairs: []
    foreign llvm move(~in#0:mystudent.course, ?out#0:mystudent.course)
= > public inline test (3 calls)
2: =($left#0:mystudent.course, $right#0:mystudent.course, ?$$#0:wybe.bool): AliasPairs: []
    foreign lpvm access($left#0:mystudent.course, 0:wybe.int, ?$left$code#0:wybe.int)
    foreign lpvm access(~$left#0:mystudent.course, 8:wybe.int, ?$left$name#0:wybe.string)
    foreign lpvm access($right#0:mystudent.course, 0:wybe.int, ?$right$code#0:wybe.int)
    foreign lpvm access(~$right#0:mystudent.course, 8:wybe.int, ?$right$name#0:wybe.string)
    foreign llvm icmp eq(~$left$code#0:wybe.int, ~$right$code#0:wybe.int, ?tmp$2#0:wybe.bool) @wybe:28:40
    case ~tmp$2#0:wybe.bool of
    0:
        foreign llvm move(0:wybe.bool, ?$$#0:wybe.bool)

    1:
        foreign c strcmp(~$left$name#0:wybe.string, ~$right$name#0:wybe.string, ?tmp$10#0:wybe.int) @wybe:61:46
        wybe.int.=<2>(~tmp$10#0:wybe.int, 0:wybe.int, ?$$#0:wybe.bool) @wybe:61:46



code > public inline (0 calls)
0: code($rec#0:mystudent.course, ?$#0:wybe.int): AliasPairs: []
    foreign lpvm access(~$rec#0:mystudent.course, 0:wybe.int, ?$#0:wybe.int)
code > public inline (0 calls)
1: code($rec#0:mystudent.course, ?$rec#1:mystudent.course, $field#0:wybe.int): AliasPairs: []
    foreign lpvm mutate(~%$rec#0:mystudent.course, ?%$rec#1:mystudent.course, 16:wybe.int, 0:wybe.int, 0:wybe.int, ~$field#0:wybe.int)


course > public inline (0 calls)
0: course(code#0:wybe.int, name#0:wybe.string, ?$#0:mystudent.course): AliasPairs: []
    foreign lpvm alloc(16:wybe.int, ?$rec#0:mystudent.course)
    foreign lpvm mutate(~%$rec#0:mystudent.course, ?%$rec#1:mystudent.course, 16:wybe.int, 0:wybe.int, 1:wybe.int, ~code#0:wybe.int)
    foreign lpvm mutate(~%$rec#1:mystudent.course, ?%$#0:mystudent.course, 16:wybe.int, 8:wybe.int, 1:wybe.int, ~name#0:wybe.string)
course > public inline (4 calls)
1: course(?code#0:wybe.int, ?name#0:wybe.string, $#0:mystudent.course): AliasPairs: []
    foreign lpvm access($#0:mystudent.course, 0:wybe.int, ?code#0:wybe.int)
    foreign lpvm access(~$#0:mystudent.course, 8:wybe.int, ?name#0:wybe.string)


name > public inline (0 calls)
0: name($rec#0:mystudent.course, ?$#0:wybe.string): AliasPairs: []
    foreign lpvm access(~$rec#0:mystudent.course, 8:wybe.int, ?$#0:wybe.string)
name > public inline (0 calls)
1: name($rec#0:mystudent.course, ?$rec#1:mystudent.course, $field#0:wybe.string): AliasPairs: []
    foreign lpvm mutate(~%$rec#0:mystudent.course, ?%$rec#1:mystudent.course, 16:wybe.int, 8:wybe.int, 0:wybe.int, ~$field#0:wybe.string)
--------------------------------------------------
 Module mystudent.student([])
  public submods  : 
  public types    : 
  public resources: 
  public procs    : mystudent.student.=<0>
                    mystudent.student.=<1>
                    mystudent.student.=<2>
                    mystudent.student.id<0>
                    mystudent.student.id<1>
                    mystudent.student.major<0>
                    mystudent.student.major<1>
                    mystudent.student.student<0>
                    mystudent.student.student<1>
  imports         : use mystudent
                    use wybe
  types           : 
  resources       : 
  procs           : 

= > public inline (0 calls)
0: =(?out#0:mystudent.student, in#0:mystudent.student): AliasPairs: []
    foreign llvm move(~in#0:mystudent.student, ?out#0:mystudent.student)
= > public inline (0 calls)
1: =(in#0:mystudent.student, ?out#0:mystudent.student): AliasPairs: []
    foreign llvm move(~in#0:mystudent.student, ?out#0:mystudent.student)
= > public inline test (3 calls)
2: =($left#0:mystudent.student, $right#0:mystudent.student, ?$$#0:wybe.bool): AliasPairs: []
    foreign lpvm access($left#0:mystudent.student, 0:wybe.int, ?$left$id#0:wybe.int)
    foreign lpvm access(~$left#0:mystudent.student, 8:wybe.int, ?$left$major#0:mystudent.course)
    foreign lpvm access($right#0:mystudent.student, 0:wybe.int, ?$right$id#0:wybe.int)
    foreign lpvm access(~$right#0:mystudent.student, 8:wybe.int, ?$right$major#0:mystudent.course)
    foreign llvm icmp eq(~$left$id#0:wybe.int, ~$right$id#0:wybe.int, ?tmp$2#0:wybe.bool) @wybe:28:40
    case ~tmp$2#0:wybe.bool of
    0:
        foreign llvm move(0:wybe.bool, ?$$#0:wybe.bool)

    1:
        mystudent.course.course<1>(?tmp$12#0:wybe.int, ?tmp$13#0:wybe.string, ~$left$major#0:mystudent.course)
        mystudent.course.course<1>(?tmp$14#0:wybe.int, ?tmp$15#0:wybe.string, ~$right$major#0:mystudent.course)
        wybe.int.=<2>(~tmp$12#0:wybe.int, ~tmp$14#0:wybe.int, ?tmp$16#0:wybe.bool)
        case ~tmp$16#0:wybe.bool of
        0:
            foreign llvm move(0:wybe.bool, ?tmp$3#0:wybe.bool)
            foreign llvm move(~tmp$3#0, ?$$#0:wybe.bool)

        1:
            wybe.string.=<2>(~tmp$13#0:wybe.string, ~tmp$15#0:wybe.string, ?tmp$3#0:wybe.bool)
            foreign llvm move(~tmp$3#0, ?$$#0:wybe.bool)




id > public inline (0 calls)
0: id($rec#0:mystudent.student, ?$#0:wybe.int): AliasPairs: []
    foreign lpvm access(~$rec#0:mystudent.student, 0:wybe.int, ?$#0:wybe.int)
id > public inline (0 calls)
1: id($rec#0:mystudent.student, ?$rec#1:mystudent.student, $field#0:wybe.int): AliasPairs: []
    foreign lpvm mutate(~%$rec#0:mystudent.student, ?%$rec#1:mystudent.student, 16:wybe.int, 0:wybe.int, 0:wybe.int, ~$field#0:wybe.int)


major > public inline (0 calls)
0: major($rec#0:mystudent.student, ?$#0:mystudent.course): AliasPairs: []
    foreign lpvm access(~$rec#0:mystudent.student, 8:wybe.int, ?$#0:mystudent.course)
major > public inline (0 calls)
1: major($rec#0:mystudent.student, ?$rec#1:mystudent.student, $field#0:mystudent.course): AliasPairs: []
    foreign lpvm mutate(~%$rec#0:mystudent.student, ?%$rec#1:mystudent.student, 16:wybe.int, 8:wybe.int, 0:wybe.int, ~$field#0:mystudent.course)


student > public inline (0 calls)
0: student(id#0:wybe.int, major#0:mystudent.course, ?$#0:mystudent.student): AliasPairs: []
    foreign lpvm alloc(16:wybe.int, ?$rec#0:mystudent.student)
    foreign lpvm mutate(~%$rec#0:mystudent.student, ?%$rec#1:mystudent.student, 16:wybe.int, 0:wybe.int, 1:wybe.int, ~id#0:wybe.int)
    foreign lpvm mutate(~%$rec#1:mystudent.student, ?%$#0:mystudent.student, 16:wybe.int, 8:wybe.int, 1:wybe.int, ~major#0:mystudent.course)
student > public inline (4 calls)
1: student(?id#0:wybe.int, ?major#0:mystudent.course, $#0:mystudent.student): AliasPairs: []
    foreign lpvm access($#0:mystudent.student, 0:wybe.int, ?id#0:wybe.int)
    foreign lpvm access(~$#0:mystudent.student, 8:wybe.int, ?major#0:mystudent.course)
mystudent, mystudent.course, mystudent.student
======================================================================
AFTER LLVM IR:

; ModuleID = 'mystudent'
source_filename = "test-cases/mystudent.wybe"

@mystudent.13 = constant [14 x i8] c"course name: \00"
@mystudent.9 = constant [14 x i8] c"course code: \00"
@mystudent.1 = constant [13 x i8] c"student id: \00"

declare void @putchar(i8) local_unnamed_addr

declare void @print_string(i8*) local_unnamed_addr

declare void @print_int(i64) local_unnamed_addr

declare i8* @wybe_malloc(i32) local_unnamed_addr

declare void @llvm.memcpy.p0i8.p0i8.i32(i8*, i8*, i32, i1)

define void @"mystudent.printStudent<0>"(i64* nocapture readonly) local_unnamed_addr {
entry:
  tail call void @print_string(i8* getelementptr inbounds ([13 x i8], [13 x i8]* @mystudent.1, i64 0, i64 0))
  %1 = load i64, i64* %0, align 4
  tail call void @print_int(i64 %1)
  tail call void @putchar(i8 10)
  %2 = getelementptr i64, i64* %0, i64 1
  %3 = bitcast i64* %2 to i64**
  %4 = load i64*, i64** %3, align 8
  tail call void @print_string(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @mystudent.9, i64 0, i64 0))
  %5 = load i64, i64* %4, align 4
  tail call void @print_int(i64 %5)
  tail call void @putchar(i8 10)
  tail call void @print_string(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @mystudent.13, i64 0, i64 0))
  %6 = getelementptr i64, i64* %4, i64 8
  %7 = bitcast i64* %6 to i8**
  %8 = load i8*, i8** %7, align 8
  tail call void @print_string(i8* %8)
  tail call void @putchar(i8 10)
  ret void
}

declare i1 @"wybe.int.=<2>"(i64, i64) local_unnamed_addr

declare i64 @strcmp(i8*, i8*) local_unnamed_addr

; Function Attrs: norecurse nounwind readnone
define i64* @"mystudent.course.=<0>"(i64* readnone returned %"in#0") local_unnamed_addr #0 {
entry:
  ret i64* %"in#0"
}

; Function Attrs: norecurse nounwind readnone
define i64* @"mystudent.course.=<1>"(i64* readnone returned %"in#0") local_unnamed_addr #0 {
entry:
  ret i64* %"in#0"
}

define i1 @"mystudent.course.=<2>"(i64* nocapture readonly, i64* nocapture readonly) local_unnamed_addr {
entry:
  %2 = load i64, i64* %0, align 4
  %3 = load i64, i64* %1, align 4
  %"tmp$2#0" = icmp eq i64 %2, %3
  br i1 %"tmp$2#0", label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %4 = getelementptr i64, i64* %1, i64 8
  %5 = bitcast i64* %4 to i8**
  %6 = load i8*, i8** %5, align 8
  %7 = getelementptr i64, i64* %0, i64 8
  %8 = bitcast i64* %7 to i8**
  %9 = load i8*, i8** %8, align 8
  %"tmp$10#0" = tail call i64 @strcmp(i8* %9, i8* %6)
  %"$$#0" = tail call i1 @"wybe.int.=<2>"(i64 %"tmp$10#0", i64 0)
  ret i1 %"$$#0"

if.else:                                          ; preds = %entry
  ret i1 false
}

; Function Attrs: norecurse nounwind readonly
define i64 @"mystudent.course.code<0>"(i64* nocapture readonly) local_unnamed_addr #1 {
entry:
  %1 = load i64, i64* %0, align 4
  ret i64 %1
}

define i64* @"mystudent.course.code<1>"(i64* %"$rec#0", i64 %"$field#0") local_unnamed_addr {
entry:
  %0 = tail call i8* @wybe_malloc(i32 16)
  %1 = bitcast i8* %0 to i64*
  %2 = bitcast i64* %"$rec#0" to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i32(i8* %0, i8* %2, i32 16, i1 false)
  store i64 %"$field#0", i64* %1, align 4
  ret i64* %1
}

define i64* @"mystudent.course.course<0>"(i64 %"code#0", i8* %"name#0") local_unnamed_addr {
entry:
  %0 = tail call i8* @wybe_malloc(i32 16)
  %1 = bitcast i8* %0 to i64*
  store i64 %"code#0", i64* %1, align 4
  %2 = getelementptr i8, i8* %0, i64 64
  %3 = bitcast i8* %2 to i8**
  store i8* %"name#0", i8** %3, align 8
  ret i64* %1
}

; Function Attrs: norecurse nounwind readonly
define { i64, i8* } @"mystudent.course.course<1>"(i64* nocapture readonly) local_unnamed_addr #1 {
entry:
  %1 = load i64, i64* %0, align 4
  %2 = getelementptr i64, i64* %0, i64 8
  %3 = bitcast i64* %2 to i8**
  %4 = load i8*, i8** %3, align 8
  %5 = insertvalue { i64, i8* } undef, i64 %1, 0
  %6 = insertvalue { i64, i8* } %5, i8* %4, 1
  ret { i64, i8* } %6
}

; Function Attrs: norecurse nounwind readonly
define i8* @"mystudent.course.name<0>"(i64* nocapture readonly %"$rec#0") local_unnamed_addr #1 {
entry:
  %0 = getelementptr i64, i64* %"$rec#0", i64 8
  %1 = bitcast i64* %0 to i8**
  %2 = load i8*, i8** %1, align 8
  ret i8* %2
}

define i64* @"mystudent.course.name<1>"(i64* %"$rec#0", i8* %"$field#0") local_unnamed_addr {
entry:
  %0 = tail call i8* @wybe_malloc(i32 16)
  %1 = bitcast i8* %0 to i64*
  %2 = bitcast i64* %"$rec#0" to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i32(i8* %0, i8* %2, i32 16, i1 false)
  %3 = getelementptr i8, i8* %0, i64 64
  %4 = bitcast i8* %3 to i8**
  store i8* %"$field#0", i8** %4, align 8
  ret i64* %1
}

declare i1 @"wybe.string.=<2>"(i8*, i8*) local_unnamed_addr

declare { i64, i8* } @"mystudent.course.course<1>.1"(i64*) local_unnamed_addr

; Function Attrs: norecurse nounwind readnone
define i64* @"mystudent.student.=<0>"(i64* readnone returned %"in#0") local_unnamed_addr #0 {
entry:
  ret i64* %"in#0"
}

; Function Attrs: norecurse nounwind readnone
define i64* @"mystudent.student.=<1>"(i64* readnone returned %"in#0") local_unnamed_addr #0 {
entry:
  ret i64* %"in#0"
}

define i1 @"mystudent.student.=<2>"(i64* nocapture readonly, i64* nocapture readonly) local_unnamed_addr {
entry:
  %2 = load i64, i64* %0, align 4
  %3 = load i64, i64* %1, align 4
  %"tmp$2#0" = icmp eq i64 %2, %3
  br i1 %"tmp$2#0", label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %4 = getelementptr i64, i64* %1, i64 1
  %5 = bitcast i64* %4 to i64**
  %6 = load i64*, i64** %5, align 8
  %7 = getelementptr i64, i64* %0, i64 1
  %8 = bitcast i64* %7 to i64**
  %9 = load i64*, i64** %8, align 8
  %10 = tail call { i64, i8* } @"mystudent.course.course<1>.1"(i64* %9)
  %11 = extractvalue { i64, i8* } %10, 0
  %12 = tail call { i64, i8* } @"mystudent.course.course<1>.1"(i64* %6)
  %13 = extractvalue { i64, i8* } %12, 0
  %"tmp$16#0" = tail call i1 @"wybe.int.=<2>"(i64 %11, i64 %13)
  br i1 %"tmp$16#0", label %if.then1, label %if.else

if.else:                                          ; preds = %if.then, %entry
  ret i1 false

if.then1:                                         ; preds = %if.then
  %14 = extractvalue { i64, i8* } %12, 1
  %15 = extractvalue { i64, i8* } %10, 1
  %"tmp$3#0" = tail call i1 @"wybe.string.=<2>"(i8* %15, i8* %14)
  ret i1 %"tmp$3#0"
}

; Function Attrs: norecurse nounwind readonly
define i64 @"mystudent.student.id<0>"(i64* nocapture readonly) local_unnamed_addr #1 {
entry:
  %1 = load i64, i64* %0, align 4
  ret i64 %1
}

define i64* @"mystudent.student.id<1>"(i64* %"$rec#0", i64 %"$field#0") local_unnamed_addr {
entry:
  %0 = tail call i8* @wybe_malloc(i32 16)
  %1 = bitcast i8* %0 to i64*
  %2 = bitcast i64* %"$rec#0" to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i32(i8* %0, i8* %2, i32 16, i1 false)
  store i64 %"$field#0", i64* %1, align 4
  ret i64* %1
}

; Function Attrs: norecurse nounwind readonly
define i64* @"mystudent.student.major<0>"(i64* nocapture readonly %"$rec#0") local_unnamed_addr #1 {
entry:
  %0 = getelementptr i64, i64* %"$rec#0", i64 1
  %1 = bitcast i64* %0 to i64**
  %2 = load i64*, i64** %1, align 8
  ret i64* %2
}

define i64* @"mystudent.student.major<1>"(i64* %"$rec#0", i64* %"$field#0") local_unnamed_addr {
entry:
  %0 = tail call i8* @wybe_malloc(i32 16)
  %1 = bitcast i8* %0 to i64*
  %2 = bitcast i64* %"$rec#0" to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i32(i8* %0, i8* %2, i32 16, i1 false)
  %3 = getelementptr i8, i8* %0, i64 8
  %4 = bitcast i8* %3 to i64**
  store i64* %"$field#0", i64** %4, align 8
  ret i64* %1
}

define i64* @"mystudent.student.student<0>"(i64 %"id#0", i64* %"major#0") local_unnamed_addr {
entry:
  %0 = tail call i8* @wybe_malloc(i32 16)
  %1 = bitcast i8* %0 to i64*
  store i64 %"id#0", i64* %1, align 4
  %2 = getelementptr i8, i8* %0, i64 8
  %3 = bitcast i8* %2 to i64**
  store i64* %"major#0", i64** %3, align 8
  ret i64* %1
}

; Function Attrs: norecurse nounwind readonly
define { i64, i64* } @"mystudent.student.student<1>"(i64* nocapture readonly) local_unnamed_addr #1 {
entry:
  %1 = load i64, i64* %0, align 4
  %2 = getelementptr i64, i64* %0, i64 1
  %3 = bitcast i64* %2 to i64**
  %4 = load i64*, i64** %3, align 8
  %5 = insertvalue { i64, i64* } undef, i64 %1, 0
  %6 = insertvalue { i64, i64* } %5, i64* %4, 1
  ret { i64, i64* } %6
}

attributes #0 = { norecurse nounwind readnone }
attributes #1 = { norecurse nounwind readonly }

--------------------------------------------------
; ModuleID = 'mystudent.course'
source_filename = "test-cases"

declare i1 @"wybe.int.=<2>"(i64, i64) local_unnamed_addr

declare i64 @strcmp(i8*, i8*) local_unnamed_addr

declare i8* @wybe_malloc(i32) local_unnamed_addr

declare void @llvm.memcpy.p0i8.p0i8.i32(i8*, i8*, i32, i1)

; Function Attrs: norecurse nounwind readnone
define i64* @"mystudent.course.=<0>"(i64* readnone returned %"in#0") local_unnamed_addr #0 {
entry:
  ret i64* %"in#0"
}

; Function Attrs: norecurse nounwind readnone
define i64* @"mystudent.course.=<1>"(i64* readnone returned %"in#0") local_unnamed_addr #0 {
entry:
  ret i64* %"in#0"
}

define i1 @"mystudent.course.=<2>"(i64* nocapture readonly, i64* nocapture readonly) local_unnamed_addr {
entry:
  %2 = load i64, i64* %0, align 4
  %3 = load i64, i64* %1, align 4
  %"tmp$2#0" = icmp eq i64 %2, %3
  br i1 %"tmp$2#0", label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %4 = getelementptr i64, i64* %1, i64 8
  %5 = bitcast i64* %4 to i8**
  %6 = load i8*, i8** %5, align 8
  %7 = getelementptr i64, i64* %0, i64 8
  %8 = bitcast i64* %7 to i8**
  %9 = load i8*, i8** %8, align 8
  %"tmp$10#0" = tail call i64 @strcmp(i8* %9, i8* %6)
  %"$$#0" = tail call i1 @"wybe.int.=<2>"(i64 %"tmp$10#0", i64 0)
  ret i1 %"$$#0"

if.else:                                          ; preds = %entry
  ret i1 false
}

; Function Attrs: norecurse nounwind readonly
define i64 @"mystudent.course.code<0>"(i64* nocapture readonly) local_unnamed_addr #1 {
entry:
  %1 = load i64, i64* %0, align 4
  ret i64 %1
}

define i64* @"mystudent.course.code<1>"(i64* %"$rec#0", i64 %"$field#0") local_unnamed_addr {
entry:
  %0 = tail call i8* @wybe_malloc(i32 16)
  %1 = bitcast i8* %0 to i64*
  %2 = bitcast i64* %"$rec#0" to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i32(i8* %0, i8* %2, i32 16, i1 false)
  store i64 %"$field#0", i64* %1, align 4
  ret i64* %1
}

define i64* @"mystudent.course.course<0>"(i64 %"code#0", i8* %"name#0") local_unnamed_addr {
entry:
  %0 = tail call i8* @wybe_malloc(i32 16)
  %1 = bitcast i8* %0 to i64*
  store i64 %"code#0", i64* %1, align 4
  %2 = getelementptr i8, i8* %0, i64 64
  %3 = bitcast i8* %2 to i8**
  store i8* %"name#0", i8** %3, align 8
  ret i64* %1
}

; Function Attrs: norecurse nounwind readonly
define { i64, i8* } @"mystudent.course.course<1>"(i64* nocapture readonly) local_unnamed_addr #1 {
entry:
  %1 = load i64, i64* %0, align 4
  %2 = getelementptr i64, i64* %0, i64 8
  %3 = bitcast i64* %2 to i8**
  %4 = load i8*, i8** %3, align 8
  %5 = insertvalue { i64, i8* } undef, i64 %1, 0
  %6 = insertvalue { i64, i8* } %5, i8* %4, 1
  ret { i64, i8* } %6
}

; Function Attrs: norecurse nounwind readonly
define i8* @"mystudent.course.name<0>"(i64* nocapture readonly %"$rec#0") local_unnamed_addr #1 {
entry:
  %0 = getelementptr i64, i64* %"$rec#0", i64 8
  %1 = bitcast i64* %0 to i8**
  %2 = load i8*, i8** %1, align 8
  ret i8* %2
}

define i64* @"mystudent.course.name<1>"(i64* %"$rec#0", i8* %"$field#0") local_unnamed_addr {
entry:
  %0 = tail call i8* @wybe_malloc(i32 16)
  %1 = bitcast i8* %0 to i64*
  %2 = bitcast i64* %"$rec#0" to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i32(i8* %0, i8* %2, i32 16, i1 false)
  %3 = getelementptr i8, i8* %0, i64 64
  %4 = bitcast i8* %3 to i8**
  store i8* %"$field#0", i8** %4, align 8
  ret i64* %1
}

attributes #0 = { norecurse nounwind readnone }
attributes #1 = { norecurse nounwind readonly }

--------------------------------------------------
; ModuleID = 'mystudent.student'
source_filename = "test-cases"

declare i1 @"wybe.string.=<2>"(i8*, i8*) local_unnamed_addr

declare i1 @"wybe.int.=<2>"(i64, i64) local_unnamed_addr

declare { i64, i8* } @"mystudent.course.course<1>"(i64*) local_unnamed_addr

declare i8* @wybe_malloc(i32) local_unnamed_addr

declare void @llvm.memcpy.p0i8.p0i8.i32(i8*, i8*, i32, i1)

; Function Attrs: norecurse nounwind readnone
define i64* @"mystudent.student.=<0>"(i64* readnone returned %"in#0") local_unnamed_addr #0 {
entry:
  ret i64* %"in#0"
}

; Function Attrs: norecurse nounwind readnone
define i64* @"mystudent.student.=<1>"(i64* readnone returned %"in#0") local_unnamed_addr #0 {
entry:
  ret i64* %"in#0"
}

define i1 @"mystudent.student.=<2>"(i64* nocapture readonly, i64* nocapture readonly) local_unnamed_addr {
entry:
  %2 = load i64, i64* %0, align 4
  %3 = load i64, i64* %1, align 4
  %"tmp$2#0" = icmp eq i64 %2, %3
  br i1 %"tmp$2#0", label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %4 = getelementptr i64, i64* %1, i64 1
  %5 = bitcast i64* %4 to i64**
  %6 = load i64*, i64** %5, align 8
  %7 = getelementptr i64, i64* %0, i64 1
  %8 = bitcast i64* %7 to i64**
  %9 = load i64*, i64** %8, align 8
  %10 = tail call { i64, i8* } @"mystudent.course.course<1>"(i64* %9)
  %11 = extractvalue { i64, i8* } %10, 0
  %12 = tail call { i64, i8* } @"mystudent.course.course<1>"(i64* %6)
  %13 = extractvalue { i64, i8* } %12, 0
  %"tmp$16#0" = tail call i1 @"wybe.int.=<2>"(i64 %11, i64 %13)
  br i1 %"tmp$16#0", label %if.then1, label %if.else

if.else:                                          ; preds = %if.then, %entry
  ret i1 false

if.then1:                                         ; preds = %if.then
  %14 = extractvalue { i64, i8* } %12, 1
  %15 = extractvalue { i64, i8* } %10, 1
  %"tmp$3#0" = tail call i1 @"wybe.string.=<2>"(i8* %15, i8* %14)
  ret i1 %"tmp$3#0"
}

; Function Attrs: norecurse nounwind readonly
define i64 @"mystudent.student.id<0>"(i64* nocapture readonly) local_unnamed_addr #1 {
entry:
  %1 = load i64, i64* %0, align 4
  ret i64 %1
}

define i64* @"mystudent.student.id<1>"(i64* %"$rec#0", i64 %"$field#0") local_unnamed_addr {
entry:
  %0 = tail call i8* @wybe_malloc(i32 16)
  %1 = bitcast i8* %0 to i64*
  %2 = bitcast i64* %"$rec#0" to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i32(i8* %0, i8* %2, i32 16, i1 false)
  store i64 %"$field#0", i64* %1, align 4
  ret i64* %1
}

; Function Attrs: norecurse nounwind readonly
define i64* @"mystudent.student.major<0>"(i64* nocapture readonly %"$rec#0") local_unnamed_addr #1 {
entry:
  %0 = getelementptr i64, i64* %"$rec#0", i64 1
  %1 = bitcast i64* %0 to i64**
  %2 = load i64*, i64** %1, align 8
  ret i64* %2
}

define i64* @"mystudent.student.major<1>"(i64* %"$rec#0", i64* %"$field#0") local_unnamed_addr {
entry:
  %0 = tail call i8* @wybe_malloc(i32 16)
  %1 = bitcast i8* %0 to i64*
  %2 = bitcast i64* %"$rec#0" to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i32(i8* %0, i8* %2, i32 16, i1 false)
  %3 = getelementptr i8, i8* %0, i64 8
  %4 = bitcast i8* %3 to i64**
  store i64* %"$field#0", i64** %4, align 8
  ret i64* %1
}

define i64* @"mystudent.student.student<0>"(i64 %"id#0", i64* %"major#0") local_unnamed_addr {
entry:
  %0 = tail call i8* @wybe_malloc(i32 16)
  %1 = bitcast i8* %0 to i64*
  store i64 %"id#0", i64* %1, align 4
  %2 = getelementptr i8, i8* %0, i64 8
  %3 = bitcast i8* %2 to i64**
  store i64* %"major#0", i64** %3, align 8
  ret i64* %1
}

; Function Attrs: norecurse nounwind readonly
define { i64, i64* } @"mystudent.student.student<1>"(i64* nocapture readonly) local_unnamed_addr #1 {
entry:
  %1 = load i64, i64* %0, align 4
  %2 = getelementptr i64, i64* %0, i64 1
  %3 = bitcast i64* %2 to i64**
  %4 = load i64*, i64** %3, align 8
  %5 = insertvalue { i64, i64* } undef, i64 %1, 0
  %6 = insertvalue { i64, i64* } %5, i64* %4, 1
  ret { i64, i64* } %6
}

attributes #0 = { norecurse nounwind readnone }
attributes #1 = { norecurse nounwind readonly }

