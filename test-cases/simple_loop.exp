======================================================================
AFTER EVERYTHING:
 Module simple_loop
  public submods  : 
  public types    : 
  public resources: 
  public procs    : simple_loop.<0>
  imports         : use wybe
  types           : 
  resources       : 
  procs           : 

*main* > public (0 calls) (inline)
0: (wybe.io$io#0:wybe.phantom, ?wybe.io$io#1:wybe.phantom):
    simple_loop.gen$1<0>(~wybe.io$io#0:wybe.phantom, ?wybe.io$io#1:wybe.phantom) @simple_loop:1:1


gen$1 > (2 calls)
0: gen$1(wybe.io$io#0:wybe.phantom, ?wybe.io$io#2:wybe.phantom):
    foreign c read_char(?c#0:wybe.char, ~#wybe.io$io#0:wybe.phantom, ?#wybe.io$io#1:wybe.phantom) @wybe:114:39
    foreign llvm icmp ne(c#0:wybe.char, 'a':wybe.char, ?tmp$4#0:wybe.bool) @wybe:69:42
    case ~tmp$4#0:wybe.bool of
    0:
        foreign llvm move(~wybe.io$io#1:wybe.phantom, ?wybe.io$io#2:wybe.phantom)

    1:
        foreign c putchar(~c#0:wybe.char, ~wybe.io$io#1:wybe.phantom, ?tmp$8#0:wybe.phantom) @wybe:112:39
        simple_loop.gen$1<0>(~tmp$8#0:wybe.phantom, ?wybe.io$io#2:wybe.phantom) @simple_loop:1:1



gen$3 > (1 calls) (inline)
0: gen$3([c#0:wybe.char], [tmp$0#0:wybe.bool], wybe.io$io#0:wybe.phantom, [?wybe.io$io#0:wybe.phantom]):


gen$4 > (1 calls) (inline)
0: gen$4(c#0:wybe.char, [tmp$0#0:wybe.bool], wybe.io$io#0:wybe.phantom, ?wybe.io$io#2:wybe.phantom):
    foreign c putchar(~c#0:wybe.char, ~#wybe.io$io#0:wybe.phantom, ?#wybe.io$io#1:wybe.phantom) @wybe:112:39
    simple_loop.gen$1<0>(~wybe.io$io#1:wybe.phantom, ?wybe.io$io#2:wybe.phantom) @simple_loop:1:1
simple_loop
======================================================================
AFTER LLVM IR:

; ModuleID = 'simple_loop'

declare void @putchar(i8)

declare i8 @read_char()

declare i8* @wybe_malloc(i32)

define i32 @simple_loop.main() {
entry:
  tail call void @"simple_loop.gen$1<0>"()
  ret void
}

define void @"simple_loop.gen$1<0>"() {
entry:
  %"c#0" = tail call i8 @read_char()
  %"tmp$4#0" = icmp ne i8 %"c#0", 97
  br i1 %"tmp$4#0", label %if.then, label %if.else

if.then:                                          ; preds = %entry
  tail call void @putchar(i8 %"c#0")
  tail call void @"simple_loop.gen$1<0>"()
  ret void

if.else:                                          ; preds = %entry
  ret void
}

define void @"simple_loop.gen$4<0>"(i8 %"c#0") {
entry:
  tail call void @putchar(i8 %"c#0")
  tail call void @"simple_loop.gen$1<0>"()
  ret void
}

