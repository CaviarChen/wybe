======================================================================
AFTER EVERYTHING:
 Module simple_loop
  public submods  : 
  public types    : 
  public resources: 
  public procs    : simple_loop.<0>
  imports         : use wybe
  types           : 
  resources       : 
  procs           : 

*main* > public inline (0 calls)
0: (wybe.io$io#0:phantom, ?wybe.io$io#1:phantom):
    simple_loop.gen$1<0>(~wybe.io$io#0:phantom, ?wybe.io$io#1:phantom) @simple_loop:1:1


gen$1 > (2 calls)
0: gen$1(wybe.io$io#0:phantom, ?wybe.io$io#3:phantom):
    foreign c read_char(?c#0:wybe.char, ~#wybe.io$io#0:phantom, ?#wybe.io$io#1:phantom) @wybe:90:39
    foreign llvm icmp ne(c#0:wybe.char, 'a':wybe.char, ?tmp$1#0:wybe.bool) @wybe:71:42
    case ~tmp$1#0:wybe.bool of
    0:
        foreign llvm move(~wybe.io$io#1:phantom, ?wybe.io$io#3:phantom)

    1:
        foreign c putchar(~c#0:wybe.char, ~#wybe.io$io#1:phantom, ?#wybe.io$io#2:phantom) @wybe:88:39
        simple_loop.gen$1<0>(~wybe.io$io#2:phantom, ?wybe.io$io#3:phantom) @simple_loop:1:1



gen$2 > inline (1 calls)
0: gen$2([c#0:wybe.char], wybe.io$io#0:phantom, [?wybe.io$io#0:phantom]):
  LLVM code       :

; ModuleID = 'simple_loop'


declare external ccc void @putchar(i8)

declare external ccc i8 @read_char()

declare external ccc i8* @wybe_malloc(i32)

define external ccc i32 @simple_loop.main(){
entry:
  tail call ccc void @"simple_loop.gen$1<0>"()
  %1 = alloca i32
  store i32 0, i32* %1
  ret i32 0
}

define external ccc void @"simple_loop.gen$1<0>"(){
entry:
  %"c#0" = tail call ccc i8 @read_char()
  %"tmp$1#0" = icmp ne i8 %"c#0", 97
  br i1 %"tmp$1#0", label %if.then, label %if.else
if.then:
  tail call ccc void @putchar(i8 %"c#0")
  tail call ccc void @"simple_loop.gen$1<0>"()
  ret void
if.else:
  ret void
}
