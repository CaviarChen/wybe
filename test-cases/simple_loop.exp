======================================================================
AFTER EVERYTHING:
 Module simple_loop
  public submods  : 
  public types    : 
  public resources: 
  public procs    : simple_loop.<0>
  imports         : use wybe
  types           : 
  resources       : 
  procs           : 

*main* > public inline (0 calls)
0: (wybe.io$io#0:wybe.phantom, ?wybe.io$io#1:wybe.phantom) aliases []:
    simple_loop.gen$1<0>(~wybe.io$io#0:wybe.phantom, ?wybe.io$io#1:wybe.phantom) @simple_loop:1:1


gen$1 > (2 calls)
0: gen$1(wybe.io$io#0:wybe.phantom, ?wybe.io$io#3:wybe.phantom) aliases []:
    foreign c read_char(?c#0:wybe.char, ~#wybe.io$io#0:wybe.phantom, ?#wybe.io$io#1:wybe.phantom) @wybe:86:39
    foreign llvm icmp ne(c#0:wybe.char, 'a':wybe.char, ?tmp$1#0:wybe.bool) @wybe:68:42
    case ~tmp$1#0:wybe.bool of
    0:
        foreign llvm move(~wybe.io$io#1:wybe.phantom, ?wybe.io$io#3:wybe.phantom)

    1:
        foreign c putchar(~c#0:wybe.char, ~#wybe.io$io#1:wybe.phantom, ?#wybe.io$io#2:wybe.phantom) @wybe:84:39
        simple_loop.gen$1<0>(~wybe.io$io#2:wybe.phantom, ?wybe.io$io#3:wybe.phantom) @simple_loop:1:1



gen$2 > inline (1 calls)
0: gen$2([c#0:wybe.char], wybe.io$io#0:wybe.phantom, [?wybe.io$io#0:wybe.phantom]) aliases []:
simple_loop
======================================================================
AFTER LLVM IR:

; ModuleID = 'simple_loop'
source_filename = "test-cases/simple_loop.wybe"

declare void @putchar(i8) local_unnamed_addr

declare i8 @read_char() local_unnamed_addr

define i32 @simple_loop.main() local_unnamed_addr {
entry:
  tail call void @"simple_loop.gen$1<0>"()
  ret i32 0
}

define void @"simple_loop.gen$1<0>"() local_unnamed_addr {
entry:
  %"c#01" = tail call i8 @read_char()
  %"tmp$1#02" = icmp eq i8 %"c#01", 97
  br i1 %"tmp$1#02", label %if.else, label %if.then.preheader

if.then.preheader:                                ; preds = %entry
  br label %if.then

if.then:                                          ; preds = %if.then.preheader, %if.then
  %"c#03" = phi i8 [ %"c#0", %if.then ], [ %"c#01", %if.then.preheader ]
  tail call void @putchar(i8 %"c#03")
  %"c#0" = tail call i8 @read_char()
  %"tmp$1#0" = icmp eq i8 %"c#0", 97
  br i1 %"tmp$1#0", label %if.else, label %if.then

if.else:                                          ; preds = %if.then, %entry
  ret void
}

