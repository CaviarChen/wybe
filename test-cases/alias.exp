======================================================================
AFTER EVERYTHING:
 Module alias
  public submods  : 
  public types    : position: (alias.position,"pointer")
  public resources: 
  public procs    : alias.<0>
                    alias.position.=<0>
                    alias.position.=<1>
                    alias.position.=<2>
                    alias.position.position<0>
                    alias.position.position<1>
                    alias.position.x<0>
                    alias.position.x<1>
                    alias.position.y<0>
                    alias.position.y<1>
  imports         : public use alias.position
                    use wybe
  types           : position/0 (pointer)  @alias:1:9
  resources       : 
  procs           : 

*main* > public inline (0 calls)
0: (wybe.io$io#0:wybe.phantom, ?wybe.io$io#1:wybe.phantom):
    foreign c print_int(7777:wybe.int, ~#wybe.io$io#0:wybe.phantom, ?tmp$10#0:wybe.phantom) @wybe:76:38
    foreign c putchar('\n':wybe.char, ~tmp$10#0:wybe.phantom, ?#wybe.io$io#1:wybe.phantom) @wybe:74:28
  submodules      : alias.position
--------------------------------------------------
 Module alias.position([])
  public submods  : 
  public types    : 
  public resources: 
  public procs    : alias.position.=<0>
                    alias.position.=<1>
                    alias.position.=<2>
                    alias.position.position<0>
                    alias.position.position<1>
                    alias.position.x<0>
                    alias.position.x<1>
                    alias.position.y<0>
                    alias.position.y<1>
  imports         : use wybe
  types           : 
  resources       : 
  procs           : 

= > public inline (0 calls)
0: =(?out#0:alias.position, in#0:alias.position):
    foreign llvm move(~in#0:alias.position, ?out#0:alias.position)
= > public inline (0 calls)
1: =(in#0:alias.position, ?out#0:alias.position):
    foreign llvm move(~in#0:alias.position, ?out#0:alias.position)
= > public inline test (3 calls)
2: =($left#0:alias.position, $right#0:alias.position, ?$$#0:wybe.bool):
    foreign lpvm access($left#0:alias.position, 0:wybe.int, ?$left$x#0:wybe.int)
    foreign lpvm access(~$left#0:alias.position, 8:wybe.int, ?$left$y#0:wybe.int)
    foreign lpvm access($right#0:alias.position, 0:wybe.int, ?$right$x#0:wybe.int)
    foreign lpvm access(~$right#0:alias.position, 8:wybe.int, ?$right$y#0:wybe.int)
    foreign llvm icmp eq(~$left$x#0:wybe.int, ~$right$x#0:wybe.int, ?tmp$2#0:wybe.bool) @wybe:28:40
    case ~tmp$2#0:wybe.bool of
    0:
        foreign llvm move(0:wybe.bool, ?$$#0:wybe.bool)

    1:
        foreign llvm icmp eq(~$left$y#0:wybe.int, ~$right$y#0:wybe.int, ?$$#0:wybe.bool) @wybe:28:40



position > public inline (0 calls)
0: position(x#0:wybe.int, y#0:wybe.int, ?$#0:alias.position):
    foreign lpvm alloc(16:wybe.int, ?$rec#0:alias.position)
    foreign lpvm mutate(~%$rec#0:alias.position, ?%$rec#1:alias.position, 0:wybe.int, ~x#0:wybe.int)
    foreign lpvm mutate(~%$rec#1:alias.position, ?%$#0:alias.position, 8:wybe.int, ~y#0:wybe.int)
position > public inline (4 calls)
1: position(?x#0:wybe.int, ?y#0:wybe.int, $#0:alias.position):
    foreign lpvm access($#0:alias.position, 0:wybe.int, ?x#0:wybe.int)
    foreign lpvm access(~$#0:alias.position, 8:wybe.int, ?y#0:wybe.int)


x > public inline (0 calls)
0: x($rec#0:alias.position, ?$#0:wybe.int):
    foreign lpvm access(~$rec#0:alias.position, 0:wybe.int, ?$#0:wybe.int)
x > public inline (0 calls)
1: x($rec#0:alias.position, ?$rec#1:alias.position, $field#0:wybe.int):
    foreign lpvm mutate(~%$rec#0:alias.position, ?%$rec#1:alias.position, 0:wybe.int, ~$field#0:wybe.int)


y > public inline (0 calls)
0: y($rec#0:alias.position, ?$#0:wybe.int):
    foreign lpvm access(~$rec#0:alias.position, 8:wybe.int, ?$#0:wybe.int)
y > public inline (0 calls)
1: y($rec#0:alias.position, ?$rec#1:alias.position, $field#0:wybe.int):
    foreign lpvm mutate(~%$rec#0:alias.position, ?%$rec#1:alias.position, 8:wybe.int, ~$field#0:wybe.int)
alias, alias.position
======================================================================
AFTER LLVM IR:

; ModuleID = 'alias'
source_filename = "test-cases/alias.wybe"

declare void @putchar(i8) local_unnamed_addr

declare void @print_int(i64) local_unnamed_addr

declare i8* @wybe_malloc(i32) local_unnamed_addr

define i32 @alias.main() local_unnamed_addr {
entry:
  tail call void @print_int(i64 7777)
  tail call void @putchar(i8 10)
  ret i32 0
}

; Function Attrs: norecurse nounwind readnone
define i64* @"alias.position.=<0>"(i64* readnone returned %"in#0") local_unnamed_addr #0 {
entry:
  ret i64* %"in#0"
}

; Function Attrs: norecurse nounwind readnone
define i64* @"alias.position.=<1>"(i64* readnone returned %"in#0") local_unnamed_addr #0 {
entry:
  ret i64* %"in#0"
}

; Function Attrs: norecurse nounwind readonly
define i1 @"alias.position.=<2>"(i64* nocapture readonly %"$left#0", i64* nocapture readonly %"$right#0") local_unnamed_addr #1 {
entry:
  %0 = load i64, i64* %"$left#0", align 4
  %1 = load i64, i64* %"$right#0", align 4
  %"tmp$2#0" = icmp eq i64 %0, %1
  br i1 %"tmp$2#0", label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %2 = getelementptr i64, i64* %"$right#0", i64 1
  %3 = load i64, i64* %2, align 4
  %4 = getelementptr i64, i64* %"$left#0", i64 1
  %5 = load i64, i64* %4, align 4
  %"$$#0" = icmp eq i64 %5, %3
  ret i1 %"$$#0"

if.else:                                          ; preds = %entry
  ret i1 false
}

define i64* @"alias.position.position<0>"(i64 %"x#0", i64 %"y#0") local_unnamed_addr {
entry:
  %0 = tail call i8* @wybe_malloc(i32 16)
  %1 = bitcast i8* %0 to i64*
  store i64 %"x#0", i64* %1, align 4
  %2 = getelementptr i8, i8* %0, i64 8
  %3 = bitcast i8* %2 to i64*
  store i64 %"y#0", i64* %3, align 4
  ret i64* %1
}

; Function Attrs: norecurse nounwind readonly
define { i64, i64 } @"alias.position.position<1>"(i64* nocapture readonly %"$#0") local_unnamed_addr #1 {
entry:
  %0 = load i64, i64* %"$#0", align 4
  %1 = getelementptr i64, i64* %"$#0", i64 1
  %2 = load i64, i64* %1, align 4
  %3 = insertvalue { i64, i64 } undef, i64 %0, 0
  %4 = insertvalue { i64, i64 } %3, i64 %2, 1
  ret { i64, i64 } %4
}

; Function Attrs: norecurse nounwind readonly
define i64 @"alias.position.x<0>"(i64* nocapture readonly %"$rec#0") local_unnamed_addr #1 {
entry:
  %0 = load i64, i64* %"$rec#0", align 4
  ret i64 %0
}

; Function Attrs: norecurse nounwind
define i64* @"alias.position.x<1>"(i64* returned %"$rec#0", i64 %"$field#0") local_unnamed_addr #2 {
entry:
  store i64 %"$field#0", i64* %"$rec#0", align 4
  ret i64* %"$rec#0"
}

; Function Attrs: norecurse nounwind readonly
define i64 @"alias.position.y<0>"(i64* nocapture readonly %"$rec#0") local_unnamed_addr #1 {
entry:
  %0 = getelementptr i64, i64* %"$rec#0", i64 1
  %1 = load i64, i64* %0, align 4
  ret i64 %1
}

; Function Attrs: norecurse nounwind
define i64* @"alias.position.y<1>"(i64* returned %"$rec#0", i64 %"$field#0") local_unnamed_addr #2 {
entry:
  %0 = getelementptr i64, i64* %"$rec#0", i64 1
  store i64 %"$field#0", i64* %0, align 4
  ret i64* %"$rec#0"
}

attributes #0 = { norecurse nounwind readnone }
attributes #1 = { norecurse nounwind readonly }
attributes #2 = { norecurse nounwind }

--------------------------------------------------
; ModuleID = 'alias.position'
source_filename = "test-cases"

declare i8* @wybe_malloc(i32) local_unnamed_addr

; Function Attrs: norecurse nounwind readnone
define i64* @"alias.position.=<0>"(i64* readnone returned %"in#0") local_unnamed_addr #0 {
entry:
  ret i64* %"in#0"
}

; Function Attrs: norecurse nounwind readnone
define i64* @"alias.position.=<1>"(i64* readnone returned %"in#0") local_unnamed_addr #0 {
entry:
  ret i64* %"in#0"
}

; Function Attrs: norecurse nounwind readonly
define i1 @"alias.position.=<2>"(i64* nocapture readonly %"$left#0", i64* nocapture readonly %"$right#0") local_unnamed_addr #1 {
entry:
  %0 = load i64, i64* %"$left#0", align 4
  %1 = load i64, i64* %"$right#0", align 4
  %"tmp$2#0" = icmp eq i64 %0, %1
  br i1 %"tmp$2#0", label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %2 = getelementptr i64, i64* %"$right#0", i64 1
  %3 = load i64, i64* %2, align 4
  %4 = getelementptr i64, i64* %"$left#0", i64 1
  %5 = load i64, i64* %4, align 4
  %"$$#0" = icmp eq i64 %5, %3
  ret i1 %"$$#0"

if.else:                                          ; preds = %entry
  ret i1 false
}

define i64* @"alias.position.position<0>"(i64 %"x#0", i64 %"y#0") local_unnamed_addr {
entry:
  %0 = tail call i8* @wybe_malloc(i32 16)
  %1 = bitcast i8* %0 to i64*
  store i64 %"x#0", i64* %1, align 4
  %2 = getelementptr i8, i8* %0, i64 8
  %3 = bitcast i8* %2 to i64*
  store i64 %"y#0", i64* %3, align 4
  ret i64* %1
}

; Function Attrs: norecurse nounwind readonly
define { i64, i64 } @"alias.position.position<1>"(i64* nocapture readonly %"$#0") local_unnamed_addr #1 {
entry:
  %0 = load i64, i64* %"$#0", align 4
  %1 = getelementptr i64, i64* %"$#0", i64 1
  %2 = load i64, i64* %1, align 4
  %3 = insertvalue { i64, i64 } undef, i64 %0, 0
  %4 = insertvalue { i64, i64 } %3, i64 %2, 1
  ret { i64, i64 } %4
}

; Function Attrs: norecurse nounwind readonly
define i64 @"alias.position.x<0>"(i64* nocapture readonly %"$rec#0") local_unnamed_addr #1 {
entry:
  %0 = load i64, i64* %"$rec#0", align 4
  ret i64 %0
}

; Function Attrs: norecurse nounwind
define i64* @"alias.position.x<1>"(i64* returned %"$rec#0", i64 %"$field#0") local_unnamed_addr #2 {
entry:
  store i64 %"$field#0", i64* %"$rec#0", align 4
  ret i64* %"$rec#0"
}

; Function Attrs: norecurse nounwind readonly
define i64 @"alias.position.y<0>"(i64* nocapture readonly %"$rec#0") local_unnamed_addr #1 {
entry:
  %0 = getelementptr i64, i64* %"$rec#0", i64 1
  %1 = load i64, i64* %0, align 4
  ret i64 %1
}

; Function Attrs: norecurse nounwind
define i64* @"alias.position.y<1>"(i64* returned %"$rec#0", i64 %"$field#0") local_unnamed_addr #2 {
entry:
  %0 = getelementptr i64, i64* %"$rec#0", i64 1
  store i64 %"$field#0", i64* %0, align 4
  ret i64* %"$rec#0"
}

attributes #0 = { norecurse nounwind readnone }
attributes #1 = { norecurse nounwind readonly }
attributes #2 = { norecurse nounwind }

