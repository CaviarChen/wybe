======================================================================
AFTER EVERYTHING:
 Module exp_simple
  public submods  : 
  public types    : 
  public resources: 
  public procs    : exp_simple.<0>
  imports         : use wybe
  types           : 
  resources       : 
  procs           : 

*main* > public (0 calls)
0: (wybe.io$io#0:wybe.phantom, ?wybe.io$io#7:wybe.phantom): AliasPairs: []
    foreign c print_int(3:wybe.int, ~#wybe.io$io#0:wybe.phantom, ?tmp$8#0:wybe.phantom) @wybe:80:38
    foreign c putchar('\n':wybe.char, ~tmp$8#0:wybe.phantom, ?#wybe.io$io#1:wybe.phantom) @wybe:78:28
    foreign c print_float(3.5999999999999996:wybe.float, ~#wybe.io$io#1:wybe.phantom, ?tmp$13#0:wybe.phantom) @wybe:84:40
    foreign c putchar('\n':wybe.char, ~tmp$13#0:wybe.phantom, ?#wybe.io$io#2:wybe.phantom) @wybe:78:28
    foreign c putchar('h':wybe.char, ~#wybe.io$io#2:wybe.phantom, ?tmp$16#0:wybe.phantom) @wybe:88:39
    foreign c putchar('\n':wybe.char, ~tmp$16#0:wybe.phantom, ?#wybe.io$io#3:wybe.phantom) @wybe:78:28
    foreign c print_string("hello":wybe.string, ~#wybe.io$io#3:wybe.phantom, ?#wybe.io$io#4:wybe.phantom) @wybe:92:41
    foreign c print_int(3:wybe.int, ~#wybe.io$io#4:wybe.phantom, ?tmp$24#0:wybe.phantom) @wybe:80:38
    foreign c putchar('\n':wybe.char, ~tmp$24#0:wybe.phantom, ?#wybe.io$io#5:wybe.phantom) @wybe:78:28
    foreign c print_int(1001:wybe.int, ~#wybe.io$io#5:wybe.phantom, ?tmp$29#0:wybe.phantom) @wybe:80:38
    foreign c putchar('\n':wybe.char, ~tmp$29#0:wybe.phantom, ?#wybe.io$io#6:wybe.phantom) @wybe:78:28
    foreign c print_int(3:wybe.int, ~#wybe.io$io#6:wybe.phantom, ?#wybe.io$io#7:wybe.phantom) @wybe:80:38


foreign_add > inline (1 calls)
0: foreign_add(?$#0:wybe.int): AliasPairs: []
    foreign llvm move(3:wybe.int, ?$#0:wybe.int) @exp_simple:30:1
exp_simple
======================================================================
AFTER LLVM IR:

; ModuleID = 'exp_simple'
source_filename = "test-cases/exp_simple.wybe"

@exp_simple.1 = constant [6 x i8] c"hello\00"

declare void @print_int(i64) local_unnamed_addr

declare void @putchar(i8) local_unnamed_addr

declare void @print_string(i8*) local_unnamed_addr

declare void @print_float(double) local_unnamed_addr

define i32 @exp_simple.main() local_unnamed_addr {
entry:
  tail call void @print_int(i64 3)
  tail call void @putchar(i8 10)
  tail call void @print_float(double 0x400CCCCCCCCCCCCC)
  tail call void @putchar(i8 10)
  tail call void @putchar(i8 104)
  tail call void @putchar(i8 10)
  tail call void @print_string(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @exp_simple.1, i64 0, i64 0))
  tail call void @print_int(i64 3)
  tail call void @putchar(i8 10)
  tail call void @print_int(i64 1001)
  tail call void @putchar(i8 10)
  tail call void @print_int(i64 3)
  ret i32 0
}

; Function Attrs: norecurse nounwind readnone
define i64 @"exp_simple.foreign_add<0>"() local_unnamed_addr #0 {
entry:
  ret i64 3
}

attributes #0 = { norecurse nounwind readnone }

