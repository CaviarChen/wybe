======================================================================
AFTER EVERYTHING:
 Module position
  public submods  : 
  public types    : position: (position.position,"pointer")
  public resources: 
  public procs    : position.position.=<0>
                    position.position.=<1>
                    position.position.=<2>
                    position.position.position<0>
                    position.position.position<1>
                    position.position.x<0>
                    position.position.x<1>
                    position.position.y<0>
                    position.position.y<1>
  imports         : public use position.position
                    use wybe
  types           : position/0 (pointer)  @position:1:8
  resources       : 
  procs           : 

  submodules      : position.position
--------------------------------------------------
 Module position.position([])
  public submods  : 
  public types    : 
  public resources: 
  public procs    : position.position.=<0>
                    position.position.=<1>
                    position.position.=<2>
                    position.position.position<0>
                    position.position.position<1>
                    position.position.x<0>
                    position.position.x<1>
                    position.position.y<0>
                    position.position.y<1>
  imports         : use wybe
  types           : 
  resources       : 
  procs           : 

= > public inline (0 calls)
0: =(?out#0:position.position, in#0:position.position):
    foreign llvm move(~in#0:position.position, ?out#0:position.position)
= > public inline (0 calls)
1: =(in#0:position.position, ?out#0:position.position):
    foreign llvm move(~in#0:position.position, ?out#0:position.position)
= > public inline test (3 calls)
2: =($left#0:position.position, $right#0:position.position, ?$$#0:wybe.bool):
    foreign lpvm cast(~$left#0:position.position, ?tmp$0#0:wybe.int)
    foreign lpvm cast(~tmp$0#0:wybe.int, ?tmp$6#0:position.position)
    foreign lpvm access(tmp$6#0:position.position, 0:wybe.int, ?$left$x#0:wybe.int)
    foreign lpvm access(~tmp$6#0:position.position, 8:wybe.int, ?$left$y#0:wybe.int)
    foreign lpvm cast(~$right#0:position.position, ?tmp$8#0:wybe.int)
    foreign lpvm cast(~tmp$8#0:wybe.int, ?tmp$9#0:position.position)
    foreign lpvm access(tmp$9#0:position.position, 0:wybe.int, ?$right$x#0:wybe.int)
    foreign lpvm access(~tmp$9#0:position.position, 8:wybe.int, ?$right$y#0:wybe.int)
    foreign llvm icmp eq(~$left$x#0:wybe.int, ~$right$x#0:wybe.int, ?tmp$12#0:wybe.bool) @wybe:28:40
    case ~tmp$12#0:wybe.bool of
    0:
        foreign llvm move(0:wybe.bool, ?$$#0:wybe.bool)

    1:
        foreign llvm icmp eq(~$left$y#0:wybe.int, ~$right$y#0:wybe.int, ?tmp$15#0:wybe.bool) @wybe:28:40
        foreign llvm move(~tmp$15#0:wybe.bool, ?$$#0:wybe.bool)



position > public inline (0 calls)
0: position(x#0:wybe.int, y#0:wybe.int, ?$#0:position.position):
    foreign lpvm alloc(16:wybe.int, ?$rec#0:position.position)
    foreign lpvm mutate(~%$rec#0, ?%$rec#1, 0:wybe.int, ~x#0:wybe.int)
    foreign lpvm mutate(~%$rec#1, ?%$rec#2, 8:wybe.int, ~y#0:wybe.int)
    foreign lpvm cast(~$rec#2, ?$recint#0:wybe.int)
    foreign lpvm cast(~$recint#0, ?$#0:position.position)
position > public inline (4 calls)
1: position(?x#0:wybe.int, ?y#0:wybe.int, $#0:position.position):
    foreign lpvm cast(~$#0:position.position, ?tmp$0#0:wybe.int)
    foreign lpvm cast(~tmp$0#0:wybe.int, ?$stripped#0:position.position)
    foreign lpvm access($stripped#0, 0:wybe.int, ?x#0:wybe.int)
    foreign lpvm access(~$stripped#0, 8:wybe.int, ?y#0:wybe.int)


x > public inline (0 calls)
0: x($rec#0:position.position, ?$#0:wybe.int):
    foreign lpvm cast(~$rec#0:position.position, ?tmp$0#0:wybe.int)
    foreign lpvm cast(~tmp$0#0:wybe.int, ?$rec$stripped#0:position.position)
    foreign lpvm access(~$rec$stripped#0, 0:wybe.int, ?$#0:wybe.int)
x > public inline (0 calls)
1: x($rec#0:position.position, ?$rec#1:position.position, $field#0:wybe.int):
    foreign lpvm cast(~$rec#0:position.position, ?tmp$0#0:wybe.int)
    foreign lpvm cast(~tmp$0#0:wybe.int, ?$rec$stripped#0:position.position)
    foreign lpvm mutate(~$rec$stripped#0, 0:wybe.int, ~$field#0:wybe.int, ?$rec#1:position.position)


y > public inline (0 calls)
0: y($rec#0:position.position, ?$#0:wybe.int):
    foreign lpvm cast(~$rec#0:position.position, ?tmp$0#0:wybe.int)
    foreign lpvm cast(~tmp$0#0:wybe.int, ?$rec$stripped#0:position.position)
    foreign lpvm access(~$rec$stripped#0, 8:wybe.int, ?$#0:wybe.int)
y > public inline (0 calls)
1: y($rec#0:position.position, ?$rec#1:position.position, $field#0:wybe.int):
    foreign lpvm cast(~$rec#0:position.position, ?tmp$0#0:wybe.int)
    foreign lpvm cast(~tmp$0#0:wybe.int, ?$rec$stripped#0:position.position)
    foreign lpvm mutate(~$rec$stripped#0, 8:wybe.int, ~$field#0:wybe.int, ?$rec#1:position.position)
position, position.position
======================================================================
AFTER LLVM IR:

; ModuleID = 'position'
source_filename = "test-cases/position.wybe"

declare i8* @wybe_malloc(i32) local_unnamed_addr

; Function Attrs: norecurse nounwind readnone
define i64* @"position.position.=<0>"(i64* readnone returned %"in#0") local_unnamed_addr #0 {
entry:
  ret i64* %"in#0"
}

; Function Attrs: norecurse nounwind readnone
define i64* @"position.position.=<1>"(i64* readnone returned %"in#0") local_unnamed_addr #0 {
entry:
  ret i64* %"in#0"
}

; Function Attrs: norecurse nounwind readonly
define i1 @"position.position.=<1>.1"(i64* nocapture readonly %"$left#0", i64* nocapture readonly %"$right#0") local_unnamed_addr #1 {
entry:
  %0 = load i64, i64* %"$left#0", align 4
  %1 = load i64, i64* %"$right#0", align 4
  %"tmp$12#0" = icmp eq i64 %0, %1
  br i1 %"tmp$12#0", label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %2 = getelementptr i64, i64* %"$right#0", i64 1
  %3 = load i64, i64* %2, align 4
  %4 = getelementptr i64, i64* %"$left#0", i64 1
  %5 = load i64, i64* %4, align 4
  %"tmp$15#0" = icmp eq i64 %5, %3
  ret i1 %"tmp$15#0"

if.else:                                          ; preds = %entry
  ret i1 false
}

define i64* @"position.position.position<0>"(i64 %"x#0", i64 %"y#0") local_unnamed_addr {
entry:
  %0 = tail call i8* @wybe_malloc(i32 16)
  %1 = bitcast i8* %0 to i64*
  store i64 %"x#0", i64* %1, align 4
  %2 = getelementptr i8, i8* %0, i64 8
  %3 = bitcast i8* %2 to i64*
  store i64 %"y#0", i64* %3, align 4
  ret i64* %1
}

; Function Attrs: norecurse nounwind readonly
define { i64, i64 } @"position.position.position<1>"(i64* nocapture readonly %"$#0") local_unnamed_addr #1 {
entry:
  %0 = load i64, i64* %"$#0", align 4
  %1 = getelementptr i64, i64* %"$#0", i64 1
  %2 = load i64, i64* %1, align 4
  %3 = insertvalue { i64, i64 } undef, i64 %0, 0
  %4 = insertvalue { i64, i64 } %3, i64 %2, 1
  ret { i64, i64 } %4
}

; Function Attrs: norecurse nounwind readonly
define i64 @"position.position.x<0>"(i64* nocapture readonly %"$rec#0") local_unnamed_addr #1 {
entry:
  %0 = load i64, i64* %"$rec#0", align 4
  ret i64 %0
}

; Function Attrs: norecurse nounwind
define i64* @"position.position.x<1>"(i64* returned %"$rec#0", i64 %"$field#0") local_unnamed_addr #2 {
entry:
  store i64 %"$field#0", i64* %"$rec#0", align 4
  ret i64* %"$rec#0"
}

; Function Attrs: norecurse nounwind readonly
define i64 @"position.position.y<0>"(i64* nocapture readonly %"$rec#0") local_unnamed_addr #1 {
entry:
  %0 = getelementptr i64, i64* %"$rec#0", i64 1
  %1 = load i64, i64* %0, align 4
  ret i64 %1
}

; Function Attrs: norecurse nounwind
define i64* @"position.position.y<1>"(i64* returned %"$rec#0", i64 %"$field#0") local_unnamed_addr #2 {
entry:
  %0 = getelementptr i64, i64* %"$rec#0", i64 1
  store i64 %"$field#0", i64* %0, align 4
  ret i64* %"$rec#0"
}

attributes #0 = { norecurse nounwind readnone }
attributes #1 = { norecurse nounwind readonly }
attributes #2 = { norecurse nounwind }

--------------------------------------------------
; ModuleID = 'position.position'
source_filename = "test-cases"

declare i8* @wybe_malloc(i32) local_unnamed_addr

; Function Attrs: norecurse nounwind readnone
define i64* @"position.position.=<0>"(i64* readnone returned %"in#0") local_unnamed_addr #0 {
entry:
  ret i64* %"in#0"
}

; Function Attrs: norecurse nounwind readnone
define i64* @"position.position.=<1>"(i64* readnone returned %"in#0") local_unnamed_addr #0 {
entry:
  ret i64* %"in#0"
}

; Function Attrs: norecurse nounwind readonly
define i1 @"position.position.=<1>.1"(i64* nocapture readonly %"$left#0", i64* nocapture readonly %"$right#0") local_unnamed_addr #1 {
entry:
  %0 = load i64, i64* %"$left#0", align 4
  %1 = load i64, i64* %"$right#0", align 4
  %"tmp$12#0" = icmp eq i64 %0, %1
  br i1 %"tmp$12#0", label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %2 = getelementptr i64, i64* %"$right#0", i64 1
  %3 = load i64, i64* %2, align 4
  %4 = getelementptr i64, i64* %"$left#0", i64 1
  %5 = load i64, i64* %4, align 4
  %"tmp$15#0" = icmp eq i64 %5, %3
  ret i1 %"tmp$15#0"

if.else:                                          ; preds = %entry
  ret i1 false
}

define i64* @"position.position.position<0>"(i64 %"x#0", i64 %"y#0") local_unnamed_addr {
entry:
  %0 = tail call i8* @wybe_malloc(i32 16)
  %1 = bitcast i8* %0 to i64*
  store i64 %"x#0", i64* %1, align 4
  %2 = getelementptr i8, i8* %0, i64 8
  %3 = bitcast i8* %2 to i64*
  store i64 %"y#0", i64* %3, align 4
  ret i64* %1
}

; Function Attrs: norecurse nounwind readonly
define { i64, i64 } @"position.position.position<1>"(i64* nocapture readonly %"$#0") local_unnamed_addr #1 {
entry:
  %0 = load i64, i64* %"$#0", align 4
  %1 = getelementptr i64, i64* %"$#0", i64 1
  %2 = load i64, i64* %1, align 4
  %3 = insertvalue { i64, i64 } undef, i64 %0, 0
  %4 = insertvalue { i64, i64 } %3, i64 %2, 1
  ret { i64, i64 } %4
}

; Function Attrs: norecurse nounwind readonly
define i64 @"position.position.x<0>"(i64* nocapture readonly %"$rec#0") local_unnamed_addr #1 {
entry:
  %0 = load i64, i64* %"$rec#0", align 4
  ret i64 %0
}

; Function Attrs: norecurse nounwind
define i64* @"position.position.x<1>"(i64* returned %"$rec#0", i64 %"$field#0") local_unnamed_addr #2 {
entry:
  store i64 %"$field#0", i64* %"$rec#0", align 4
  ret i64* %"$rec#0"
}

; Function Attrs: norecurse nounwind readonly
define i64 @"position.position.y<0>"(i64* nocapture readonly %"$rec#0") local_unnamed_addr #1 {
entry:
  %0 = getelementptr i64, i64* %"$rec#0", i64 1
  %1 = load i64, i64* %0, align 4
  ret i64 %1
}

; Function Attrs: norecurse nounwind
define i64* @"position.position.y<1>"(i64* returned %"$rec#0", i64 %"$field#0") local_unnamed_addr #2 {
entry:
  %0 = getelementptr i64, i64* %"$rec#0", i64 1
  store i64 %"$field#0", i64* %0, align 4
  ret i64* %"$rec#0"
}

attributes #0 = { norecurse nounwind readnone }
attributes #1 = { norecurse nounwind readonly }
attributes #2 = { norecurse nounwind }

