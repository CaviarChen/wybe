======================================================================
AFTER EVERYTHING:
 Module position
  public submods  : 
  public types    : position: (position.position,"pointer")
  public resources: 
  public procs    : position.printPosition<0>
                    position.position.=<0>
                    position.position.position<0>
                    position.position.position<1>
                    position.position.x<0>
                    position.position.x<1>
                    position.position.y<0>
                    position.position.y<1>
  imports         : public use position.position
                    use wybe
  types           : position/0 (pointer)  @position:1:8
  resources       : 
  submodules      : position.position
  procs           : 

printPosition > public (0 calls)
0: printPosition(pos#0:position.position, io#0:phantom, ?io#5:phantom): AliasPairs: []
    foreign c print_string(" (":wybe.string, ~#io#0:phantom, ?#io#1:phantom) @wybe:nn:nn
    foreign lpvm access(pos#0:position.position, 0:wybe.int, ?tmp$0#0:wybe.int)
    foreign c print_int(~tmp$0#0:wybe.int, ~#io#1:phantom, ?#io#2:phantom) @wybe:nn:nn
    foreign c print_string(",":wybe.string, ~#io#2:phantom, ?#io#3:phantom) @wybe:nn:nn
    foreign lpvm access(~pos#0:position.position, 8:wybe.int, ?tmp$1#0:wybe.int)
    foreign c print_int(~tmp$1#0:wybe.int, ~#io#3:phantom, ?#io#4:phantom) @wybe:nn:nn
    foreign c print_string(")":wybe.string, ~#io#4:phantom, ?tmp$14#0:phantom) @wybe:nn:nn
    foreign c putchar('\n':wybe.char, ~tmp$14#0:phantom, ?#io#5:phantom) @wybe:nn:nn

  LLVM code       :

; ModuleID = 'position'


declare external ccc void @putchar(i8)

declare external ccc void @print_string(i8*)

declare external ccc void @print_int(i64)

@position.9 = constant [2 x i8] c")\00"

@position.5 = constant [2 x i8] c",\00"

@position.1 = constant [3 x i8] c" (\00"

declare external ccc i8* @wybe_malloc(i32)

declare external ccc void @llvm.memcpy.p0i8.p0i8.i32(i8*, i8*, i32, i1)

define external ccc void @"position.printPosition<0>"(i64* %"pos#0"){
entry:
  tail call ccc void @print_string(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @position.1, i32 0, i32 0))
  %2 = bitcast i64* %"pos#0" to i64*
  %3 = getelementptr i64, i64* %2, i64 0
  %4 = load i64, i64* %3
  tail call ccc void @print_int(i64 %4)
  tail call ccc void @print_string(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @position.5, i32 0, i32 0))
  %6 = bitcast i64* %"pos#0" to i64*
  %7 = getelementptr i64, i64* %6, i64 1
  %8 = load i64, i64* %7
  tail call ccc void @print_int(i64 %8)
  tail call ccc void @print_string(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @position.9, i32 0, i32 0))
  tail call ccc void @putchar(i8 10)
  ret void
}
--------------------------------------------------
 Module position.position([])
  public submods  : 
  public types    : 
  public resources: 
  public procs    : position.position.=<0>
                    position.position.position<0>
                    position.position.position<1>
                    position.position.x<0>
                    position.position.x<1>
                    position.position.y<0>
                    position.position.y<1>
  imports         : use position
                    use wybe
  types           : 
  resources       : 
  procs           : 

= > public inline test (3 calls)
0: =($left#0:position.position, $right#0:position.position, ?$$#0:wybe.bool): AliasPairs: []
    foreign lpvm access($left#0:position.position, 0:wybe.int, ?$left$x#0:wybe.int)
    foreign lpvm access(~$left#0:position.position, 8:wybe.int, ?$left$y#0:wybe.int)
    foreign lpvm access($right#0:position.position, 0:wybe.int, ?$right$x#0:wybe.int)
    foreign lpvm access(~$right#0:position.position, 8:wybe.int, ?$right$y#0:wybe.int)
    foreign llvm icmp eq(~$left$x#0:wybe.int, ~$right$x#0:wybe.int, ?tmp$2#0:wybe.bool) @wybe:nn:nn
    case ~tmp$2#0:wybe.bool of
    0:
        foreign llvm move(0:wybe.bool, ?$$#0:wybe.bool)

    1:
        foreign llvm icmp eq(~$left$y#0:wybe.int, ~$right$y#0:wybe.int, ?$$#0:wybe.bool) @wybe:nn:nn



position > public inline (0 calls)
0: position(x#0:wybe.int, y#0:wybe.int, ?$#0:position.position): AliasPairs: []
    foreign lpvm alloc(16:wybe.int, ?$rec#0:position.position)
    foreign lpvm mutate(~%$rec#0:position.position, ?%$rec#1:position.position, 16:wybe.int, 0:wybe.int, 1:wybe.int, ~x#0:wybe.int)
    foreign lpvm mutate(~%$rec#1:position.position, ?%$#0:position.position, 16:wybe.int, 8:wybe.int, 1:wybe.int, ~y#0:wybe.int)
position > public inline (4 calls)
1: position(?x#0:wybe.int, ?y#0:wybe.int, $#0:position.position): AliasPairs: []
    foreign lpvm access($#0:position.position, 0:wybe.int, ?x#0:wybe.int)
    foreign lpvm access(~$#0:position.position, 8:wybe.int, ?y#0:wybe.int)


x > public inline (0 calls)
0: x($rec#0:position.position, ?$#0:wybe.int): AliasPairs: []
    foreign lpvm access(~$rec#0:position.position, 0:wybe.int, ?$#0:wybe.int)
x > public inline (0 calls)
1: x($rec#0:position.position, ?$rec#1:position.position, $field#0:wybe.int): AliasPairs: []
    foreign lpvm mutate(~%$rec#0:position.position, ?%$rec#1:position.position, 16:wybe.int, 0:wybe.int, 0:wybe.int, ~$field#0:wybe.int)


y > public inline (0 calls)
0: y($rec#0:position.position, ?$#0:wybe.int): AliasPairs: []
    foreign lpvm access(~$rec#0:position.position, 8:wybe.int, ?$#0:wybe.int)
y > public inline (0 calls)
1: y($rec#0:position.position, ?$rec#1:position.position, $field#0:wybe.int): AliasPairs: []
    foreign lpvm mutate(~%$rec#0:position.position, ?%$rec#1:position.position, 16:wybe.int, 8:wybe.int, 0:wybe.int, ~$field#0:wybe.int)

  LLVM code       :

; ModuleID = 'position.position'


declare external ccc i8* @wybe_malloc(i32)

declare external ccc void @llvm.memcpy.p0i8.p0i8.i32(i8*, i8*, i32, i1)

define external ccc i1 @"position.position.=<0>"(i64* %"$left#0", i64* %"$right#0"){
entry:
  %1 = bitcast i64* %"$left#0" to i64*
  %2 = getelementptr i64, i64* %1, i64 0
  %3 = load i64, i64* %2
  %4 = bitcast i64* %"$left#0" to i64*
  %5 = getelementptr i64, i64* %4, i64 1
  %6 = load i64, i64* %5
  %7 = bitcast i64* %"$right#0" to i64*
  %8 = getelementptr i64, i64* %7, i64 0
  %9 = load i64, i64* %8
  %10 = bitcast i64* %"$right#0" to i64*
  %11 = getelementptr i64, i64* %10, i64 1
  %12 = load i64, i64* %11
  %"tmp$2#0" = icmp eq i64 %3, %9
  br i1 %"tmp$2#0", label %if.then, label %if.else
if.then:
  %"$$#0" = icmp eq i64 %6, %12
  ret i1 %"$$#0"
if.else:
  ret i1 0
}

define external ccc i64* @"position.position.position<0>"(i64 %"x#0", i64 %"y#0"){
entry:
  %13 = tail call ccc i8* @wybe_malloc(i32 16)
  %14 = bitcast i8* %13 to i64*
  %15 = bitcast i64* %14 to i64*
  %16 = getelementptr i64, i64* %15, i64 0
  store i64 %"x#0", i64* %16
  %17 = bitcast i64* %14 to i64*
  %18 = getelementptr i64, i64* %17, i64 1
  store i64 %"y#0", i64* %18
  ret i64* %14
}

define external ccc {i64, i64} @"position.position.position<1>"(i64* %"$#0"){
entry:
  %19 = bitcast i64* %"$#0" to i64*
  %20 = getelementptr i64, i64* %19, i64 0
  %21 = load i64, i64* %20
  %22 = bitcast i64* %"$#0" to i64*
  %23 = getelementptr i64, i64* %22, i64 1
  %24 = load i64, i64* %23
  %25 = insertvalue {i64, i64} undef, i64 %21, 0
  %26 = insertvalue {i64, i64} %25, i64 %24, 1
  ret {i64, i64} %26
}

define external ccc i64 @"position.position.x<0>"(i64* %"$rec#0"){
entry:
  %27 = bitcast i64* %"$rec#0" to i64*
  %28 = getelementptr i64, i64* %27, i64 0
  %29 = load i64, i64* %28
  ret i64 %29
}

define external ccc i64* @"position.position.x<1>"(i64* %"$rec#0", i64 %"$field#0"){
entry:
  %30 = tail call ccc i8* @wybe_malloc(i32 16)
  %31 = bitcast i8* %30 to i64*
  %32 = bitcast i64* %31 to i8*
  %33 = bitcast i64* %"$rec#0" to i8*
  tail call ccc void @llvm.memcpy.p0i8.p0i8.i32(i8* %32, i8* %33, i32 16, i1 0)
  %34 = bitcast i64* %31 to i64*
  %35 = getelementptr i64, i64* %34, i64 0
  store i64 %"$field#0", i64* %35
  ret i64* %31
}

define external ccc i64 @"position.position.y<0>"(i64* %"$rec#0"){
entry:
  %36 = bitcast i64* %"$rec#0" to i64*
  %37 = getelementptr i64, i64* %36, i64 1
  %38 = load i64, i64* %37
  ret i64 %38
}

define external ccc i64* @"position.position.y<1>"(i64* %"$rec#0", i64 %"$field#0"){
entry:
  %39 = tail call ccc i8* @wybe_malloc(i32 16)
  %40 = bitcast i8* %39 to i64*
  %41 = bitcast i64* %40 to i8*
  %42 = bitcast i64* %"$rec#0" to i8*
  tail call ccc void @llvm.memcpy.p0i8.p0i8.i32(i8* %41, i8* %42, i32 16, i1 0)
  %43 = bitcast i64* %40 to i64*
  %44 = getelementptr i64, i64* %43, i64 1
  store i64 %"$field#0", i64* %44
  ret i64* %40
}
