======================================================================
AFTER EVERYTHING:
 Module proc_yorn
  public submods  : 
  public types    : 
  public resources: 
  public procs    : proc_yorn.yorn<0>
  imports         : use wybe
  types           : 
  resources       : 
  procs           : 

gen$1 > (0 calls) (inline)
0: gen$1(tmp$2#0:wybe.bool, wybe.io$io#0:wybe.phantom, [?tmp$2#0:wybe.bool], [?wybe.io$io#0:wybe.phantom]):


gen$2 > (3 calls)
0: gen$2(prompt#0:wybe.string, wybe.io$io#0:wybe.phantom, ?tmp$2#0:wybe.bool, ?wybe.io$io#4:wybe.phantom):
    foreign c print_string(prompt#0:wybe.string, ~#wybe.io$io#0:wybe.phantom, ?#wybe.io$io#1:wybe.phantom) @wybe:116:41
    foreign c print_string(" (y/n) ":wybe.string, ~#wybe.io$io#1:wybe.phantom, ?#wybe.io$io#2:wybe.phantom) @wybe:116:41
    foreign c read_char(?response#0:wybe.char, ~#wybe.io$io#2:wybe.phantom, ?#wybe.io$io#3:wybe.phantom) @wybe:114:39
    proc_yorn.is_yes<0>(response#0:wybe.char, ?tmp$0#0:wybe.bool) @proc_yorn:5:22
    proc_yorn.gen$3<0>(~prompt#0:wybe.string, ~response#0:wybe.char, ~tmp$0#0:wybe.bool, ~tmp$0#0:wybe.bool, ~wybe.io$io#3:wybe.phantom, ?prompt#1:wybe.string, ?response#1:wybe.char, ?result#1:wybe.bool, ?tmp$0#1:wybe.bool, ?wybe.io$io#4:wybe.phantom) @proc_yorn:6:12


gen$3 > (1 calls)
0: gen$3(prompt#0:wybe.string, response#0:wybe.char, result#0:wybe.bool, tmp$0#0:wybe.bool, wybe.io$io#0:wybe.phantom, ?prompt#1:wybe.string, ?response#1:wybe.char, ?result#1:wybe.bool, ?tmp$0#1:wybe.bool, ?wybe.io$io#1:wybe.phantom):
    proc_yorn.is_yes_or_no<0>(response#0:wybe.char, ?tmp$1#0:wybe.bool) @proc_yorn:6:19
    case ~tmp$1#0:wybe.bool of
    0:
        proc_yorn.gen$2<0>(prompt#0:wybe.string, ~wybe.io$io#0:wybe.phantom, ?tmp$2#0:wybe.bool, ?wybe.io$io#1:wybe.phantom) @proc_yorn:2:8
        foreign llvm move(~prompt#0:wybe.string, ?prompt#1:wybe.string)
        foreign llvm move(~response#0:wybe.char, ?response#1:wybe.char)
        foreign llvm move(~result#0:wybe.bool, ?result#1:wybe.bool)
        foreign llvm move(~tmp$0#0:wybe.bool, ?tmp$0#1:wybe.bool)

    1:
        foreign c print_string("Please answer 'yes' or 'no'.":wybe.string, ~wybe.io$io#0:wybe.phantom, ?tmp$8#0:wybe.phantom) @wybe:116:41
        foreign c putchar('\n':wybe.char, ~tmp$8#0:wybe.phantom, ?tmp$9#0:wybe.phantom) @wybe:102:28
        proc_yorn.gen$4<0>(~prompt#0:wybe.string, ~response#0:wybe.char, ~result#0:wybe.bool, ~tmp$0#0:wybe.bool, ~tmp$9#0:wybe.phantom, ?prompt#1:wybe.string, ?response#1:wybe.char, ?result#1:wybe.bool, ?tmp$0#1:wybe.bool, ?tmp$10#0:wybe.bool, ?wybe.io$io#1:wybe.phantom) @proc_yorn:8:12



gen$4 > (1 calls)
0: gen$4(prompt#0:wybe.string, response#0:wybe.char, result#0:wybe.bool, tmp$0#0:wybe.bool, wybe.io$io#0:wybe.phantom, ?prompt#1:wybe.string, ?response#1:wybe.char, ?result#1:wybe.bool, ?tmp$0#1:wybe.bool, ?tmp$2#0:wybe.bool, ?wybe.io$io#1:wybe.phantom):
    proc_yorn.is_yes_or_no<0>(response#0:wybe.char, ?tmp$2#0:wybe.bool) @proc_yorn:8:18
    case tmp$2#0:wybe.bool of
    0:
        foreign llvm move(prompt#0:wybe.string, ?prompt#1:wybe.string)
        foreign llvm move(~response#0:wybe.char, ?response#1:wybe.char)
        foreign llvm move(~result#0:wybe.bool, ?result#1:wybe.bool)
        foreign llvm move(~tmp$0#0:wybe.bool, ?tmp$0#1:wybe.bool)
        proc_yorn.gen$2<0>(~prompt#0:wybe.string, ~wybe.io$io#0:wybe.phantom, ?tmp$2#0:wybe.bool, ?wybe.io$io#1:wybe.phantom) @proc_yorn:2:8

    1:
        foreign llvm move(~prompt#0:wybe.string, ?prompt#1:wybe.string)
        foreign llvm move(~response#0:wybe.char, ?response#1:wybe.char)
        foreign llvm move(~result#0:wybe.bool, ?result#1:wybe.bool)
        foreign llvm move(~tmp$0#0:wybe.bool, ?tmp$0#1:wybe.bool)
        foreign llvm move(~wybe.io$io#0:wybe.phantom, ?wybe.io$io#1:wybe.phantom)



gen$5 > (1 calls) (inline)
0: gen$5(prompt#0:wybe.string, response#0:wybe.char, result#0:wybe.bool, tmp$0#0:wybe.bool, wybe.io$io#0:wybe.phantom, [?prompt#0:wybe.string], [?response#0:wybe.char], [?result#0:wybe.bool], [?tmp$0#0:wybe.bool], ?tmp$2#0:wybe.bool, ?wybe.io$io#1:wybe.phantom):
    proc_yorn.gen$2<0>(prompt#0:wybe.string, ~wybe.io$io#0:wybe.phantom, ?tmp$2#0:wybe.bool, ?wybe.io$io#1:wybe.phantom) @proc_yorn:2:8


gen$6 > (1 calls) (inline)
0: gen$6(prompt#0:wybe.string, response#0:wybe.char, result#0:wybe.bool, tmp$0#0:wybe.bool, wybe.io$io#0:wybe.phantom, ?prompt#1:wybe.string, ?response#1:wybe.char, ?result#1:wybe.bool, ?tmp$0#1:wybe.bool, ?wybe.io$io#2:wybe.phantom):
    foreign c print_string("Please answer 'yes' or 'no'.":wybe.string, ~#wybe.io$io#0:wybe.phantom, ?tmp$5#0:wybe.phantom) @wybe:116:41
    foreign c putchar('\n':wybe.char, ~tmp$5#0:wybe.phantom, ?#wybe.io$io#1:wybe.phantom) @wybe:102:28
    proc_yorn.gen$4<0>(~prompt#0:wybe.string, ~response#0:wybe.char, ~result#0:wybe.bool, ~tmp$0#0:wybe.bool, ~wybe.io$io#1:wybe.phantom, ?prompt#1:wybe.string, ?response#1:wybe.char, ?result#1:wybe.bool, ?tmp$0#1:wybe.bool, ?tmp$2#0:wybe.bool, ?wybe.io$io#2:wybe.phantom) @proc_yorn:8:12


is_yes > (2 calls)
0: is_yes(ch#0:wybe.char, ?$#0:wybe.bool):
    foreign llvm icmp eq(ch#0:wybe.char, 'y':wybe.char, ?tmp$5#0:wybe.bool) @wybe:68:42
    wybe.bool.=<0>(?tmp$1#0:wybe.bool, ~tmp$5#0:wybe.bool) @wybe:68:12
    foreign llvm icmp eq(~ch#0:wybe.char, 'Y':wybe.char, ?tmp$8#0:wybe.bool) @wybe:68:42
    wybe.bool.=<0>(?tmp$2#0:wybe.bool, ~tmp$8#0:wybe.bool) @wybe:68:12
    foreign llvm or(~tmp$1#0:wybe.bool, ~tmp$2#0:wybe.bool, ?tmp$11#0:wybe.bool) @wybe:52:43
    foreign llvm move(~tmp$11#0:wybe.bool, ?$#0:wybe.bool)


is_yes_or_no > (6 calls)
0: is_yes_or_no(ch#0:wybe.char, ?$#0:wybe.bool):
    proc_yorn.is_yes<0>(ch#0:wybe.char, ?tmp$2#0:wybe.bool) @proc_yorn:13:25
    foreign llvm icmp eq(ch#0:wybe.char, 'n':wybe.char, ?tmp$7#0:wybe.bool) @wybe:68:42
    wybe.bool.=<0>(?tmp$3#0:wybe.bool, ~tmp$7#0:wybe.bool) @wybe:68:12
    foreign llvm or(~tmp$2#0:wybe.bool, ~tmp$3#0:wybe.bool, ?tmp$10#0:wybe.bool) @wybe:52:43
    foreign llvm icmp eq(~ch#0:wybe.char, 'N':wybe.char, ?tmp$13#0:wybe.bool) @wybe:68:42
    wybe.bool.=<0>(?tmp$4#0:wybe.bool, ~tmp$13#0:wybe.bool) @wybe:68:12
    foreign llvm or(~tmp$10#0:wybe.bool, ~tmp$4#0:wybe.bool, ?tmp$16#0:wybe.bool) @wybe:52:43
    foreign llvm move(~tmp$16#0:wybe.bool, ?$#0:wybe.bool)


yorn > public (0 calls) (inline)
0: yorn(prompt#0:wybe.string, ?result#0:wybe.bool, wybe.io$io#0:wybe.phantom, ?wybe.io$io#1:wybe.phantom):
    proc_yorn.gen$2<0>(~prompt#0:wybe.string, ~wybe.io$io#0:wybe.phantom, ?tmp$2#0:wybe.bool, ?wybe.io$io#1:wybe.phantom) @proc_yorn:2:8
proc_yorn
======================================================================
AFTER LLVM IR:

; ModuleID = 'proc_yorn'

@0 = constant [8 x i8] c" (y/n) \00"
@1 = constant [29 x i8] c"Please answer 'yes' or 'no'.\00"

declare i8 @read_char()

declare void @print_string(i8*)

declare void @putchar(i8)

declare i1 @"wybe.bool.=<0>"(i1)

declare i8* @wybe_malloc(i32)

define i1 @"proc_yorn.gen$2<0>"(i8* %"prompt#0") {
entry:
  tail call void @print_string(i8* %"prompt#0")
  tail call void @print_string(i8* getelementptr inbounds ([8 x i8]* @0, i32 0, i32 0))
  %"response#0" = tail call i8 @read_char()
  %"tmp$0#0" = tail call i1 @"proc_yorn.is_yes<0>"(i8 %"response#0")
  %0 = tail call { i8*, i8, i1, i1 } @"proc_yorn.gen$3<0>"(i8* %"prompt#0", i8 %"response#0", i1 %"tmp$0#0", i1 %"tmp$0#0")
  %1 = extractvalue { i8*, i8, i1, i1 } %0, 0
  %2 = extractvalue { i8*, i8, i1, i1 } %0, 1
  %3 = extractvalue { i8*, i8, i1, i1 } %0, 2
  %4 = extractvalue { i8*, i8, i1, i1 } %0, 3
  ret void
}

define { i8*, i8, i1, i1 } @"proc_yorn.gen$3<0>"(i8* %"prompt#0", i8 %"response#0", i1 %"result#0", i1 %"tmp$0#0") {
entry:
  %"tmp$1#0" = tail call i1 @"proc_yorn.is_yes_or_no<0>"(i8 %"response#0")
  br i1 %"tmp$1#0", label %if.then, label %if.else

if.then:                                          ; preds = %entry
  tail call void @print_string(i8* getelementptr inbounds ([29 x i8]* @1, i32 0, i32 0))
  tail call void @putchar(i8 10)
  %0 = tail call { i8*, i8, i1, i1, i1 } @"proc_yorn.gen$4<0>"(i8* %"prompt#0", i8 %"response#0", i1 %"result#0", i1 %"tmp$0#0")
  %1 = extractvalue { i8*, i8, i1, i1, i1 } %0, 0
  %2 = extractvalue { i8*, i8, i1, i1, i1 } %0, 1
  %3 = extractvalue { i8*, i8, i1, i1, i1 } %0, 2
  %4 = extractvalue { i8*, i8, i1, i1, i1 } %0, 3
  %5 = extractvalue { i8*, i8, i1, i1, i1 } %0, 4
  ret i1 %5

if.else:                                          ; preds = %entry
  %"tmp$2#0" = tail call i1 @"proc_yorn.gen$2<0>"(i8* %"prompt#0")
  ret i1 %"tmp$0#0"
}

define { i8*, i8, i1, i1, i1 } @"proc_yorn.gen$4<0>"(i8* %"prompt#0", i8 %"response#0", i1 %"result#0", i1 %"tmp$0#0") {
entry:
  %"tmp$2#0" = tail call i1 @"proc_yorn.is_yes_or_no<0>"(i8 %"response#0")
  br i1 %"tmp$2#0", label %if.then, label %if.else

if.then:                                          ; preds = %entry
  ret i1 %"tmp$2#0"

if.else:                                          ; preds = %entry
  %"tmp$2#01" = tail call i1 @"proc_yorn.gen$2<0>"(i8* %"prompt#0")
  ret i1 %"tmp$2#01"
}

define i1 @"proc_yorn.gen$5<0>"(i8* %"prompt#0", i8 %"response#0", i1 %"result#0", i1 %"tmp$0#0") {
entry:
  %"tmp$2#0" = tail call i1 @"proc_yorn.gen$2<0>"(i8* %"prompt#0")
  ret i1 %"tmp$2#0"
}

define { i8*, i8, i1, i1 } @"proc_yorn.gen$6<0>"(i8* %"prompt#0", i8 %"response#0", i1 %"result#0", i1 %"tmp$0#0") {
entry:
  tail call void @print_string(i8* getelementptr inbounds ([29 x i8]* @1, i32 0, i32 0))
  tail call void @putchar(i8 10)
  %0 = tail call { i8*, i8, i1, i1, i1 } @"proc_yorn.gen$4<0>"(i8* %"prompt#0", i8 %"response#0", i1 %"result#0", i1 %"tmp$0#0")
  %1 = extractvalue { i8*, i8, i1, i1, i1 } %0, 0
  %2 = extractvalue { i8*, i8, i1, i1, i1 } %0, 1
  %3 = extractvalue { i8*, i8, i1, i1, i1 } %0, 2
  %4 = extractvalue { i8*, i8, i1, i1, i1 } %0, 3
  %5 = extractvalue { i8*, i8, i1, i1, i1 } %0, 4
  %6 = insertvalue { i8*, i8, i1, i1 } undef, i8* %1, 0
  %7 = insertvalue { i8*, i8, i1, i1 } %6, i8 %2, 1
  %8 = insertvalue { i8*, i8, i1, i1 } %7, i1 %3, 2
  %9 = insertvalue { i8*, i8, i1, i1 } %8, i1 %4, 3
  ret { i8*, i8, i1, i1 } %9
}

define i1 @"proc_yorn.is_yes<0>"(i8 %"ch#0") {
entry:
  %"tmp$5#0" = icmp eq i8 %"ch#0", 121
  %"tmp$1#0" = tail call i1 @"wybe.bool.=<0>"(i1 %"tmp$5#0")
  %"tmp$8#0" = icmp eq i8 %"ch#0", 89
  %"tmp$2#0" = tail call i1 @"wybe.bool.=<0>"(i1 %"tmp$8#0")
  %"tmp$11#0" = or i1 %"tmp$1#0", %"tmp$2#0"
  ret i1 %"tmp$11#0"
}

define i1 @"proc_yorn.is_yes_or_no<0>"(i8 %"ch#0") {
entry:
  %"tmp$2#0" = tail call i1 @"proc_yorn.is_yes<0>"(i8 %"ch#0")
  %"tmp$7#0" = icmp eq i8 %"ch#0", 110
  %"tmp$3#0" = tail call i1 @"wybe.bool.=<0>"(i1 %"tmp$7#0")
  %"tmp$10#0" = or i1 %"tmp$2#0", %"tmp$3#0"
  %"tmp$13#0" = icmp eq i8 %"ch#0", 78
  %"tmp$4#0" = tail call i1 @"wybe.bool.=<0>"(i1 %"tmp$13#0")
  %"tmp$16#0" = or i1 %"tmp$10#0", %"tmp$4#0"
  ret i1 %"tmp$16#0"
}

define i1 @"proc_yorn.yorn<0>"(i8* %"prompt#0") {
entry:
  %"tmp$2#0" = tail call i1 @"proc_yorn.gen$2<0>"(i8* %"prompt#0")
  ret void
}

