======================================================================
AFTER EVERYTHING:
 Module proc_yorn
  public submods  : 
  public types    : 
  public resources: 
  public procs    : proc_yorn.<0>
                    proc_yorn.yorn<0>
  imports         : use wybe
  types           : 
  resources       : 
  procs           : 

*main* > public inline (0 calls)
0: (wybe.io$io#0:wybe.phantom, ?wybe.io$io#2:wybe.phantom):
    proc_yorn.gen$1<0>("What's your input?":wybe.string, ~#wybe.io$io#0:wybe.phantom, ?tmp$0#0:wybe.bool, ?#wybe.io$io#1:wybe.phantom) @proc_yorn:2:8
    foreign llvm move(~#wybe.io$io#1:wybe.phantom, ?#wybe.io$io#2:wybe.phantom) @proc_yorn:15:1


gen$1 > (2 calls)
0: gen$1(prompt#0:wybe.string, wybe.io$io#0:wybe.phantom, ?result#1:wybe.bool, ?wybe.io$io#5:wybe.phantom):
    foreign c print_string(prompt#0:wybe.string, ~#wybe.io$io#0:wybe.phantom, ?#wybe.io$io#1:wybe.phantom) @wybe:88:41
    foreign c print_string(" (y/n) ":wybe.string, ~#wybe.io$io#1:wybe.phantom, ?#wybe.io$io#2:wybe.phantom) @wybe:88:41
    foreign c read_char(?response#0:wybe.char, ~#wybe.io$io#2:wybe.phantom, ?#wybe.io$io#3:wybe.phantom) @wybe:86:39
    foreign llvm icmp eq(response#0:wybe.char, 'y':wybe.char, ?tmp$9#0:wybe.bool) @wybe:67:42
    foreign llvm icmp eq(response#0:wybe.char, 'Y':wybe.char, ?tmp$10#0:wybe.bool) @wybe:67:42
    foreign llvm or(~tmp$10#0:wybe.bool, ~tmp$9#0:wybe.bool, ?tmp$11#0:wybe.bool) @wybe:5:43
    proc_yorn.is_yes_or_no<0>(~response#0:wybe.char, ?tmp$2#0:wybe.bool) @proc_yorn:6:18
    case ~tmp$2#0:wybe.bool of
    0:
        foreign c print_string("Please answer 'yes' or 'no'.":wybe.string, ~#wybe.io$io#3:wybe.phantom, ?tmp$15#0:wybe.phantom) @wybe:88:41
        foreign c putchar('\n':wybe.char, ~tmp$15#0:wybe.phantom, ?#wybe.io$io#4:wybe.phantom) @wybe:74:28
        proc_yorn.gen$1<0>(~prompt#0:wybe.string, ~wybe.io$io#4:wybe.phantom, ?result#1:wybe.bool, ?wybe.io$io#5:wybe.phantom) @proc_yorn:2:8

    1:
        foreign llvm move(~tmp$11#0:wybe.bool, ?result#1:wybe.bool)
        foreign llvm move(~wybe.io$io#3:wybe.phantom, ?wybe.io$io#5:wybe.phantom)



gen$2 > inline (1 calls)
0: gen$2([prompt#0:wybe.string], [response#0:wybe.char], result#0:wybe.bool, [tmp$0#0:wybe.bool], wybe.io$io#0:wybe.phantom, [?result#0:wybe.bool], [?wybe.io$io#0:wybe.phantom]):


is_yes > inline (4 calls)
0: is_yes(ch#0:wybe.char, ?$#0:wybe.bool):
    foreign llvm icmp eq(ch#0:wybe.char, 'y':wybe.char, ?tmp$5#0:wybe.bool) @wybe:67:42
    foreign llvm icmp eq(~ch#0:wybe.char, 'Y':wybe.char, ?tmp$8#0:wybe.bool) @wybe:67:42
    foreign llvm or(~tmp$5#0:wybe.bool, ~tmp$8#0:wybe.bool, ?tmp$11#0:wybe.bool) @wybe:5:43
    foreign llvm move(~tmp$11#0:wybe.bool, ?$#0:wybe.bool) @proc_yorn:11:1


is_yes_or_no > (3 calls)
0: is_yes_or_no(ch#0:wybe.char, ?$#0:wybe.bool):
    foreign llvm icmp eq(ch#0:wybe.char, 'y':wybe.char, ?tmp$6#0:wybe.bool) @wybe:67:42
    foreign llvm icmp eq(ch#0:wybe.char, 'Y':wybe.char, ?tmp$7#0:wybe.bool) @wybe:67:42
    foreign llvm or(~tmp$6#0:wybe.bool, ~tmp$7#0:wybe.bool, ?tmp$8#0:wybe.bool) @wybe:5:43
    foreign llvm icmp eq(ch#0:wybe.char, 'n':wybe.char, ?tmp$11#0:wybe.bool) @wybe:67:42
    foreign llvm or(~tmp$11#0:wybe.bool, ~tmp$8#0:wybe.bool, ?tmp$14#0:wybe.bool) @wybe:5:43
    foreign llvm icmp eq(~ch#0:wybe.char, 'N':wybe.char, ?tmp$17#0:wybe.bool) @wybe:67:42
    foreign llvm or(~tmp$14#0:wybe.bool, ~tmp$17#0:wybe.bool, ?tmp$20#0:wybe.bool) @wybe:5:43
    foreign llvm move(~tmp$20#0:wybe.bool, ?$#0:wybe.bool) @proc_yorn:12:1


yorn > public inline (1 calls)
0: yorn(prompt#0:wybe.string, ?result#0:wybe.bool, wybe.io$io#0:wybe.phantom, ?wybe.io$io#1:wybe.phantom):
    proc_yorn.gen$1<0>(~prompt#0:wybe.string, ~wybe.io$io#0:wybe.phantom, ?result#0:wybe.bool, ?wybe.io$io#1:wybe.phantom) @proc_yorn:2:8
proc_yorn
======================================================================
AFTER LLVM IR:

; ModuleID = 'proc_yorn'
source_filename = "test-cases/proc_yorn.wybe"

@proc_yorn.1 = constant [19 x i8] c"What's your input?\00"
@proc_yorn.4 = constant [29 x i8] c"Please answer 'yes' or 'no'.\00"
@proc_yorn.3 = constant [8 x i8] c" (y/n) \00"

declare void @putchar(i8) local_unnamed_addr

declare void @print_string(i8*) local_unnamed_addr

declare i8 @read_char() local_unnamed_addr

define i32 @proc_yorn.main() local_unnamed_addr {
entry:
  %"tmp$0#0" = tail call i1 @"proc_yorn.gen$1<0>"(i8* getelementptr inbounds ([19 x i8], [19 x i8]* @proc_yorn.1, i64 0, i64 0))
  ret i32 0
}

define i1 @"proc_yorn.gen$1<0>"(i8* %"prompt#0") local_unnamed_addr {
entry:
  tail call void @print_string(i8* %"prompt#0")
  tail call void @print_string(i8* getelementptr inbounds ([8 x i8], [8 x i8]* @proc_yorn.3, i64 0, i64 0))
  %"response#01" = tail call i8 @read_char()
  %"tmp$2#02" = tail call i1 @"proc_yorn.is_yes_or_no<0>"(i8 %"response#01")
  br i1 %"tmp$2#02", label %if.then, label %if.else.preheader

if.else.preheader:                                ; preds = %entry
  br label %if.else

if.then:                                          ; preds = %if.else, %entry
  %"response#0.lcssa" = phi i8 [ %"response#01", %entry ], [ %"response#0", %if.else ]
  %0 = or i8 %"response#0.lcssa", 32
  %1 = icmp eq i8 %0, 121
  ret i1 %1

if.else:                                          ; preds = %if.else.preheader, %if.else
  tail call void @print_string(i8* getelementptr inbounds ([29 x i8], [29 x i8]* @proc_yorn.4, i64 0, i64 0))
  tail call void @putchar(i8 10)
  tail call void @print_string(i8* %"prompt#0")
  tail call void @print_string(i8* getelementptr inbounds ([8 x i8], [8 x i8]* @proc_yorn.3, i64 0, i64 0))
  %"response#0" = tail call i8 @read_char()
  %"tmp$2#0" = tail call i1 @"proc_yorn.is_yes_or_no<0>"(i8 %"response#0")
  br i1 %"tmp$2#0", label %if.then, label %if.else
}

; Function Attrs: norecurse nounwind readnone
define i1 @"proc_yorn.is_yes<0>"(i8 %"ch#0") local_unnamed_addr #0 {
entry:
  %0 = or i8 %"ch#0", 32
  %1 = icmp eq i8 %0, 121
  ret i1 %1
}

; Function Attrs: norecurse nounwind readnone
define i1 @"proc_yorn.is_yes_or_no<0>"(i8 %"ch#0") local_unnamed_addr #0 {
entry:
  %0 = or i8 %"ch#0", 32
  %1 = icmp eq i8 %0, 121
  %2 = icmp eq i8 %0, 110
  %3 = or i1 %2, %1
  ret i1 %3
}

define i1 @"proc_yorn.yorn<0>"(i8* %"prompt#0") local_unnamed_addr {
entry:
  %"result#0" = tail call i1 @"proc_yorn.gen$1<0>"(i8* %"prompt#0")
  ret i1 %"result#0"
}

attributes #0 = { norecurse nounwind readnone }

