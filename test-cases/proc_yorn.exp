======================================================================
AFTER EVERYTHING:
 Module proc_yorn
  public submods  : 
  public types    : 
  public resources: 
  public procs    : proc_yorn.<0>
                    proc_yorn.yorn<0>
  imports         : use wybe
  types           : 
  resources       : 
  procs           : 

*main* > public (0 calls)
0: (wybe.io$io#0:wybe.phantom, ?wybe.io$io#2:wybe.phantom):
    proc_yorn.gen$1<0>("Well, yes or no?":wybe.string, ~#wybe.io$io#0:wybe.phantom, ?r#0:wybe.bool, ?#wybe.io$io#1:wybe.phantom) @proc_yorn:2:8
    wybe.io.print<4>(~r#0:wybe.bool, ~#wybe.io$io#1:wybe.phantom, ?tmp$4#0:wybe.phantom) @wybe:100:42
    foreign c putchar('\n':wybe.char, ~tmp$4#0:wybe.phantom, ?#wybe.io$io#2:wybe.phantom) @wybe:79:28


gen$1 > (2 calls)
0: gen$1(prompt#0:wybe.string, wybe.io$io#0:wybe.phantom, ?result#1:wybe.bool, ?wybe.io$io#5:wybe.phantom):
    foreign c print_string(prompt#0:wybe.string, ~#wybe.io$io#0:wybe.phantom, ?#wybe.io$io#1:wybe.phantom) @wybe:93:41
    foreign c print_string(" (y/n) ":wybe.string, ~#wybe.io$io#1:wybe.phantom, ?#wybe.io$io#2:wybe.phantom) @wybe:93:41
    foreign c read_char(?response#0:wybe.char, ~#wybe.io$io#2:wybe.phantom, ?#wybe.io$io#3:wybe.phantom) @wybe:91:39
    foreign llvm icmp eq(response#0:wybe.char, 'y':wybe.char, ?tmp$13#0:wybe.bool) @wybe:72:42
    foreign llvm icmp eq(response#0:wybe.char, 'Y':wybe.char, ?tmp$14#0:wybe.bool) @wybe:72:42
    foreign llvm or(~tmp$14#0:wybe.bool, ~tmp$13#0:wybe.bool, ?tmp$0#0:wybe.bool) @wybe:6:43
    foreign llvm icmp eq(response#0:wybe.char, 'n':wybe.char, ?tmp$16#0:wybe.bool) @wybe:72:42
    foreign llvm or(tmp$0#0:wybe.bool, ~tmp$16#0:wybe.bool, ?tmp$17#0:wybe.bool) @wybe:6:43
    foreign llvm icmp eq(~response#0:wybe.char, 'N':wybe.char, ?tmp$18#0:wybe.bool) @wybe:72:42
    foreign llvm or(~tmp$17#0:wybe.bool, ~tmp$18#0:wybe.bool, ?tmp$2#0:wybe.bool) @wybe:6:43
    case ~tmp$2#0:wybe.bool of
    0:
        foreign c print_string("Please answer 'yes' or 'no'.":wybe.string, ~#wybe.io$io#3:wybe.phantom, ?tmp$21#0:wybe.phantom) @wybe:93:41
        foreign c putchar('\n':wybe.char, ~tmp$21#0:wybe.phantom, ?#wybe.io$io#4:wybe.phantom) @wybe:79:28
        proc_yorn.gen$1<0>(~prompt#0:wybe.string, ~wybe.io$io#4:wybe.phantom, ?result#1:wybe.bool, ?wybe.io$io#5:wybe.phantom) @proc_yorn:2:8

    1:
        foreign llvm move(~tmp$0#0:wybe.bool, ?result#1:wybe.bool)
        foreign llvm move(~wybe.io$io#3:wybe.phantom, ?wybe.io$io#5:wybe.phantom)



gen$2 > inline (1 calls)
0: gen$2([prompt#0:wybe.string], [response#0:wybe.char], result#0:wybe.bool, [tmp$0#0:wybe.bool], wybe.io$io#0:wybe.phantom, [?result#0:wybe.bool], [?wybe.io$io#0:wybe.phantom]):


is_yes > inline (4 calls)
0: is_yes(ch#0:wybe.char, ?$#0:wybe.bool):
    foreign llvm icmp eq(ch#0:wybe.char, 'y':wybe.char, ?tmp$1#0:wybe.bool) @wybe:72:42
    foreign llvm icmp eq(~ch#0:wybe.char, 'Y':wybe.char, ?tmp$2#0:wybe.bool) @wybe:72:42
    foreign llvm or(~tmp$1#0:wybe.bool, ~tmp$2#0:wybe.bool, ?$#0:wybe.bool) @wybe:6:43


is_yes_or_no > inline (3 calls)
0: is_yes_or_no(ch#0:wybe.char, ?$#0:wybe.bool):
    foreign llvm icmp eq(ch#0:wybe.char, 'y':wybe.char, ?tmp$6#0:wybe.bool) @wybe:72:42
    foreign llvm icmp eq(ch#0:wybe.char, 'Y':wybe.char, ?tmp$7#0:wybe.bool) @wybe:72:42
    foreign llvm or(~tmp$6#0:wybe.bool, ~tmp$7#0:wybe.bool, ?tmp$2#0:wybe.bool) @wybe:6:43
    foreign llvm icmp eq(ch#0:wybe.char, 'n':wybe.char, ?tmp$3#0:wybe.bool) @wybe:72:42
    foreign llvm or(~tmp$2#0:wybe.bool, ~tmp$3#0:wybe.bool, ?tmp$1#0:wybe.bool) @wybe:6:43
    foreign llvm icmp eq(~ch#0:wybe.char, 'N':wybe.char, ?tmp$4#0:wybe.bool) @wybe:72:42
    foreign llvm or(~tmp$1#0:wybe.bool, ~tmp$4#0:wybe.bool, ?$#0:wybe.bool) @wybe:6:43


yorn > public inline (1 calls)
0: yorn(prompt#0:wybe.string, ?result#0:wybe.bool, wybe.io$io#0:wybe.phantom, ?wybe.io$io#1:wybe.phantom):
    proc_yorn.gen$1<0>(~prompt#0:wybe.string, ~wybe.io$io#0:wybe.phantom, ?result#0:wybe.bool, ?wybe.io$io#1:wybe.phantom) @proc_yorn:2:8
  LLVM code       :

; ModuleID = 'proc_yorn'


declare external ccc void @putchar(i8)

declare external ccc void @"wybe.io.print<4>"(i1)

@proc_yorn.1 = constant [17 x i8] c"Well, yes or no?\00"

declare external ccc void @print_string(i8*)

declare external ccc i8 @read_char()

@proc_yorn.4 = constant [29 x i8] c"Please answer 'yes' or 'no'.\00"

@proc_yorn.3 = constant [8 x i8] c" (y/n) \00"

declare external ccc i8* @wybe_malloc(i32)

define external ccc i32 @proc_yorn.main(){
entry:
  %"r#0" = tail call ccc i1 @"proc_yorn.gen$1<0>"(i8* getelementptr inbounds ([17 x i8], [17 x i8]* @proc_yorn.1, i32 0, i32 0))
  tail call ccc void @"wybe.io.print<4>"(i1 %"r#0")
  tail call ccc void @putchar(i8 10)
  %2 = alloca i32
  store i32 0, i32* %2
  ret i32 0
}

define external ccc i1 @"proc_yorn.gen$1<0>"(i8* %"prompt#0"){
entry:
  tail call ccc void @print_string(i8* %"prompt#0")
  tail call ccc void @print_string(i8* getelementptr inbounds ([8 x i8], [8 x i8]* @proc_yorn.3, i32 0, i32 0))
  %"response#0" = tail call ccc i8 @read_char()
  %"tmp$13#0" = icmp eq i8 %"response#0", 121
  %"tmp$14#0" = icmp eq i8 %"response#0", 89
  %"tmp$0#0" = or i1 %"tmp$14#0", %"tmp$13#0"
  %"tmp$16#0" = icmp eq i8 %"response#0", 110
  %"tmp$17#0" = or i1 %"tmp$0#0", %"tmp$16#0"
  %"tmp$18#0" = icmp eq i8 %"response#0", 78
  %"tmp$2#0" = or i1 %"tmp$17#0", %"tmp$18#0"
  br i1 %"tmp$2#0", label %if.then, label %if.else
if.then:
  ret i1 %"tmp$0#0"
if.else:
  tail call ccc void @print_string(i8* getelementptr inbounds ([29 x i8], [29 x i8]* @proc_yorn.4, i32 0, i32 0))
  tail call ccc void @putchar(i8 10)
  %"result#1" = tail call ccc i1 @"proc_yorn.gen$1<0>"(i8* %"prompt#0")
  ret i1 %"result#1"
}

define external ccc i1 @"proc_yorn.is_yes<0>"(i8 %"ch#0"){
entry:
  %"tmp$1#0" = icmp eq i8 %"ch#0", 121
  %"tmp$2#0" = icmp eq i8 %"ch#0", 89
  %"$#0" = or i1 %"tmp$1#0", %"tmp$2#0"
  ret i1 %"$#0"
}

define external ccc i1 @"proc_yorn.is_yes_or_no<0>"(i8 %"ch#0"){
entry:
  %"tmp$6#0" = icmp eq i8 %"ch#0", 121
  %"tmp$7#0" = icmp eq i8 %"ch#0", 89
  %"tmp$2#0" = or i1 %"tmp$6#0", %"tmp$7#0"
  %"tmp$3#0" = icmp eq i8 %"ch#0", 110
  %"tmp$1#0" = or i1 %"tmp$2#0", %"tmp$3#0"
  %"tmp$4#0" = icmp eq i8 %"ch#0", 78
  %"$#0" = or i1 %"tmp$1#0", %"tmp$4#0"
  ret i1 %"$#0"
}

define external ccc i1 @"proc_yorn.yorn<0>"(i8* %"prompt#0"){
entry:
  %"result#0" = tail call ccc i1 @"proc_yorn.gen$1<0>"(i8* %"prompt#0")
  ret i1 %"result#0"
}
