Call from position to = with 2 arguments, expected 2
 Module import
  public submods  : 
  public types    : 
  public resources: 
  public procs    : import.distance<0>
  imports         : import position 
                    import wybe 
  types           : 
  resources       : 
  procs           : distance:
public proc distance(p1:0:position, p2:0:position, ?~tmp$0:0:int)<0>  @import:3:8 (0 calls)
    position.position.x<0>(p2:0:position, ?~tmp$4:0:int) @import:4:17
    position.position.x<0>(p1:0:position, ?~tmp$5:0:int) @import:4:22
    foreign llvm sub(32:int, ~tmp$4:0:int, ~tmp$5:0:int, ?~tmp$3:0:int) @wybe:7:38
    wybe.int.=<0>(?~$:0:int, ~tmp$3:0:int)
    wybe.int.power<0>(~tmp$3:0:int, 2:int, ?~tmp$2:0:int) @import:4:10
    position.position.y<0>(p2:0:position, ?~tmp$8:0:int) @import:4:40
    position.position.y<0>(p1:0:position, ?~tmp$9:0:int) @import:4:45
    foreign llvm sub(32:int, ~tmp$8:0:int, ~tmp$9:0:int, ?~tmp$7:0:int) @wybe:7:38
    wybe.int.=<0>(?~$:0:int, ~tmp$7:0:int)
    wybe.int.power<0>(~tmp$7:0:int, 2:int, ?~tmp$6:0:int) @import:4:33
    foreign llvm add(32:int, ~tmp$2:0:int, ~tmp$6:0:int, ?~tmp$1:0:int) @wybe:4:38
    wybe.int.=<0>(?~$:0:int, ~tmp$1:0:int)
    wybe.int.sqrt<0>(~tmp$1:0:int, ?~tmp$0:0:int) @import:4:5
    wybe.int.=<0>(?~$:0:int, ~tmp$0:0:int)
--------------------------------------------------
 Module position
  public submods  : position @position:1:8
  public types    : position/0 @position:1:8
  public resources: 
  public procs    : position.position.position<0>
                    position.position.x<1>
                    position.position.x<0>
                    position.position.y<1>
                    position.position.y<0>
  imports         : public import position.position 
                    import wybe 
  types           : position/0 @position:1:8
  resources       : 
  procs           : 
  submodules      : position.position
--------------------------------------------------
 Module position.position([])
  public submods  : 
  public types    : 
  public resources: 
  public procs    : position.position.position<0>
                    position.position.x<1>
                    position.position.x<0>
                    position.position.y<1>
                    position.position.y<0>
  imports         : import wybe 
  types           : 
  resources       : 
  procs           : position:
public proc position(x:0:int, y:0:int, ?~$rec:2:position)<0>  (0 calls)
    foreign $ alloc("position", "position", ?~$rec:0)
    foreign $ mutate("position", "position", "x", %$rec:0, ?%$rec:1, x:0)
    foreign $ mutate("position", "position", "y", %$rec:1, ?%$rec:2, y:0)
    =(?~$:0, ~$rec:2)
                    x:
public proc x($rec:0:position, ?~tmp$0:0:int)<0>  @position:2:12 (0 calls)
    foreign $ access("position":string, "position":string, "x":string, $rec:0:position, ?~tmp$0:0:int)
    wybe.int.=<0>(?~$:0:int, ~tmp$0:0:int)
public proc x(%$rec:0:position, ?%$rec:1:position, $field:0:int)<1>  @position:2:12 (0 calls)
    foreign $ mutate("position":string, "position":string, "x":string, %$rec:0:position, ?%$rec:1:position, $field:0:int)
                    y:
public proc y($rec:0:position, ?~tmp$0:0:int)<0>  @position:2:12 (0 calls)
    foreign $ access("position":string, "position":string, "y":string, $rec:0:position, ?~tmp$0:0:int)
    wybe.int.=<0>(?~$:0:int, ~tmp$0:0:int)
public proc y(%$rec:0:position, ?%$rec:1:position, $field:0:int)<1>  @position:2:12 (0 calls)
    foreign $ mutate("position":string, "position":string, "y":string, %$rec:0:position, ?%$rec:1:position, $field:0:int)
