======================================================================
AFTER EVERYTHING:
 Module import
  public submods  :
  public types    :
  public resources:
  public procs    : import.<0>
                    import.distance<0>
  imports         : use position
                    use wybe
  types           :
  resources       :
  procs           :

*main* > public (0 calls)
0: (wybe.io$io#0:wybe.phantom, ?wybe.io$io#1:wybe.phantom): Alias Pairs: []

    foreign lpvm alloc(16:wybe.int, ?tmp$5#0:position.position)
    foreign lpvm mutate(~tmp$5#0:position.position, ?tmp$6#0:position.position, 16:wybe.int, 0:wybe.int, 1:wybe.int, 0:wybe.int)
    foreign lpvm mutate(~tmp$6#0:position.position, ?tmp$1#0:position.position, 16:wybe.int, 8:wybe.int, 1:wybe.int, 20:wybe.int)
    foreign lpvm alloc(16:wybe.int, ?tmp$9#0:position.position)
    foreign lpvm mutate(~tmp$9#0:position.position, ?tmp$10#0:position.position, 16:wybe.int, 0:wybe.int, 1:wybe.int, 0:wybe.int)
    foreign lpvm mutate(~tmp$10#0:position.position, ?tmp$2#0:position.position, 16:wybe.int, 8:wybe.int, 1:wybe.int, 0:wybe.int)
    import.distance<0>(~tmp$1#0:position.position, ~tmp$2#0:position.position, ?tmp$0#0:wybe.int) @import:6:10
    foreign c print_int(~tmp$0#0:wybe.int, ~#wybe.io$io#0:wybe.phantom, ?tmp$13#0:wybe.phantom) @wybe:80:38
    foreign c putchar('\n':wybe.char, ~tmp$13#0:wybe.phantom, ?#wybe.io$io#1:wybe.phantom) @wybe:78:28


distance > public (1 calls)
0: distance(p1#0:position.position, p2#0:position.position, ?$#0:wybe.int): Alias Pairs: []

    foreign lpvm access(p2#0:position.position, 0:wybe.int, ?tmp$4#0:wybe.int)
    foreign lpvm access(p1#0:position.position, 0:wybe.int, ?tmp$5#0:wybe.int)
    foreign llvm sub(~tmp$4#0:wybe.int, ~tmp$5#0:wybe.int, ?tmp$3#0:wybe.int) @wybe:16:38
    foreign C ipow(~tmp$3#0:wybe.int, 2:wybe.int, ?tmp$2#0:wybe.int) @wybe:30:42
    foreign lpvm access(~p2#0:position.position, 8:wybe.int, ?tmp$8#0:wybe.int)
    foreign lpvm access(~p1#0:position.position, 8:wybe.int, ?tmp$9#0:wybe.int)
    foreign llvm sub(~tmp$8#0:wybe.int, ~tmp$9#0:wybe.int, ?tmp$7#0:wybe.int) @wybe:16:38
    foreign C ipow(~tmp$7#0:wybe.int, 2:wybe.int, ?tmp$6#0:wybe.int) @wybe:30:42
    foreign llvm add(~tmp$2#0:wybe.int, ~tmp$6#0:wybe.int, ?tmp$1#0:wybe.int) @wybe:13:38
    foreign C isqrt(~tmp$1#0:wybe.int, ?$#0:wybe.int) @wybe:29:35
--------------------------------------------------
 Module position
  public submods  :
  public types    : position: (position.position,"pointer")
  public resources:
  public procs    : position.position.=<0>
                    position.position.=<1>
                    position.position.=<2>
                    position.position.position<0>
                    position.position.position<1>
                    position.position.x<0>
                    position.position.x<1>
                    position.position.y<0>
                    position.position.y<1>
  imports         : public use position.position
                    use wybe
  types           : position/0 (pointer)  @position:1:8
  resources       :
  procs           :

  submodules      : position.position
--------------------------------------------------
 Module position.position([])
  public submods  :
  public types    :
  public resources:
  public procs    : position.position.=<0>
                    position.position.=<1>
                    position.position.=<2>
                    position.position.position<0>
                    position.position.position<1>
                    position.position.x<0>
                    position.position.x<1>
                    position.position.y<0>
                    position.position.y<1>
  imports         : use position
                    use wybe
  types           :
  resources       :
  procs           :

= > public inline (0 calls)
0: =(?out#0:position.position, in#0:position.position): Alias Pairs: []

    foreign llvm move(~in#0:position.position, ?out#0:position.position)
= > public inline (0 calls)
1: =(in#0:position.position, ?out#0:position.position): Alias Pairs: []

    foreign llvm move(~in#0:position.position, ?out#0:position.position)
= > public inline test (3 calls)
2: =($left#0:position.position, $right#0:position.position, ?$$#0:wybe.bool): Alias Pairs: []

    foreign lpvm access($left#0:position.position, 0:wybe.int, ?$left$x#0:wybe.int)
    foreign lpvm access(~$left#0:position.position, 8:wybe.int, ?$left$y#0:wybe.int)
    foreign lpvm access($right#0:position.position, 0:wybe.int, ?$right$x#0:wybe.int)
    foreign lpvm access(~$right#0:position.position, 8:wybe.int, ?$right$y#0:wybe.int)
    foreign llvm icmp eq(~$left$x#0:wybe.int, ~$right$x#0:wybe.int, ?tmp$2#0:wybe.bool) @wybe:28:40
    case ~tmp$2#0:wybe.bool of
    0:
        foreign llvm move(0:wybe.bool, ?$$#0:wybe.bool)

    1:
        foreign llvm icmp eq(~$left$y#0:wybe.int, ~$right$y#0:wybe.int, ?$$#0:wybe.bool) @wybe:28:40



position > public inline (0 calls)
0: position(x#0:wybe.int, y#0:wybe.int, ?$#0:position.position): Alias Pairs: []

    foreign lpvm alloc(16:wybe.int, ?$rec#0:position.position)
    foreign lpvm mutate(~%$rec#0:position.position, ?%$rec#1:position.position, 16:wybe.int, 0:wybe.int, 1:wybe.int, ~x#0:wybe.int)
    foreign lpvm mutate(~%$rec#1:position.position, ?%$#0:position.position, 16:wybe.int, 8:wybe.int, 1:wybe.int, ~y#0:wybe.int)
position > public inline (4 calls)
1: position(?x#0:wybe.int, ?y#0:wybe.int, $#0:position.position): Alias Pairs: []

    foreign lpvm access($#0:position.position, 0:wybe.int, ?x#0:wybe.int)
    foreign lpvm access(~$#0:position.position, 8:wybe.int, ?y#0:wybe.int)


x > public inline (0 calls)
0: x($rec#0:position.position, ?$#0:wybe.int): Alias Pairs: []

    foreign lpvm access(~$rec#0:position.position, 0:wybe.int, ?$#0:wybe.int)
x > public inline (0 calls)
1: x($rec#0:position.position, ?$rec#1:position.position, $field#0:wybe.int): Alias Pairs: []

    foreign lpvm mutate(~%$rec#0:position.position, ?%$rec#1:position.position, 16:wybe.int, 0:wybe.int, 0:wybe.int, ~$field#0:wybe.int)


y > public inline (0 calls)
0: y($rec#0:position.position, ?$#0:wybe.int): Alias Pairs: []

    foreign lpvm access(~$rec#0:position.position, 8:wybe.int, ?$#0:wybe.int)
y > public inline (0 calls)
1: y($rec#0:position.position, ?$rec#1:position.position, $field#0:wybe.int): Alias Pairs: []

    foreign lpvm mutate(~%$rec#0:position.position, ?%$rec#1:position.position, 16:wybe.int, 8:wybe.int, 0:wybe.int, ~$field#0:wybe.int)
import, position, position.position
======================================================================
AFTER LLVM IR:

; ModuleID = 'import'
source_filename = "test-cases/import.wybe"

declare void @putchar(i8) local_unnamed_addr

declare void @print_int(i64) local_unnamed_addr

declare i64 @isqrt(i64) local_unnamed_addr

declare i64 @ipow(i64, i64) local_unnamed_addr

declare i8* @wybe_malloc(i32) local_unnamed_addr

define i32 @import.main() local_unnamed_addr {
entry:
  %0 = tail call i8* @wybe_malloc(i32 16)
  %1 = bitcast i8* %0 to i64*
  store i64 0, i64* %1, align 4
  %2 = getelementptr i8, i8* %0, i64 8
  %3 = bitcast i8* %2 to i64*
  store i64 20, i64* %3, align 4
  %4 = tail call i8* @wybe_malloc(i32 16)
  %5 = bitcast i8* %4 to i64*
  call void @llvm.memset.p0i8.i64(i8* %4, i8 0, i64 16, i32 4, i1 false)
  %"tmp$0#0" = tail call i64 @"import.distance<0>"(i64* %1, i64* %5)
  tail call void @print_int(i64 %"tmp$0#0")
  tail call void @putchar(i8 10)
  ret i32 0
}

define i64 @"import.distance<0>"(i64* nocapture readonly, i64* nocapture readonly) local_unnamed_addr {
entry:
  %2 = load i64, i64* %1, align 4
  %3 = load i64, i64* %0, align 4
  %"tmp$3#0" = sub i64 %2, %3
  %"tmp$2#0" = tail call i64 @ipow(i64 %"tmp$3#0", i64 2)
  %4 = getelementptr i64, i64* %1, i64 1
  %5 = load i64, i64* %4, align 4
  %6 = getelementptr i64, i64* %0, i64 1
  %7 = load i64, i64* %6, align 4
  %"tmp$7#0" = sub i64 %5, %7
  %"tmp$6#0" = tail call i64 @ipow(i64 %"tmp$7#0", i64 2)
  %"tmp$1#0" = add i64 %"tmp$6#0", %"tmp$2#0"
  %"$#0" = tail call i64 @isqrt(i64 %"tmp$1#0")
  ret i64 %"$#0"
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i32, i1) #0

attributes #0 = { argmemonly nounwind }

--------------------------------------------------
; ModuleID = 'position'
source_filename = "test-cases/position.wybe"

--------------------------------------------------
; ModuleID = 'position.position'
source_filename = "test-cases"

declare i8* @wybe_malloc(i32) local_unnamed_addr

declare void @llvm.memcpy.p0i8.p0i8.i32(i8*, i8*, i32, i1)

; Function Attrs: norecurse nounwind readnone
define i64* @"position.position.=<0>"(i64* readnone returned %"in#0") local_unnamed_addr #0 {
entry:
  ret i64* %"in#0"
}

; Function Attrs: norecurse nounwind readnone
define i64* @"position.position.=<1>"(i64* readnone returned %"in#0") local_unnamed_addr #0 {
entry:
  ret i64* %"in#0"
}

; Function Attrs: norecurse nounwind readonly
define i1 @"position.position.=<2>"(i64* nocapture readonly, i64* nocapture readonly) local_unnamed_addr #1 {
entry:
  %2 = load i64, i64* %0, align 4
  %3 = load i64, i64* %1, align 4
  %"tmp$2#0" = icmp eq i64 %2, %3
  br i1 %"tmp$2#0", label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %4 = getelementptr i64, i64* %1, i64 1
  %5 = load i64, i64* %4, align 4
  %6 = getelementptr i64, i64* %0, i64 1
  %7 = load i64, i64* %6, align 4
  %"$$#0" = icmp eq i64 %7, %5
  ret i1 %"$$#0"

if.else:                                          ; preds = %entry
  ret i1 false
}

define i64* @"position.position.position<0>"(i64 %"x#0", i64 %"y#0") local_unnamed_addr {
entry:
  %0 = tail call i8* @wybe_malloc(i32 16)
  %1 = bitcast i8* %0 to i64*
  store i64 %"x#0", i64* %1, align 4
  %2 = getelementptr i8, i8* %0, i64 8
  %3 = bitcast i8* %2 to i64*
  store i64 %"y#0", i64* %3, align 4
  ret i64* %1
}

; Function Attrs: norecurse nounwind readonly
define { i64, i64 } @"position.position.position<1>"(i64* nocapture readonly) local_unnamed_addr #1 {
entry:
  %1 = load i64, i64* %0, align 4
  %2 = getelementptr i64, i64* %0, i64 1
  %3 = load i64, i64* %2, align 4
  %4 = insertvalue { i64, i64 } undef, i64 %1, 0
  %5 = insertvalue { i64, i64 } %4, i64 %3, 1
  ret { i64, i64 } %5
}

; Function Attrs: norecurse nounwind readonly
define i64 @"position.position.x<0>"(i64* nocapture readonly) local_unnamed_addr #1 {
entry:
  %1 = load i64, i64* %0, align 4
  ret i64 %1
}

; Function Attrs: norecurse nounwind
define i64* @"position.position.x<1>"(i64* returned, i64 %"$field#0") local_unnamed_addr #2 {
entry:
  store i64 %"$field#0", i64* %0, align 4
  ret i64* %0
}

; Function Attrs: norecurse nounwind readonly
define i64 @"position.position.y<0>"(i64* nocapture readonly) local_unnamed_addr #1 {
entry:
  %1 = getelementptr i64, i64* %0, i64 1
  %2 = load i64, i64* %1, align 4
  ret i64 %2
}

; Function Attrs: norecurse nounwind
define i64* @"position.position.y<1>"(i64* returned, i64 %"$field#0") local_unnamed_addr #2 {
entry:
  %1 = getelementptr i64, i64* %0, i64 1
  store i64 %"$field#0", i64* %1, align 4
  ret i64* %0
}

attributes #0 = { norecurse nounwind readnone }
attributes #1 = { norecurse nounwind readonly }

