======================================================================
AFTER EVERYTHING:
 Module proc_yorn2
  public submods  :
  public types    :
  public resources:
  public procs    : proc_yorn2.yorn<0>
  imports         : use wybe
  types           :
  resources       :
  procs           :

gen$1 > (2 calls)
0: gen$1(prompt#0:wybe.string, wybe.io$io#0:wybe.phantom, ?result#1:wybe.bool, ?wybe.io$io#5:wybe.phantom):
    foreign c print_string(prompt#0:wybe.string, ~#wybe.io$io#0:wybe.phantom, ?#wybe.io$io#1:wybe.phantom) @wybe:92:41
    foreign c print_string(" (y/n) ":wybe.string, ~#wybe.io$io#1:wybe.phantom, ?#wybe.io$io#2:wybe.phantom) @wybe:92:41
    foreign c read_char(?response#0:wybe.char, ~#wybe.io$io#2:wybe.phantom, ?#wybe.io$io#3:wybe.phantom) @wybe:90:39
    foreign llvm icmp eq(response#0:wybe.char, 'Y':wybe.char, ?tmp$0#0:wybe.bool) @wybe:71:42
    case ~tmp$0#0:wybe.bool of
    0:
        foreign llvm icmp eq(~response#0:wybe.char, 'N':wybe.char, ?tmp$2#0:wybe.bool) @wybe:71:42
        case ~tmp$2#0:wybe.bool of
        0:
            foreign c print_string("Please answer 'yes' or 'no'.":wybe.string, ~#wybe.io$io#3:wybe.phantom, ?tmp$15#0:wybe.phantom) @wybe:92:41
            foreign c putchar('\n':wybe.char, ~tmp$15#0:wybe.phantom, ?#wybe.io$io#4:wybe.phantom) @wybe:78:28
            proc_yorn2.gen$1<0>(~prompt#0:wybe.string, ~wybe.io$io#4:wybe.phantom, ?result#1:wybe.bool, ?wybe.io$io#5:wybe.phantom) @proc_yorn2:2:5

        1:
            foreign llvm move(0:wybe.int, ?result#1:wybe.bool)
            foreign llvm move(~wybe.io$io#3:wybe.phantom, ?wybe.io$io#5:wybe.phantom)


    1:
        foreign llvm move(1:wybe.int, ?result#1:wybe.bool)
        foreign llvm move(~wybe.io$io#3:wybe.phantom, ?wybe.io$io#5:wybe.phantom)



gen$2 > inline (2 calls)
0: gen$2([prompt#0:wybe.string], [response#0:wybe.char], result#0:wybe.bool, [tmp$0#0:wybe.bool], wybe.io$io#0:wybe.phantom, [?result#0:wybe.bool], [?wybe.io$io#0:wybe.phantom]): Alias Pairs: []



yorn > public inline (0 calls)
0: yorn(prompt#0:wybe.string, ?result#0:wybe.bool, wybe.io$io#0:wybe.phantom, ?wybe.io$io#1:wybe.phantom): Alias Pairs: []

    proc_yorn2.gen$1<0>(~prompt#0:wybe.string, ~wybe.io$io#0:wybe.phantom, ?result#0:wybe.bool, ?wybe.io$io#1:wybe.phantom) @proc_yorn2:2:5
proc_yorn2
======================================================================
AFTER LLVM IR:

; ModuleID = 'proc_yorn2'
source_filename = "test-cases/proc_yorn2.wybe"

@proc_yorn2.2 = constant [29 x i8] c"Please answer 'yes' or 'no'.\00"
@proc_yorn2.1 = constant [8 x i8] c" (y/n) \00"

declare void @putchar(i8) local_unnamed_addr

declare void @print_string(i8*) local_unnamed_addr

declare i8 @read_char() local_unnamed_addr

define i1 @"proc_yorn2.gen$1<0>"(i8* %"prompt#0") local_unnamed_addr {
entry:
  tail call void @print_string(i8* %"prompt#0")
  tail call void @print_string(i8* getelementptr inbounds ([8 x i8], [8 x i8]* @proc_yorn2.1, i64 0, i64 0))
  %"response#0" = tail call i8 @read_char()
  switch i8 %"response#0", label %if.else1 [
    i8 89, label %if.then
    i8 78, label %if.then.fold.split
  ]

if.then.fold.split:                               ; preds = %entry
  br label %if.then

if.then:                                          ; preds = %entry, %if.then.fold.split
  %merge = phi i64 [ 1, %entry ], [ 0, %if.then.fold.split ]
  ret i64 %merge

if.else1:                                         ; preds = %entry
  tail call void @print_string(i8* getelementptr inbounds ([29 x i8], [29 x i8]* @proc_yorn2.2, i64 0, i64 0))
  tail call void @putchar(i8 10)
  %"result#1" = tail call i1 @"proc_yorn2.gen$1<0>"(i8* %"prompt#0")
  ret i1 false
}

define i1 @"proc_yorn2.yorn<0>"(i8* %"prompt#0") local_unnamed_addr {
entry:
  %"result#0" = tail call i1 @"proc_yorn2.gen$1<0>"(i8* %"prompt#0")
  ret i1 %"result#0"
}

