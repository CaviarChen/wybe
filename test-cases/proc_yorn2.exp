======================================================================
AFTER EVERYTHING:
 Module proc_yorn2
  public submods  : 
  public types    : 
  public resources: 
  public procs    : proc_yorn2.yorn<0>
  imports         : use wybe
  types           : 
  resources       : 
  procs           : 

gen$1 > (2 calls)
0: gen$1(prompt#0:wybe.string, wybe.io$io#0:phantom, ?result#1:wybe.bool, ?wybe.io$io#5:phantom):
    foreign c print_string(prompt#0:wybe.string, ~#wybe.io$io#0:phantom, ?#wybe.io$io#1:phantom) @wybe:92:41
    foreign c print_string(" (y/n) ":wybe.string, ~#wybe.io$io#1:phantom, ?#wybe.io$io#2:phantom) @wybe:92:41
    foreign c read_char(?response#0:wybe.char, ~#wybe.io$io#2:phantom, ?#wybe.io$io#3:phantom) @wybe:90:39
    foreign llvm icmp eq(response#0:wybe.char, 'Y':wybe.char, ?tmp$0#0:wybe.bool) @wybe:70:42
    case ~tmp$0#0:wybe.bool of
    0:
        foreign llvm icmp eq(~response#0:wybe.char, 'N':wybe.char, ?tmp$2#0:wybe.bool) @wybe:70:42
        case ~tmp$2#0:wybe.bool of
        0:
            foreign c print_string("Please answer 'yes' or 'no'.":wybe.string, ~#wybe.io$io#3:phantom, ?tmp$14#0:phantom) @wybe:92:41
            foreign c putchar('\n':wybe.char, ~tmp$14#0:phantom, ?#wybe.io$io#4:phantom) @wybe:78:28
            proc_yorn2.gen$1<0>(~prompt#0:wybe.string, ~wybe.io$io#4:phantom, ?result#1:wybe.bool, ?wybe.io$io#5:phantom) @proc_yorn2:2:5

        1:
            foreign llvm move(0:wybe.int, ?result#1:wybe.bool)
            foreign llvm move(~wybe.io$io#3:phantom, ?wybe.io$io#5:phantom)


    1:
        foreign llvm move(1:wybe.int, ?result#1:wybe.bool)
        foreign llvm move(~wybe.io$io#3:phantom, ?wybe.io$io#5:phantom)



gen$2 > inline (2 calls)
0: gen$2([prompt#0:wybe.string], [response#0:wybe.char], result#0:wybe.bool, [tmp$0#0:wybe.bool], wybe.io$io#0:phantom, [?result#0:wybe.bool], [?wybe.io$io#0:phantom]):


yorn > public inline (0 calls)
0: yorn(prompt#0:wybe.string, ?result#0:wybe.bool, wybe.io$io#0:phantom, ?wybe.io$io#1:phantom):
    proc_yorn2.gen$1<0>(~prompt#0:wybe.string, ~wybe.io$io#0:phantom, ?result#0:wybe.bool, ?wybe.io$io#1:phantom) @proc_yorn2:2:5
  LLVM code       :

; ModuleID = 'proc_yorn2'


declare external ccc void @putchar(i8)

declare external ccc void @print_string(i8*)

declare external ccc i8 @read_char()

@proc_yorn2.2 = constant [29 x i8] c"Please answer 'yes' or 'no'.\00"

@proc_yorn2.1 = constant [8 x i8] c" (y/n) \00"

declare external ccc i8* @wybe_malloc(i32)

define external ccc i1 @"proc_yorn2.gen$1<0>"(i8* %"prompt#0"){
entry:
  tail call ccc void @print_string(i8* %"prompt#0")
  tail call ccc void @print_string(i8* getelementptr inbounds ([8 x i8], [8 x i8]* @proc_yorn2.1, i32 0, i32 0))
  %"response#0" = tail call ccc i8 @read_char()
  %"tmp$0#0" = icmp eq i8 %"response#0", 89
  br i1 %"tmp$0#0", label %if.then, label %if.else
if.then:
  ret i64 1
if.else:
  %"tmp$2#0" = icmp eq i8 %"response#0", 78
  br i1 %"tmp$2#0", label %if.then1, label %if.else1
if.then1:
  ret i64 0
if.else1:
  tail call ccc void @print_string(i8* getelementptr inbounds ([29 x i8], [29 x i8]* @proc_yorn2.2, i32 0, i32 0))
  tail call ccc void @putchar(i8 10)
  %"result#1" = tail call ccc i1 @"proc_yorn2.gen$1<0>"(i8* %"prompt#0")
  ret i1 %"tmp$2#0"
}

define external ccc i1 @"proc_yorn2.yorn<0>"(i8* %"prompt#0"){
entry:
  %"result#0" = tail call ccc i1 @"proc_yorn2.gen$1<0>"(i8* %"prompt#0")
  ret i1 %"result#0"
}
