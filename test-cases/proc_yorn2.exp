======================================================================
AFTER EVERYTHING:
 Module proc_yorn2
  public submods  : 
  public types    : 
  public resources: 
  public procs    : proc_yorn2.yorn<0>
  imports         : use wybe
  types           : 
  resources       : 
  procs           : 

gen$1 > (0 calls) (inline)
0: gen$1(prompt#0:wybe.string, response#0:wybe.char, result#0:wybe.bool, tmp$0#0:wybe.bool, tmp$1#0:wybe.bool, tmp$2#0:wybe.bool, wybe.io$io#0:wybe.phantom, [?prompt#0:wybe.string], [?response#0:wybe.char], [?result#0:wybe.bool], [?tmp$0#0:wybe.bool], [?tmp$1#0:wybe.bool], [?tmp$2#0:wybe.bool], [?wybe.io$io#0:wybe.phantom]):


gen$2 > (2 calls)
0: gen$2(prompt#0:wybe.string, wybe.io$io#0:wybe.phantom, ?prompt#1:wybe.string, ?response#1:wybe.char, ?result#1:wybe.bool, ?tmp$0#1:wybe.bool, ?tmp$1#0:wybe.bool, ?tmp$2#0:wybe.bool, ?wybe.io$io#4:wybe.phantom):
    foreign c print_string(prompt#0:wybe.string, ~#wybe.io$io#0:wybe.phantom, ?#wybe.io$io#1:wybe.phantom) @wybe:116:41
    foreign c print_string(" (y/n) ":wybe.string, ~#wybe.io$io#1:wybe.phantom, ?#wybe.io$io#2:wybe.phantom) @wybe:116:41
    foreign c read_char(?response#0:wybe.char, ~#wybe.io$io#2:wybe.phantom, ?#wybe.io$io#3:wybe.phantom) @wybe:114:39
    foreign llvm icmp eq(response#0:wybe.char, 'Y':wybe.char, ?tmp$10#0:wybe.bool) @wybe:68:42
    proc_yorn2.gen$3<0>(~prompt#0:wybe.string, ~response#0:wybe.char, ~tmp$10#0:wybe.bool, ~tmp$10#0:wybe.bool, ~wybe.io$io#3:wybe.phantom, ?prompt#1:wybe.string, ?response#1:wybe.char, ?result#1:wybe.bool, ?tmp$0#1:wybe.bool, ?tmp$1#0:wybe.bool, ?tmp$2#0:wybe.bool, ?wybe.io$io#4:wybe.phantom) @proc_yorn2:6:9


gen$3 > (1 calls)
0: gen$3(prompt#0:wybe.string, response#0:wybe.char, result#0:wybe.bool, tmp$0#0:wybe.bool, wybe.io$io#0:wybe.phantom, ?prompt#1:wybe.string, ?response#1:wybe.char, ?result#1:wybe.bool, ?tmp$0#1:wybe.bool, ?tmp$1#0:wybe.bool, ?tmp$2#0:wybe.bool, ?wybe.io$io#1:wybe.phantom):
    foreign llvm icmp eq(response#0:wybe.char, 'N':wybe.char, ?tmp$5#0:wybe.bool) @wybe:68:42
    foreign llvm move(tmp$5#0:wybe.bool, ?tmp$2#0:wybe.bool)
    foreign llvm or(result#0:wybe.bool, ~tmp$5#0:wybe.bool, ?tmp$8#0:wybe.bool) @wybe:52:43
    foreign llvm move(tmp$8#0:wybe.bool, ?tmp$1#0:wybe.bool)
    case ~tmp$8#0:wybe.bool of
    0:
        foreign c print_string("Please answer 'yes' or 'no'.":wybe.string, ~wybe.io$io#0:wybe.phantom, ?tmp$14#0:wybe.phantom) @wybe:116:41
        foreign c putchar('\n':wybe.char, ~tmp$14#0:wybe.phantom, ?tmp$15#0:wybe.phantom) @wybe:102:28
        proc_yorn2.gen$2<0>(~prompt#0:wybe.string, ~tmp$15#0:wybe.phantom, ?prompt#1:wybe.string, ?response#1:wybe.char, ?result#1:wybe.bool, ?tmp$0#1:wybe.bool, ?tmp$1#0:wybe.bool, ?tmp$2#0:wybe.bool, ?wybe.io$io#1:wybe.phantom) @proc_yorn2:2:5

    1:
        foreign llvm move(~prompt#0:wybe.string, ?prompt#1:wybe.string)
        foreign llvm move(~response#0:wybe.char, ?response#1:wybe.char)
        foreign llvm move(~result#0:wybe.bool, ?result#1:wybe.bool)
        foreign llvm move(~tmp$0#0:wybe.bool, ?tmp$0#1:wybe.bool)
        foreign llvm move(~wybe.io$io#0:wybe.phantom, ?wybe.io$io#1:wybe.phantom)



gen$4 > (1 calls) (inline)
0: gen$4(prompt#0:wybe.string, [response#0:wybe.char], [result#0:wybe.bool], [tmp$0#0:wybe.bool], wybe.io$io#0:wybe.phantom, ?prompt#1:wybe.string, ?response#1:wybe.char, ?result#1:wybe.bool, ?tmp$0#1:wybe.bool, ?tmp$1#0:wybe.bool, ?tmp$2#0:wybe.bool, ?wybe.io$io#2:wybe.phantom):
    foreign c print_string("Please answer 'yes' or 'no'.":wybe.string, ~#wybe.io$io#0:wybe.phantom, ?tmp$5#0:wybe.phantom) @wybe:116:41
    foreign c putchar('\n':wybe.char, ~tmp$5#0:wybe.phantom, ?#wybe.io$io#1:wybe.phantom) @wybe:102:28
    proc_yorn2.gen$2<0>(~prompt#0:wybe.string, ~wybe.io$io#1:wybe.phantom, ?prompt#1:wybe.string, ?response#1:wybe.char, ?result#1:wybe.bool, ?tmp$0#1:wybe.bool, ?tmp$1#0:wybe.bool, ?tmp$2#0:wybe.bool, ?wybe.io$io#2:wybe.phantom) @proc_yorn2:2:5


yorn > public (0 calls)
0: yorn(prompt#0:wybe.string, ?result#0:wybe.bool, wybe.io$io#0:wybe.phantom, ?wybe.io$io#1:wybe.phantom):
    proc_yorn2.gen$2<0>(~prompt#0:wybe.string, ~wybe.io$io#0:wybe.phantom, ?prompt#1:wybe.string, ?response#0:wybe.char, ?result#0:wybe.bool, ?tmp$0#0:wybe.bool, ?tmp$1#0:wybe.bool, ?tmp$2#0:wybe.bool, ?wybe.io$io#1:wybe.phantom) @proc_yorn2:2:5
proc_yorn2
======================================================================
AFTER LLVM IR:

; ModuleID = 'proc_yorn2'

@0 = constant [8 x i8] c" (y/n) \00"
@1 = constant [29 x i8] c"Please answer 'yes' or 'no'.\00"
@2 = constant [29 x i8] c"Please answer 'yes' or 'no'.\00"

declare i8 @read_char()

declare void @print_string(i8*)

declare void @putchar(i8)

declare i8* @wybe_malloc(i32)

define { i8*, i8, i1, i1, i1, i1 } @"proc_yorn2.gen$2<0>"(i8* %"prompt#0") {
entry:
  tail call void @print_string(i8* %"prompt#0")
  tail call void @print_string(i8* getelementptr inbounds ([8 x i8]* @0, i32 0, i32 0))
  %"response#0" = tail call i8 @read_char()
  %"tmp$10#0" = icmp eq i8 %"response#0", 89
  %0 = tail call { i8*, i8, i1, i1, i1, i1 } @"proc_yorn2.gen$3<0>"(i8* %"prompt#0", i8 %"response#0", i1 %"tmp$10#0", i1 %"tmp$10#0")
  %1 = extractvalue { i8*, i8, i1, i1, i1, i1 } %0, 0
  %2 = extractvalue { i8*, i8, i1, i1, i1, i1 } %0, 1
  %3 = extractvalue { i8*, i8, i1, i1, i1, i1 } %0, 2
  %4 = extractvalue { i8*, i8, i1, i1, i1, i1 } %0, 3
  %5 = extractvalue { i8*, i8, i1, i1, i1, i1 } %0, 4
  %6 = extractvalue { i8*, i8, i1, i1, i1, i1 } %0, 5
  %7 = insertvalue { i8*, i8, i1, i1, i1, i1 } undef, i8* %1, 0
  %8 = insertvalue { i8*, i8, i1, i1, i1, i1 } %7, i8 %2, 1
  %9 = insertvalue { i8*, i8, i1, i1, i1, i1 } %8, i1 %3, 2
  %10 = insertvalue { i8*, i8, i1, i1, i1, i1 } %9, i1 %4, 3
  %11 = insertvalue { i8*, i8, i1, i1, i1, i1 } %10, i1 %5, 4
  %12 = insertvalue { i8*, i8, i1, i1, i1, i1 } %11, i1 %6, 5
  ret { i8*, i8, i1, i1, i1, i1 } %12
}

define { i8*, i8, i1, i1, i1, i1 } @"proc_yorn2.gen$3<0>"(i8* %"prompt#0", i8 %"response#0", i1 %"result#0", i1 %"tmp$0#0") {
entry:
  %"tmp$5#0" = icmp eq i8 %"response#0", 78
  %"tmp$8#0" = or i1 %"result#0", %"tmp$5#0"
  %0 = insertvalue { i1, i1 } undef, i1 %"tmp$8#0", 0
  %1 = insertvalue { i1, i1 } %0, i1 %"tmp$5#0", 1
  br i1 %"tmp$8#0", label %if.then, label %if.else

if.then:                                          ; preds = %entry
  ret { i1, i1 } %1

if.else:                                          ; preds = %entry
  tail call void @print_string(i8* getelementptr inbounds ([29 x i8]* @1, i32 0, i32 0))
  tail call void @putchar(i8 10)
  %2 = tail call { i8*, i8, i1, i1, i1, i1 } @"proc_yorn2.gen$2<0>"(i8* %"prompt#0")
  %3 = extractvalue { i8*, i8, i1, i1, i1, i1 } %2, 0
  %4 = extractvalue { i8*, i8, i1, i1, i1, i1 } %2, 1
  %5 = extractvalue { i8*, i8, i1, i1, i1, i1 } %2, 2
  %6 = extractvalue { i8*, i8, i1, i1, i1, i1 } %2, 3
  %7 = extractvalue { i8*, i8, i1, i1, i1, i1 } %2, 4
  %8 = extractvalue { i8*, i8, i1, i1, i1, i1 } %2, 5
  ret i1 %8
}

define { i8*, i8, i1, i1, i1, i1 } @"proc_yorn2.gen$4<0>"(i8* %"prompt#0") {
entry:
  tail call void @print_string(i8* getelementptr inbounds ([29 x i8]* @2, i32 0, i32 0))
  tail call void @putchar(i8 10)
  %0 = tail call { i8*, i8, i1, i1, i1, i1 } @"proc_yorn2.gen$2<0>"(i8* %"prompt#0")
  %1 = extractvalue { i8*, i8, i1, i1, i1, i1 } %0, 0
  %2 = extractvalue { i8*, i8, i1, i1, i1, i1 } %0, 1
  %3 = extractvalue { i8*, i8, i1, i1, i1, i1 } %0, 2
  %4 = extractvalue { i8*, i8, i1, i1, i1, i1 } %0, 3
  %5 = extractvalue { i8*, i8, i1, i1, i1, i1 } %0, 4
  %6 = extractvalue { i8*, i8, i1, i1, i1, i1 } %0, 5
  %7 = insertvalue { i8*, i8, i1, i1, i1, i1 } undef, i8* %1, 0
  %8 = insertvalue { i8*, i8, i1, i1, i1, i1 } %7, i8 %2, 1
  %9 = insertvalue { i8*, i8, i1, i1, i1, i1 } %8, i1 %3, 2
  %10 = insertvalue { i8*, i8, i1, i1, i1, i1 } %9, i1 %4, 3
  %11 = insertvalue { i8*, i8, i1, i1, i1, i1 } %10, i1 %5, 4
  %12 = insertvalue { i8*, i8, i1, i1, i1, i1 } %11, i1 %6, 5
  ret { i8*, i8, i1, i1, i1, i1 } %12
}

define i1 @"proc_yorn2.yorn<0>"(i8* %"prompt#0") {
entry:
  %0 = tail call { i8*, i8, i1, i1, i1, i1 } @"proc_yorn2.gen$2<0>"(i8* %"prompt#0")
  %1 = extractvalue { i8*, i8, i1, i1, i1, i1 } %0, 0
  %2 = extractvalue { i8*, i8, i1, i1, i1, i1 } %0, 1
  %3 = extractvalue { i8*, i8, i1, i1, i1, i1 } %0, 2
  %4 = extractvalue { i8*, i8, i1, i1, i1, i1 } %0, 3
  %5 = extractvalue { i8*, i8, i1, i1, i1, i1 } %0, 4
  %6 = extractvalue { i8*, i8, i1, i1, i1, i1 } %0, 5
  ret i1 %3
}

