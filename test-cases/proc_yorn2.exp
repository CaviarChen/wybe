======================================================================
AFTER EVERYTHING:
 Module proc_yorn2
  public submods  : 
  public types    : 
  public resources: 
  public procs    : proc_yorn2.yorn<0>
  imports         : use wybe
  types           : 
  resources       : 
  procs           : 

gen$1 > (2 calls)
0: gen$1(prompt#0:wybe.string, wybe.io$io#0:wybe.phantom, ?result#1:wybe.bool, ?wybe.io$io#4:wybe.phantom):
    foreign c print_string(prompt#0:wybe.string, ~#wybe.io$io#0:wybe.phantom, ?#wybe.io$io#1:wybe.phantom) @wybe:116:41
    foreign c print_string(" (y/n) ":wybe.string, ~#wybe.io$io#1:wybe.phantom, ?#wybe.io$io#2:wybe.phantom) @wybe:116:41
    foreign c read_char(?response#0:wybe.char, ~#wybe.io$io#2:wybe.phantom, ?#wybe.io$io#3:wybe.phantom) @wybe:114:39
    foreign llvm icmp eq(response#0:wybe.char, 'Y':wybe.char, ?tmp$10#0:wybe.bool) @wybe:68:42
    foreign llvm icmp eq(~response#0:wybe.char, 'N':wybe.char, ?tmp$14#0:wybe.bool) @wybe:68:42
    foreign llvm or(tmp$10#0:wybe.bool, ~tmp$14#0:wybe.bool, ?tmp$17#0:wybe.bool) @wybe:52:43
    case ~tmp$17#0:wybe.bool of
    0:
        foreign c print_string("Please answer 'yes' or 'no'.":wybe.string, ~wybe.io$io#3:wybe.phantom, ?tmp$25#0:wybe.phantom) @wybe:116:41
        foreign c putchar('\n':wybe.char, ~tmp$25#0:wybe.phantom, ?tmp$26#0:wybe.phantom) @wybe:102:28
        proc_yorn2.gen$1<0>(~prompt#0:wybe.string, ~tmp$26#0:wybe.phantom, ?result#1:wybe.bool, ?wybe.io$io#4:wybe.phantom) @proc_yorn2:2:5

    1:
        foreign llvm move(~tmp$10#0:wybe.bool, ?result#1:wybe.bool)
        foreign llvm move(~wybe.io$io#3:wybe.phantom, ?wybe.io$io#4:wybe.phantom)



gen$3 > (1 calls) (inline)
0: gen$3([prompt#0:wybe.string], [response#0:wybe.char], result#0:wybe.bool, [tmp$0#0:wybe.bool], [tmp$1#0:wybe.bool], [tmp$2#0:wybe.bool], wybe.io$io#0:wybe.phantom, [?result#0:wybe.bool], [?wybe.io$io#0:wybe.phantom]):


gen$4 > (1 calls) (inline)
0: gen$4(prompt#0:wybe.string, [response#0:wybe.char], [result#0:wybe.bool], [tmp$0#0:wybe.bool], [tmp$1#0:wybe.bool], [tmp$2#0:wybe.bool], wybe.io$io#0:wybe.phantom, ?result#1:wybe.bool, ?wybe.io$io#2:wybe.phantom):
    foreign c print_string("Please answer 'yes' or 'no'.":wybe.string, ~#wybe.io$io#0:wybe.phantom, ?tmp$5#0:wybe.phantom) @wybe:116:41
    foreign c putchar('\n':wybe.char, ~tmp$5#0:wybe.phantom, ?#wybe.io$io#1:wybe.phantom) @wybe:102:28
    proc_yorn2.gen$1<0>(~prompt#0:wybe.string, ~wybe.io$io#1:wybe.phantom, ?result#1:wybe.bool, ?wybe.io$io#2:wybe.phantom) @proc_yorn2:2:5


yorn > public (0 calls) (inline)
0: yorn(prompt#0:wybe.string, ?result#0:wybe.bool, wybe.io$io#0:wybe.phantom, ?wybe.io$io#1:wybe.phantom):
    proc_yorn2.gen$1<0>(~prompt#0:wybe.string, ~wybe.io$io#0:wybe.phantom, ?result#0:wybe.bool, ?wybe.io$io#1:wybe.phantom) @proc_yorn2:2:5
proc_yorn2
======================================================================
AFTER LLVM IR:

; ModuleID = 'proc_yorn2'

@0 = constant [29 x i8] c"Please answer 'yes' or 'no'.\00"
@1 = constant [8 x i8] c" (y/n) \00"
@2 = constant [29 x i8] c"Please answer 'yes' or 'no'.\00"

declare void @putchar(i8)

declare void @print_string(i8*)

declare i8 @read_char()

declare i8* @wybe_malloc(i32)

define i1 @"proc_yorn2.gen$1<0>"(i8* %"prompt#0") {
entry:
  tail call void @print_string(i8* %"prompt#0")
  tail call void @print_string(i8* getelementptr inbounds ([8 x i8]* @1, i32 0, i32 0))
  %"response#0" = tail call i8 @read_char()
  %"tmp$10#0" = icmp eq i8 %"response#0", 89
  %"tmp$14#0" = icmp eq i8 %"response#0", 78
  %"tmp$17#0" = or i1 %"tmp$10#0", %"tmp$14#0"
  br i1 %"tmp$17#0", label %if.then, label %if.else

if.then:                                          ; preds = %entry
  ret i1 %"tmp$10#0"

if.else:                                          ; preds = %entry
  tail call void @print_string(i8* getelementptr inbounds ([29 x i8]* @0, i32 0, i32 0))
  tail call void @putchar(i8 10)
  %"result#1" = tail call i1 @"proc_yorn2.gen$1<0>"(i8* %"prompt#0")
  ret i1 %"result#1"
}

define i1 @"proc_yorn2.gen$4<0>"(i8* %"prompt#0") {
entry:
  tail call void @print_string(i8* getelementptr inbounds ([29 x i8]* @2, i32 0, i32 0))
  tail call void @putchar(i8 10)
  %"result#1" = tail call i1 @"proc_yorn2.gen$1<0>"(i8* %"prompt#0")
  ret i1 %"result#1"
}

define i1 @"proc_yorn2.yorn<0>"(i8* %"prompt#0") {
entry:
  %"result#0" = tail call i1 @"proc_yorn2.gen$1<0>"(i8* %"prompt#0")
  ret i1 %"result#0"
}

