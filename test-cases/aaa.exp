======================================================================
AFTER EVERYTHING:
 Module aaa
  public submods  : 
  public types    : 
  public resources: 
  public procs    : aaa.<0>
  imports         : use bbb
                    use ccc
                    use wybe
  types           : 
  resources       : 
  procs           : 

*main* > public inline (0 calls)
0: (io#0:phantom, ?io#1:phantom):
    foreign c print_string("AAA: Init":wybe.string, ~#io#0:phantom, ?tmp$2#0:phantom) @wybe:nn:nn
    foreign c putchar('\n':wybe.char, ~tmp$2#0:phantom, ?#io#1:phantom) @wybe:nn:nn

  LLVM code       :

; ModuleID = 'aaa'


declare external ccc void @putchar(i8)

declare external ccc void @print_string(i8*)

@aaa.1 = constant [10 x i8] c"AAA: Init\00"

declare external ccc i8* @wybe_malloc(i32)

define external ccc void @"aaa.<0>"(){
entry:
  tail call ccc void @print_string(i8* getelementptr inbounds ([10 x i8], [10 x i8]* @aaa.1, i32 0, i32 0))
  tail call ccc void @putchar(i8 10)
  ret void
}
--------------------------------------------------
 Module bbb
  public submods  : 
  public types    : 
  public resources: 
  public procs    : bbb.<0>
  imports         : use ddd
                    use wybe
  types           : 
  resources       : 
  procs           : 

*main* > public inline (0 calls)
0: (io#0:phantom, ?io#1:phantom):
    foreign c print_string("BBB: Init":wybe.string, ~#io#0:phantom, ?tmp$2#0:phantom) @wybe:nn:nn
    foreign c putchar('\n':wybe.char, ~tmp$2#0:phantom, ?#io#1:phantom) @wybe:nn:nn

  LLVM code       :

; ModuleID = 'bbb'


declare external ccc void @putchar(i8)

declare external ccc void @print_string(i8*)

@bbb.1 = constant [10 x i8] c"BBB: Init\00"

declare external ccc i8* @wybe_malloc(i32)

define external ccc void @"bbb.<0>"(){
entry:
  tail call ccc void @print_string(i8* getelementptr inbounds ([10 x i8], [10 x i8]* @bbb.1, i32 0, i32 0))
  tail call ccc void @putchar(i8 10)
  ret void
}
--------------------------------------------------
 Module ccc
  public submods  : 
  public types    : 
  public resources: 
  public procs    : ccc.<0>
  imports         : use ddd
                    use wybe
  types           : 
  resources       : 
  procs           : 

*main* > public inline (0 calls)
0: (io#0:phantom, ?io#1:phantom):
    foreign c print_string("CCC: Init":wybe.string, ~#io#0:phantom, ?tmp$2#0:phantom) @wybe:nn:nn
    foreign c putchar('\n':wybe.char, ~tmp$2#0:phantom, ?#io#1:phantom) @wybe:nn:nn

  LLVM code       :

; ModuleID = 'ccc'


declare external ccc void @putchar(i8)

declare external ccc void @print_string(i8*)

@ccc.1 = constant [10 x i8] c"CCC: Init\00"

declare external ccc i8* @wybe_malloc(i32)

define external ccc void @"ccc.<0>"(){
entry:
  tail call ccc void @print_string(i8* getelementptr inbounds ([10 x i8], [10 x i8]* @ccc.1, i32 0, i32 0))
  tail call ccc void @putchar(i8 10)
  ret void
}
--------------------------------------------------
 Module ddd
  public submods  : 
  public types    : 
  public resources: 
  public procs    : ddd.<0>
  imports         : use wybe
  types           : 
  resources       : 
  procs           : 

*main* > public inline (0 calls)
0: (io#0:phantom, ?io#1:phantom):
    foreign c print_string("DDD: Init":wybe.string, ~#io#0:phantom, ?tmp$2#0:phantom) @wybe:nn:nn
    foreign c putchar('\n':wybe.char, ~tmp$2#0:phantom, ?#io#1:phantom) @wybe:nn:nn

  LLVM code       :

; ModuleID = 'ddd'


declare external ccc void @putchar(i8)

declare external ccc void @print_string(i8*)

@ddd.1 = constant [10 x i8] c"DDD: Init\00"

declare external ccc i8* @wybe_malloc(i32)

define external ccc void @"ddd.<0>"(){
entry:
  tail call ccc void @print_string(i8* getelementptr inbounds ([10 x i8], [10 x i8]* @ddd.1, i32 0, i32 0))
  tail call ccc void @putchar(i8 10)
  ret void
}
