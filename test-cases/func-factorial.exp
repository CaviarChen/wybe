Public func factorial(n:int):int {func-factorial:1:8} = if <=(n {func-factorial:2:11}, 0 {func-factorial:2:17}) {func-factorial:2:11} then 1 {func-factorial:2:24} else *(n {func-factorial:2:30}, factorial(-(n {func-factorial:2:44}, 1 {func-factorial:2:47}) {func-factorial:2:44}) {func-factorial:2:34}) {func-factorial:2:30} {func-factorial:2:8}

 Module func-factorial
  public submods  : 
  public types    : 
  public resources: 
  public procs    : factorial(n:0:int, ?$:-1:int) <0> {func-factorial:1:8}
  imports         : 
  types           : 
  resources       : 
  procs           : factorial:
proc factorial(n:0:int, ?$:-1:int) (id 0):  {func-factorial:1:8}
    gen$2(n:0, ?$:0) {?}
                    gen$1:
proc gen$1($tmp0:0:?, ?$:-1:int) (id 0):  {?}
    =(?$:0, $tmp0:0) {?}
                    gen$2:
proc gen$2(n:0:int, ?$:-1:int) (id 0):  {?}
    <=(n:0, 0, ?$tmp1:0) {func-factorial:2:11}
    guard $tmp1:0 = 1 {?}
    =(?$tmp0:0, 1) {?}
    gen$1($tmp0:0, ?$:0) {?}

    <=(n:0, 0, ?$tmp1:0) {func-factorial:2:11}
    guard $tmp1:0 = 0 {?}
    -(n:0, 1, ?$tmp4:0) {func-factorial:2:44}
    factorial($tmp4:0, ?$tmp3:0) {func-factorial:2:34}
    *(n:0, $tmp3:0, ?$tmp2:0) {func-factorial:2:30}
    =(?$tmp0:1, $tmp2:0) {?}
    gen$1($tmp0:0, ?$:0) {?}

Submodules of func-factorial:

Unintitialised variable $tmp0