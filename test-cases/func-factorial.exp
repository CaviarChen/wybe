public func factorial(n:int):int @func-factorial:1:8 = if
    <=(n @func-factorial:2:11, 0 @func-factorial:2:17)
then 1 @func-factorial:2:24 else *(n @func-factorial:2:30, factorial(-(n @func-factorial:2:44, 1 @func-factorial:2:47) @func-factorial:2:44) @func-factorial:2:34) @func-factorial:2:30 @func-factorial:2:8

 Module func-factorial
  public submods  : 
  public types    : 
  public resources: 
  public procs    : factorial(n:0:int, ?$:0:int) <0> @func-factorial:1:8
  imports         : 
  types           : 
  resources       : 
  procs           : factorial:
proc factorial(n:0:int, ?$:0:int) (id 0):  @func-factorial:1:8
    gen$1(n:0, ?n:1, ?tmp$0:0) @func-factorial:2:8
    =(?$:0, tmp$0:0)
                    gen$1:
proc gen$1(n:0:?, ?n:0:?, ?tmp$0:0:?) (id 0): 
    begin guard 1
        <=(n:0, 0) @func-factorial:2:11
    end guard 
    =(?tmp$0:0, 1)

    begin guard 0
        <=(n:0, 0) @func-factorial:2:11
    end guard 
    -(n:0, 1, ?tmp$3:0) @func-factorial:2:44
    factorial(tmp$3:0, ?tmp$2:0) @func-factorial:2:34
    *(n:0, tmp$2:0, ?tmp$1:0) @func-factorial:2:30
    =(?tmp$0:0, tmp$1:0)

Submodules of func-factorial:

