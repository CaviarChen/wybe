======================================================================
AFTER EVERYTHING:
 Module alias_type4
  public submods  : 
  public types    : position: (alias_type4.position,Just "address")
                    posrec: (alias_type4.posrec,Just "address")
  public resources: 
  public procs    : alias_type4.<0>
                    alias_type4.foo<0>
                    alias_type4.position.=<0>
                    alias_type4.position.position<0>
                    alias_type4.position.position<1>
                    alias_type4.position.x<0>
                    alias_type4.position.x<1>
                    alias_type4.position.y<0>
                    alias_type4.position.y<1>
                    alias_type4.posrec.=<0>
                    alias_type4.posrec.a<0>
                    alias_type4.posrec.a<1>
                    alias_type4.posrec.p<0>
                    alias_type4.posrec.p<1>
                    alias_type4.posrec.posrec<0>
                    alias_type4.posrec.posrec<1>
  imports         : public use alias_type4.position
                    public use alias_type4.posrec
                    use wybe
  types           : position/public  is address { position(x:int, y:int) @alias_type4:2:25  }  @alias_type4:2:5, posrec/public  is address { posrec(p:position, a:int) @alias_type4:4:23  }  @alias_type4:4:5
  resources       : 
  submodules      : alias_type4.position, alias_type4.posrec
  procs           : 

*main* > public (0 calls)
0: (argc#0:wybe.int, [?argc#0:wybe.int], argv#0:wybe.int, [?argv#0:wybe.int], exit_code#0:wybe.int, [?exit_code#0:wybe.int], io#0:wybe.phantom, ?io#1:wybe.phantom): AliasPairs: []
    foreign lpvm alloc(16:wybe.int, ?tmp$4#0:alias_type4.position)
    foreign lpvm mutate(~tmp$4#0:alias_type4.position, ?tmp$5#0:alias_type4.position, 0:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, 100:wybe.int)
    foreign lpvm mutate(~tmp$5#0:alias_type4.position, ?tmp$6#0:alias_type4.position, 8:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, 100:wybe.int)
    foreign lpvm alloc(16:wybe.int, ?tmp$9#0:alias_type4.posrec)
    foreign lpvm mutate(~tmp$9#0:alias_type4.posrec, ?tmp$10#0:alias_type4.posrec, 0:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, ~tmp$6#0:alias_type4.position)
    foreign lpvm mutate(~tmp$10#0:alias_type4.posrec, ?tmp$11#0:alias_type4.posrec, 8:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, 1:wybe.int)
    alias_type4.foo<0>(~tmp$11#0:alias_type4.posrec, ~#io#0:wybe.phantom, ?#io#1:wybe.phantom) @alias_type4:16:2


foo > public (1 calls)
0: foo(r1#0:alias_type4.posrec, io#0:wybe.phantom, ?io#1:wybe.phantom): AliasPairs: []
    foreign lpvm access(~r1#0:alias_type4.posrec, 0:wybe.int, ?tmp$0#0:alias_type4.position)
    foreign lpvm mutate noalias(~tmp$0#0:alias_type4.position, ?%pos1#1:alias_type4.position, 0:wybe.int, 0:wybe.int, 16:wybe.int, 0:wybe.int, 1111:wybe.int)
    foreign lpvm access(~pos1#1:alias_type4.position, 0:wybe.int, ?tmp$1#0:wybe.int)
    foreign c print_int(~tmp$1#0:wybe.int, ~#io#0:wybe.phantom, ?tmp$8#0:wybe.phantom) @wybe:nn:nn
    foreign c putchar('\n':wybe.char, ~tmp$8#0:wybe.phantom, ?#io#1:wybe.phantom) @wybe:nn:nn

  LLVM code       :

; ModuleID = 'alias_type4'


 


declare external ccc  void @putchar(i8)    


declare external ccc  void @print_int(i64)    


declare external ccc  i8* @wybe_malloc(i32)    


declare external ccc  void @llvm.memcpy.p0i8.p0i8.i32(i8*, i8*, i32, i32, i1)    


define external ccc  void @"alias_type4.<0>"(i64  %"argc#0", i64  %"argv#0", i64  %"exit_code#0")    {
entry:
  %1 = trunc i64 16 to i32  
  %2 = tail call ccc  i8*  @wybe_malloc(i32  %1)  
  %3 = ptrtoint i8* %2 to i64 
  %4 = inttoptr i64 %3 to i64* 
  %5 = getelementptr  i64, i64* %4, i64 0 
  store  i64 100, i64* %5 
  %6 = add   i64 %3, 8 
  %7 = inttoptr i64 %6 to i64* 
  %8 = getelementptr  i64, i64* %7, i64 0 
  store  i64 100, i64* %8 
  %9 = trunc i64 16 to i32  
  %10 = tail call ccc  i8*  @wybe_malloc(i32  %9)  
  %11 = ptrtoint i8* %10 to i64 
  %12 = inttoptr i64 %11 to i64* 
  %13 = getelementptr  i64, i64* %12, i64 0 
  store  i64 %3, i64* %13 
  %14 = add   i64 %11, 8 
  %15 = inttoptr i64 %14 to i64* 
  %16 = getelementptr  i64, i64* %15, i64 0 
  store  i64 1, i64* %16 
  tail call ccc  void  @"alias_type4.foo<0>"(i64  %11)  
  ret void 
}


define external ccc  void @"alias_type4.foo<0>"(i64  %"r1#0")    {
entry:
  %17 = inttoptr i64 %"r1#0" to i64* 
  %18 = getelementptr  i64, i64* %17, i64 0 
  %19 = load  i64, i64* %18 
  %20 = trunc i64 16 to i32  
  %21 = tail call ccc  i8*  @wybe_malloc(i32  %20)  
  %22 = ptrtoint i8* %21 to i64 
  %23 = inttoptr i64 %22 to i8* 
  %24 = inttoptr i64 %19 to i8* 
  %25 = trunc i64 16 to i32  
  tail call ccc  void  @llvm.memcpy.p0i8.p0i8.i32(i8*  %23, i8*  %24, i32  %25, i32  8, i1  0)  
  %26 = inttoptr i64 %22 to i64* 
  %27 = getelementptr  i64, i64* %26, i64 0 
  store  i64 1111, i64* %27 
  %28 = inttoptr i64 %22 to i64* 
  %29 = getelementptr  i64, i64* %28, i64 0 
  %30 = load  i64, i64* %29 
  tail call ccc  void  @print_int(i64  %30)  
  tail call ccc  void  @putchar(i8  10)  
  ret void 
}
--------------------------------------------------
 Module alias_type4.position
  public submods  : 
  public types    : 
  public resources: 
  public procs    : alias_type4.position.=<0>
                    alias_type4.position.position<0>
                    alias_type4.position.position<1>
                    alias_type4.position.x<0>
                    alias_type4.position.x<1>
                    alias_type4.position.y<0>
                    alias_type4.position.y<1>
  imports         : use alias_type4
                    use wybe
  types           : 
  resources       : 
  procs           : 

= > public inline test (3 calls)
0: =($left#0:alias_type4.position, $right#0:alias_type4.position, ?$$#0:wybe.bool): AliasPairs: []
    foreign lpvm access($left#0:alias_type4.position, 0:wybe.int, ?$left$x#0:wybe.int)
    foreign lpvm access(~$left#0:alias_type4.position, 8:wybe.int, ?$left$y#0:wybe.int)
    foreign lpvm access($right#0:alias_type4.position, 0:wybe.int, ?$right$x#0:wybe.int)
    foreign lpvm access(~$right#0:alias_type4.position, 8:wybe.int, ?$right$y#0:wybe.int)
    foreign llvm icmp eq(~$left$x#0:wybe.int, ~$right$x#0:wybe.int, ?tmp$2#0:wybe.bool) @wybe:nn:nn
    case ~tmp$2#0:wybe.bool of
    0:
        foreign llvm move(0:wybe.bool, ?$$#0:wybe.bool)

    1:
        foreign llvm icmp eq(~$left$y#0:wybe.int, ~$right$y#0:wybe.int, ?$$#0:wybe.bool) @wybe:nn:nn



position > public inline (0 calls)
0: position(x#0:wybe.int, y#0:wybe.int, ?$#0:alias_type4.position): AliasPairs: []
    foreign lpvm alloc(16:wybe.int, ?$rec#0:alias_type4.position)
    foreign lpvm mutate(~%$rec#0:alias_type4.position, ?%$rec#1:alias_type4.position, 0:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, ~x#0:wybe.int)
    foreign lpvm mutate(~%$rec#1:alias_type4.position, ?%$#0:alias_type4.position, 8:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, ~y#0:wybe.int)
position > public inline (4 calls)
1: position(?x#0:wybe.int, ?y#0:wybe.int, $#0:alias_type4.position): AliasPairs: []
    foreign lpvm access($#0:alias_type4.position, 0:wybe.int, ?x#0:wybe.int)
    foreign lpvm access(~$#0:alias_type4.position, 8:wybe.int, ?y#0:wybe.int)


x > public inline (0 calls)
0: x($rec#0:alias_type4.position, ?$#0:wybe.int): AliasPairs: []
    foreign lpvm access(~$rec#0:alias_type4.position, 0:wybe.int, ?$#0:wybe.int)
x > public inline (0 calls)
1: x($rec#0:alias_type4.position, ?$rec#1:alias_type4.position, $field#0:wybe.int): AliasPairs: []
    foreign lpvm mutate noalias(~%$rec#0:alias_type4.position, ?%$rec#1:alias_type4.position, 0:wybe.int, 0:wybe.int, 16:wybe.int, 0:wybe.int, ~$field#0:wybe.int)


y > public inline (0 calls)
0: y($rec#0:alias_type4.position, ?$#0:wybe.int): AliasPairs: []
    foreign lpvm access(~$rec#0:alias_type4.position, 8:wybe.int, ?$#0:wybe.int)
y > public inline (0 calls)
1: y($rec#0:alias_type4.position, ?$rec#1:alias_type4.position, $field#0:wybe.int): AliasPairs: []
    foreign lpvm mutate noalias(~%$rec#0:alias_type4.position, ?%$rec#1:alias_type4.position, 8:wybe.int, 0:wybe.int, 16:wybe.int, 0:wybe.int, ~$field#0:wybe.int)

  LLVM code       :

; ModuleID = 'alias_type4.position'


 


declare external ccc  i8* @wybe_malloc(i32)    


declare external ccc  void @llvm.memcpy.p0i8.p0i8.i32(i8*, i8*, i32, i32, i1)    


define external ccc  i1 @"alias_type4.position.=<0>"(i64  %"$left#0", i64  %"$right#0")    {
entry:
  %1 = inttoptr i64 %"$left#0" to i64* 
  %2 = getelementptr  i64, i64* %1, i64 0 
  %3 = load  i64, i64* %2 
  %4 = add   i64 %"$left#0", 8 
  %5 = inttoptr i64 %4 to i64* 
  %6 = getelementptr  i64, i64* %5, i64 0 
  %7 = load  i64, i64* %6 
  %8 = inttoptr i64 %"$right#0" to i64* 
  %9 = getelementptr  i64, i64* %8, i64 0 
  %10 = load  i64, i64* %9 
  %11 = add   i64 %"$right#0", 8 
  %12 = inttoptr i64 %11 to i64* 
  %13 = getelementptr  i64, i64* %12, i64 0 
  %14 = load  i64, i64* %13 
  %"tmp$2#0" = icmp eq i64 %3, %10 
  br i1 %"tmp$2#0", label %if.then, label %if.else 
if.then:
  %"$$#0" = icmp eq i64 %7, %14 
  ret i1 %"$$#0" 
if.else:
  ret i1 0 
}


define external ccc  i64 @"alias_type4.position.position<0>"(i64  %"x#0", i64  %"y#0")    {
entry:
  %15 = trunc i64 16 to i32  
  %16 = tail call ccc  i8*  @wybe_malloc(i32  %15)  
  %17 = ptrtoint i8* %16 to i64 
  %18 = inttoptr i64 %17 to i64* 
  %19 = getelementptr  i64, i64* %18, i64 0 
  store  i64 %"x#0", i64* %19 
  %20 = add   i64 %17, 8 
  %21 = inttoptr i64 %20 to i64* 
  %22 = getelementptr  i64, i64* %21, i64 0 
  store  i64 %"y#0", i64* %22 
  ret i64 %17 
}


define external ccc  {i64, i64} @"alias_type4.position.position<1>"(i64  %"$#0")    {
entry:
  %23 = inttoptr i64 %"$#0" to i64* 
  %24 = getelementptr  i64, i64* %23, i64 0 
  %25 = load  i64, i64* %24 
  %26 = add   i64 %"$#0", 8 
  %27 = inttoptr i64 %26 to i64* 
  %28 = getelementptr  i64, i64* %27, i64 0 
  %29 = load  i64, i64* %28 
  %30 = insertvalue {i64, i64} undef, i64 %25, 0 
  %31 = insertvalue {i64, i64} %30, i64 %29, 1 
  ret {i64, i64} %31 
}


define external ccc  i64 @"alias_type4.position.x<0>"(i64  %"$rec#0")    {
entry:
  %32 = inttoptr i64 %"$rec#0" to i64* 
  %33 = getelementptr  i64, i64* %32, i64 0 
  %34 = load  i64, i64* %33 
  ret i64 %34 
}


define external ccc  i64 @"alias_type4.position.x<1>"(i64  %"$rec#0", i64  %"$field#0")    {
entry:
  %35 = trunc i64 16 to i32  
  %36 = tail call ccc  i8*  @wybe_malloc(i32  %35)  
  %37 = ptrtoint i8* %36 to i64 
  %38 = inttoptr i64 %37 to i8* 
  %39 = inttoptr i64 %"$rec#0" to i8* 
  %40 = trunc i64 16 to i32  
  tail call ccc  void  @llvm.memcpy.p0i8.p0i8.i32(i8*  %38, i8*  %39, i32  %40, i32  8, i1  0)  
  %41 = inttoptr i64 %37 to i64* 
  %42 = getelementptr  i64, i64* %41, i64 0 
  store  i64 %"$field#0", i64* %42 
  ret i64 %37 
}


define external ccc  i64 @"alias_type4.position.y<0>"(i64  %"$rec#0")    {
entry:
  %43 = add   i64 %"$rec#0", 8 
  %44 = inttoptr i64 %43 to i64* 
  %45 = getelementptr  i64, i64* %44, i64 0 
  %46 = load  i64, i64* %45 
  ret i64 %46 
}


define external ccc  i64 @"alias_type4.position.y<1>"(i64  %"$rec#0", i64  %"$field#0")    {
entry:
  %47 = trunc i64 16 to i32  
  %48 = tail call ccc  i8*  @wybe_malloc(i32  %47)  
  %49 = ptrtoint i8* %48 to i64 
  %50 = inttoptr i64 %49 to i8* 
  %51 = inttoptr i64 %"$rec#0" to i8* 
  %52 = trunc i64 16 to i32  
  tail call ccc  void  @llvm.memcpy.p0i8.p0i8.i32(i8*  %50, i8*  %51, i32  %52, i32  8, i1  0)  
  %53 = add   i64 %49, 8 
  %54 = inttoptr i64 %53 to i64* 
  %55 = getelementptr  i64, i64* %54, i64 0 
  store  i64 %"$field#0", i64* %55 
  ret i64 %49 
}
--------------------------------------------------
 Module alias_type4.posrec
  public submods  : 
  public types    : 
  public resources: 
  public procs    : alias_type4.posrec.=<0>
                    alias_type4.posrec.a<0>
                    alias_type4.posrec.a<1>
                    alias_type4.posrec.p<0>
                    alias_type4.posrec.p<1>
                    alias_type4.posrec.posrec<0>
                    alias_type4.posrec.posrec<1>
  imports         : use alias_type4
                    use wybe
  types           : 
  resources       : 
  procs           : 

= > public inline test (3 calls)
0: =($left#0:alias_type4.posrec, $right#0:alias_type4.posrec, ?$$#0:wybe.bool): AliasPairs: []
    foreign lpvm access($left#0:alias_type4.posrec, 0:wybe.int, ?$left$p#0:alias_type4.position)
    foreign lpvm access(~$left#0:alias_type4.posrec, 8:wybe.int, ?$left$a#0:wybe.int)
    foreign lpvm access($right#0:alias_type4.posrec, 0:wybe.int, ?$right$p#0:alias_type4.position)
    foreign lpvm access(~$right#0:alias_type4.posrec, 8:wybe.int, ?$right$a#0:wybe.int)
    alias_type4.position.position<1>(?tmp$10#0:wybe.int, ?tmp$11#0:wybe.int, ~$left$p#0:alias_type4.position)
    alias_type4.position.position<1>(?tmp$12#0:wybe.int, ?tmp$13#0:wybe.int, ~$right$p#0:alias_type4.position)
    wybe.int.=<0>(~tmp$10#0:wybe.int, ~tmp$12#0:wybe.int, ?tmp$14#0:wybe.bool)
    case ~tmp$14#0:wybe.bool of
    0:
        foreign llvm move(0:wybe.bool, ?$$#0:wybe.bool)

    1:
        wybe.int.=<0>(~tmp$11#0:wybe.int, ~tmp$13#0:wybe.int, ?tmp$2#0:wybe.bool)
        case ~tmp$2#0:wybe.bool of
        0:
            foreign llvm move(0:wybe.bool, ?$$#0:wybe.bool)

        1:
            foreign llvm icmp eq(~$left$a#0:wybe.int, ~$right$a#0:wybe.int, ?$$#0:wybe.bool) @wybe:nn:nn




a > public inline (0 calls)
0: a($rec#0:alias_type4.posrec, ?$#0:wybe.int): AliasPairs: []
    foreign lpvm access(~$rec#0:alias_type4.posrec, 8:wybe.int, ?$#0:wybe.int)
a > public inline (0 calls)
1: a($rec#0:alias_type4.posrec, ?$rec#1:alias_type4.posrec, $field#0:wybe.int): AliasPairs: []
    foreign lpvm mutate(~%$rec#0:alias_type4.posrec, ?%$rec#1:alias_type4.posrec, 8:wybe.int, 0:wybe.int, 16:wybe.int, 0:wybe.int, ~$field#0:wybe.int)


p > public inline (0 calls)
0: p($rec#0:alias_type4.posrec, ?$#0:alias_type4.position): AliasPairs: []
    foreign lpvm access(~$rec#0:alias_type4.posrec, 0:wybe.int, ?$#0:alias_type4.position)
p > public inline (0 calls)
1: p($rec#0:alias_type4.posrec, ?$rec#1:alias_type4.posrec, $field#0:alias_type4.position): AliasPairs: []
    foreign lpvm mutate noalias(~%$rec#0:alias_type4.posrec, ?%$rec#1:alias_type4.posrec, 0:wybe.int, 0:wybe.int, 16:wybe.int, 0:wybe.int, ~$field#0:alias_type4.position)


posrec > public inline (0 calls)
0: posrec(p#0:alias_type4.position, a#0:wybe.int, ?$#0:alias_type4.posrec): AliasPairs: []
    foreign lpvm alloc(16:wybe.int, ?$rec#0:alias_type4.posrec)
    foreign lpvm mutate(~%$rec#0:alias_type4.posrec, ?%$rec#1:alias_type4.posrec, 0:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, ~p#0:alias_type4.position)
    foreign lpvm mutate(~%$rec#1:alias_type4.posrec, ?%$#0:alias_type4.posrec, 8:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, ~a#0:wybe.int)
posrec > public inline (4 calls)
1: posrec(?p#0:alias_type4.position, ?a#0:wybe.int, $#0:alias_type4.posrec): AliasPairs: []
    foreign lpvm access($#0:alias_type4.posrec, 0:wybe.int, ?p#0:alias_type4.position)
    foreign lpvm access(~$#0:alias_type4.posrec, 8:wybe.int, ?a#0:wybe.int)

  LLVM code       :

; ModuleID = 'alias_type4.posrec'


 


declare external ccc  i1 @"wybe.int.=<0>"(i64, i64)    


declare external ccc  i8* @wybe_malloc(i32)    


declare external ccc  void @llvm.memcpy.p0i8.p0i8.i32(i8*, i8*, i32, i32, i1)    


define external ccc  i1 @"alias_type4.posrec.=<0>"(i64  %"$left#0", i64  %"$right#0")    {
entry:
  %1 = inttoptr i64 %"$left#0" to i64* 
  %2 = getelementptr  i64, i64* %1, i64 0 
  %3 = load  i64, i64* %2 
  %4 = add   i64 %"$left#0", 8 
  %5 = inttoptr i64 %4 to i64* 
  %6 = getelementptr  i64, i64* %5, i64 0 
  %7 = load  i64, i64* %6 
  %8 = inttoptr i64 %"$right#0" to i64* 
  %9 = getelementptr  i64, i64* %8, i64 0 
  %10 = load  i64, i64* %9 
  %11 = add   i64 %"$right#0", 8 
  %12 = inttoptr i64 %11 to i64* 
  %13 = getelementptr  i64, i64* %12, i64 0 
  %14 = load  i64, i64* %13 
  %15 = tail call ccc  {i64, i64}  @"alias_type4.position.position<1>"(i64  %3)  
  %16 = extractvalue {i64, i64} %15, 0 
  %17 = extractvalue {i64, i64} %15, 1 
  %18 = tail call ccc  {i64, i64}  @"alias_type4.position.position<1>"(i64  %10)  
  %19 = extractvalue {i64, i64} %18, 0 
  %20 = extractvalue {i64, i64} %18, 1 
  %"tmp$14#0" = tail call ccc  i1  @"wybe.int.=<0>"(i64  %16, i64  %19)  
  br i1 %"tmp$14#0", label %if.then, label %if.else 
if.then:
  %"tmp$2#0" = tail call ccc  i1  @"wybe.int.=<0>"(i64  %17, i64  %20)  
  br i1 %"tmp$2#0", label %if.then1, label %if.else1 
if.else:
  ret i1 0 
if.then1:
  %"$$#0" = icmp eq i64 %7, %14 
  ret i1 %"$$#0" 
if.else1:
  ret i1 %"tmp$2#0" 
}


define external ccc  i64 @"alias_type4.posrec.a<0>"(i64  %"$rec#0")    {
entry:
  %21 = add   i64 %"$rec#0", 8 
  %22 = inttoptr i64 %21 to i64* 
  %23 = getelementptr  i64, i64* %22, i64 0 
  %24 = load  i64, i64* %23 
  ret i64 %24 
}


define external ccc  i64 @"alias_type4.posrec.a<1>"(i64  %"$rec#0", i64  %"$field#0")    {
entry:
  %25 = trunc i64 16 to i32  
  %26 = tail call ccc  i8*  @wybe_malloc(i32  %25)  
  %27 = ptrtoint i8* %26 to i64 
  %28 = inttoptr i64 %27 to i8* 
  %29 = inttoptr i64 %"$rec#0" to i8* 
  %30 = trunc i64 16 to i32  
  tail call ccc  void  @llvm.memcpy.p0i8.p0i8.i32(i8*  %28, i8*  %29, i32  %30, i32  8, i1  0)  
  %31 = add   i64 %27, 8 
  %32 = inttoptr i64 %31 to i64* 
  %33 = getelementptr  i64, i64* %32, i64 0 
  store  i64 %"$field#0", i64* %33 
  ret i64 %27 
}


define external ccc  i64 @"alias_type4.posrec.p<0>"(i64  %"$rec#0")    {
entry:
  %34 = inttoptr i64 %"$rec#0" to i64* 
  %35 = getelementptr  i64, i64* %34, i64 0 
  %36 = load  i64, i64* %35 
  ret i64 %36 
}


define external ccc  i64 @"alias_type4.posrec.p<1>"(i64  %"$rec#0", i64  %"$field#0")    {
entry:
  %37 = trunc i64 16 to i32  
  %38 = tail call ccc  i8*  @wybe_malloc(i32  %37)  
  %39 = ptrtoint i8* %38 to i64 
  %40 = inttoptr i64 %39 to i8* 
  %41 = inttoptr i64 %"$rec#0" to i8* 
  %42 = trunc i64 16 to i32  
  tail call ccc  void  @llvm.memcpy.p0i8.p0i8.i32(i8*  %40, i8*  %41, i32  %42, i32  8, i1  0)  
  %43 = inttoptr i64 %39 to i64* 
  %44 = getelementptr  i64, i64* %43, i64 0 
  store  i64 %"$field#0", i64* %44 
  ret i64 %39 
}


define external ccc  i64 @"alias_type4.posrec.posrec<0>"(i64  %"p#0", i64  %"a#0")    {
entry:
  %45 = trunc i64 16 to i32  
  %46 = tail call ccc  i8*  @wybe_malloc(i32  %45)  
  %47 = ptrtoint i8* %46 to i64 
  %48 = inttoptr i64 %47 to i64* 
  %49 = getelementptr  i64, i64* %48, i64 0 
  store  i64 %"p#0", i64* %49 
  %50 = add   i64 %47, 8 
  %51 = inttoptr i64 %50 to i64* 
  %52 = getelementptr  i64, i64* %51, i64 0 
  store  i64 %"a#0", i64* %52 
  ret i64 %47 
}


define external ccc  {i64, i64} @"alias_type4.posrec.posrec<1>"(i64  %"$#0")    {
entry:
  %53 = inttoptr i64 %"$#0" to i64* 
  %54 = getelementptr  i64, i64* %53, i64 0 
  %55 = load  i64, i64* %54 
  %56 = add   i64 %"$#0", 8 
  %57 = inttoptr i64 %56 to i64* 
  %58 = getelementptr  i64, i64* %57, i64 0 
  %59 = load  i64, i64* %58 
  %60 = insertvalue {i64, i64} undef, i64 %55, 0 
  %61 = insertvalue {i64, i64} %60, i64 %59, 1 
  ret {i64, i64} %61 
}
