======================================================================
AFTER EVERYTHING:
 Module alias_type3
  public submods  : 
  public types    : position: (alias_type3.position,"pointer")
                    posrec: (alias_type3.posrec,"pointer")
  public resources: 
  public procs    : alias_type3.<0>
                    alias_type3.position.=<0>
                    alias_type3.position.position<0>
                    alias_type3.position.position<1>
                    alias_type3.position.x<0>
                    alias_type3.position.x<1>
                    alias_type3.position.y<0>
                    alias_type3.position.y<1>
                    alias_type3.posrec.=<0>
                    alias_type3.posrec.a<0>
                    alias_type3.posrec.a<1>
                    alias_type3.posrec.p<0>
                    alias_type3.posrec.p<1>
                    alias_type3.posrec.posrec<0>
                    alias_type3.posrec.posrec<1>
  imports         : public use alias_type3.position
                    public use alias_type3.posrec
                    use wybe
  types           : position/0 (pointer)  @alias_type3:2:8, posrec/0 (pointer)  @alias_type3:4:8
  resources       : 
  submodules      : alias_type3.position, alias_type3.posrec
  procs           : 

*main* > public (0 calls)
0: (argc#0:wybe.int, [?argc#0:wybe.int], argv#0:wybe.int, [?argv#0:wybe.int], exit_code#0:wybe.int, [?exit_code#0:wybe.int], io#0:phantom, ?io#2:phantom): AliasPairs: []
    foreign lpvm alloc(16:wybe.int, ?tmp$8#0:alias_type3.position)
    foreign lpvm mutate(~tmp$8#0:alias_type3.position, ?tmp$9#0:alias_type3.position, 16:wybe.int, 0:wybe.int, 1:wybe.int, 100:wybe.int)
    foreign lpvm mutate(~tmp$9#0:alias_type3.position, ?tmp$10#0:alias_type3.position, 16:wybe.int, 8:wybe.int, 1:wybe.int, 100:wybe.int)
    foreign lpvm alloc(16:wybe.int, ?tmp$15#0:alias_type3.posrec)
    foreign lpvm mutate(~tmp$15#0:alias_type3.posrec, ?tmp$16#0:alias_type3.posrec, 16:wybe.int, 0:wybe.int, 1:wybe.int, tmp$10#0:alias_type3.position)
    foreign lpvm mutate(~tmp$16#0:alias_type3.posrec, ?tmp$17#0:alias_type3.posrec, 16:wybe.int, 8:wybe.int, 1:wybe.int, 1:wybe.int)
    foreign lpvm alloc(16:wybe.int, ?tmp$22#0:alias_type3.position)
    foreign lpvm mutate(~tmp$22#0:alias_type3.position, ?tmp$23#0:alias_type3.position, 16:wybe.int, 0:wybe.int, 1:wybe.int, 2:wybe.int)
    foreign lpvm mutate(~tmp$23#0:alias_type3.position, ?tmp$24#0:alias_type3.position, 16:wybe.int, 8:wybe.int, 1:wybe.int, 2:wybe.int)
    foreign lpvm mutate noalias(~tmp$17#0:alias_type3.posrec, ?%rec#1:alias_type3.posrec, 16:wybe.int, 0:wybe.int, 0:wybe.int, ~tmp$24#0:alias_type3.position)
    foreign lpvm mutate noalias(~tmp$10#0:alias_type3.position, ?%pos#1:alias_type3.position, 16:wybe.int, 0:wybe.int, 1:wybe.int, 200:wybe.int)
    foreign lpvm access(~pos#1:alias_type3.position, 0:wybe.int, ?tmp$3#0:wybe.int)
    foreign c print_int(~tmp$3#0:wybe.int, ~#io#0:phantom, ?tmp$34#0:phantom) @wybe:nn:nn
    foreign c putchar('\n':wybe.char, ~tmp$34#0:phantom, ?#io#1:phantom) @wybe:nn:nn
    foreign lpvm access(~rec#1:alias_type3.posrec, 0:wybe.int, ?tmp$4#0:alias_type3.position)
    foreign lpvm access(~tmp$4#0:alias_type3.position, 0:wybe.int, ?tmp$5#0:wybe.int)
    foreign c print_int(~tmp$5#0:wybe.int, ~#io#1:phantom, ?tmp$39#0:phantom) @wybe:nn:nn
    foreign c putchar('\n':wybe.char, ~tmp$39#0:phantom, ?#io#2:phantom) @wybe:nn:nn

  LLVM code       :

; ModuleID = 'alias_type3'


 


declare external ccc  void @putchar(i8)    


declare external ccc  void @print_int(i64)    


declare external ccc  i8* @wybe_malloc(i32)    


declare external ccc  void @llvm.memcpy.p0i8.p0i8.i32(i8*, i8*, i32, i32, i1)    


define external ccc  void @"alias_type3.<0>"(i64  %"argc#0", i64  %"argv#0", i64  %"exit_code#0")    {
entry:
  %1 = tail call ccc  i8*  @wybe_malloc(i32  16)  
  %2 = bitcast i8* %1 to i64* 
  %3 = bitcast i64* %2 to i64* 
  %4 = getelementptr  i64, i64* %3, i64 0 
  store  i64 100, i64* %4 
  %5 = bitcast i64* %2 to i64* 
  %6 = getelementptr  i64, i64* %5, i64 1 
  store  i64 100, i64* %6 
  %7 = tail call ccc  i8*  @wybe_malloc(i32  16)  
  %8 = bitcast i8* %7 to i64* 
  %9 = bitcast i64* %8 to i64** 
  %10 = getelementptr  i64*, i64** %9, i64 0 
  store  i64* %2, i64** %10 
  %11 = bitcast i64* %8 to i64* 
  %12 = getelementptr  i64, i64* %11, i64 1 
  store  i64 1, i64* %12 
  %13 = tail call ccc  i8*  @wybe_malloc(i32  16)  
  %14 = bitcast i8* %13 to i64* 
  %15 = bitcast i64* %14 to i64* 
  %16 = getelementptr  i64, i64* %15, i64 0 
  store  i64 2, i64* %16 
  %17 = bitcast i64* %14 to i64* 
  %18 = getelementptr  i64, i64* %17, i64 1 
  store  i64 2, i64* %18 
  %19 = tail call ccc  i8*  @wybe_malloc(i32  16)  
  %20 = bitcast i8* %19 to i64* 
  %21 = bitcast i64* %20 to i8* 
  %22 = bitcast i64* %8 to i8* 
  tail call ccc  void  @llvm.memcpy.p0i8.p0i8.i32(i8*  %21, i8*  %22, i32  16, i32  8, i1  0)  
  %23 = bitcast i64* %20 to i64** 
  %24 = getelementptr  i64*, i64** %23, i64 0 
  store  i64* %14, i64** %24 
  %25 = bitcast i64* %2 to i64* 
  %26 = getelementptr  i64, i64* %25, i64 0 
  store  i64 200, i64* %26 
  %27 = bitcast i64* %2 to i64* 
  %28 = getelementptr  i64, i64* %27, i64 0 
  %29 = load  i64, i64* %28 
  tail call ccc  void  @print_int(i64  %29)  
  tail call ccc  void  @putchar(i8  10)  
  %30 = bitcast i64* %20 to i64** 
  %31 = getelementptr  i64*, i64** %30, i64 0 
  %32 = load  i64*, i64** %31 
  %33 = inttoptr i64* %32 to i64* 
  %34 = bitcast i64* %33 to i64* 
  %35 = getelementptr  i64, i64* %34, i64 0 
  %36 = load  i64, i64* %35 
  tail call ccc  void  @print_int(i64  %36)  
  tail call ccc  void  @putchar(i8  10)  
  ret void 
}
--------------------------------------------------
 Module alias_type3.position([])
  public submods  : 
  public types    : 
  public resources: 
  public procs    : alias_type3.position.=<0>
                    alias_type3.position.position<0>
                    alias_type3.position.position<1>
                    alias_type3.position.x<0>
                    alias_type3.position.x<1>
                    alias_type3.position.y<0>
                    alias_type3.position.y<1>
  imports         : use alias_type3
                    use wybe
  types           : 
  resources       : 
  procs           : 

= > public inline test (3 calls)
0: =($left#0:alias_type3.position, $right#0:alias_type3.position, ?$$#0:wybe.bool): AliasPairs: []
    foreign lpvm access($left#0:alias_type3.position, 0:wybe.int, ?$left$x#0:wybe.int)
    foreign lpvm access(~$left#0:alias_type3.position, 8:wybe.int, ?$left$y#0:wybe.int)
    foreign lpvm access($right#0:alias_type3.position, 0:wybe.int, ?$right$x#0:wybe.int)
    foreign lpvm access(~$right#0:alias_type3.position, 8:wybe.int, ?$right$y#0:wybe.int)
    foreign llvm icmp eq(~$left$x#0:wybe.int, ~$right$x#0:wybe.int, ?tmp$2#0:wybe.bool) @wybe:nn:nn
    case ~tmp$2#0:wybe.bool of
    0:
        foreign llvm move(0:wybe.bool, ?$$#0:wybe.bool)

    1:
        foreign llvm icmp eq(~$left$y#0:wybe.int, ~$right$y#0:wybe.int, ?$$#0:wybe.bool) @wybe:nn:nn



position > public inline (0 calls)
0: position(x#0:wybe.int, y#0:wybe.int, ?$#0:alias_type3.position): AliasPairs: []
    foreign lpvm alloc(16:wybe.int, ?$rec#0:alias_type3.position)
    foreign lpvm mutate(~%$rec#0:alias_type3.position, ?%$rec#1:alias_type3.position, 16:wybe.int, 0:wybe.int, 1:wybe.int, ~x#0:wybe.int)
    foreign lpvm mutate(~%$rec#1:alias_type3.position, ?%$#0:alias_type3.position, 16:wybe.int, 8:wybe.int, 1:wybe.int, ~y#0:wybe.int)
position > public inline (4 calls)
1: position(?x#0:wybe.int, ?y#0:wybe.int, $#0:alias_type3.position): AliasPairs: []
    foreign lpvm access($#0:alias_type3.position, 0:wybe.int, ?x#0:wybe.int)
    foreign lpvm access(~$#0:alias_type3.position, 8:wybe.int, ?y#0:wybe.int)


x > public inline (0 calls)
0: x($rec#0:alias_type3.position, ?$#0:wybe.int): AliasPairs: []
    foreign lpvm access(~$rec#0:alias_type3.position, 0:wybe.int, ?$#0:wybe.int)
x > public inline (0 calls)
1: x($rec#0:alias_type3.position, ?$rec#1:alias_type3.position, $field#0:wybe.int): AliasPairs: []
    foreign lpvm mutate noalias(~%$rec#0:alias_type3.position, ?%$rec#1:alias_type3.position, 16:wybe.int, 0:wybe.int, 0:wybe.int, ~$field#0:wybe.int)


y > public inline (0 calls)
0: y($rec#0:alias_type3.position, ?$#0:wybe.int): AliasPairs: []
    foreign lpvm access(~$rec#0:alias_type3.position, 8:wybe.int, ?$#0:wybe.int)
y > public inline (0 calls)
1: y($rec#0:alias_type3.position, ?$rec#1:alias_type3.position, $field#0:wybe.int): AliasPairs: []
    foreign lpvm mutate noalias(~%$rec#0:alias_type3.position, ?%$rec#1:alias_type3.position, 16:wybe.int, 8:wybe.int, 0:wybe.int, ~$field#0:wybe.int)

  LLVM code       :

; ModuleID = 'alias_type3.position'


 


declare external ccc  i8* @wybe_malloc(i32)    


declare external ccc  void @llvm.memcpy.p0i8.p0i8.i32(i8*, i8*, i32, i32, i1)    


define external ccc  i1 @"alias_type3.position.=<0>"(i64*  %"$left#0", i64*  %"$right#0")    {
entry:
  %1 = bitcast i64* %"$left#0" to i64* 
  %2 = getelementptr  i64, i64* %1, i64 0 
  %3 = load  i64, i64* %2 
  %4 = bitcast i64* %"$left#0" to i64* 
  %5 = getelementptr  i64, i64* %4, i64 1 
  %6 = load  i64, i64* %5 
  %7 = bitcast i64* %"$right#0" to i64* 
  %8 = getelementptr  i64, i64* %7, i64 0 
  %9 = load  i64, i64* %8 
  %10 = bitcast i64* %"$right#0" to i64* 
  %11 = getelementptr  i64, i64* %10, i64 1 
  %12 = load  i64, i64* %11 
  %"tmp$2#0" = icmp eq i64 %3, %9 
  br i1 %"tmp$2#0", label %if.then, label %if.else 
if.then:
  %"$$#0" = icmp eq i64 %6, %12 
  ret i1 %"$$#0" 
if.else:
  ret i1 0 
}


define external ccc  i64* @"alias_type3.position.position<0>"(i64  %"x#0", i64  %"y#0")    {
entry:
  %13 = tail call ccc  i8*  @wybe_malloc(i32  16)  
  %14 = bitcast i8* %13 to i64* 
  %15 = bitcast i64* %14 to i64* 
  %16 = getelementptr  i64, i64* %15, i64 0 
  store  i64 %"x#0", i64* %16 
  %17 = bitcast i64* %14 to i64* 
  %18 = getelementptr  i64, i64* %17, i64 1 
  store  i64 %"y#0", i64* %18 
  ret i64* %14 
}


define external ccc  {i64, i64} @"alias_type3.position.position<1>"(i64*  %"$#0")    {
entry:
  %19 = bitcast i64* %"$#0" to i64* 
  %20 = getelementptr  i64, i64* %19, i64 0 
  %21 = load  i64, i64* %20 
  %22 = bitcast i64* %"$#0" to i64* 
  %23 = getelementptr  i64, i64* %22, i64 1 
  %24 = load  i64, i64* %23 
  %25 = insertvalue {i64, i64} undef, i64 %21, 0 
  %26 = insertvalue {i64, i64} %25, i64 %24, 1 
  ret {i64, i64} %26 
}


define external ccc  i64 @"alias_type3.position.x<0>"(i64*  %"$rec#0")    {
entry:
  %27 = bitcast i64* %"$rec#0" to i64* 
  %28 = getelementptr  i64, i64* %27, i64 0 
  %29 = load  i64, i64* %28 
  ret i64 %29 
}


define external ccc  i64* @"alias_type3.position.x<1>"(i64*  %"$rec#0", i64  %"$field#0")    {
entry:
  %30 = tail call ccc  i8*  @wybe_malloc(i32  16)  
  %31 = bitcast i8* %30 to i64* 
  %32 = bitcast i64* %31 to i8* 
  %33 = bitcast i64* %"$rec#0" to i8* 
  tail call ccc  void  @llvm.memcpy.p0i8.p0i8.i32(i8*  %32, i8*  %33, i32  16, i32  8, i1  0)  
  %34 = bitcast i64* %31 to i64* 
  %35 = getelementptr  i64, i64* %34, i64 0 
  store  i64 %"$field#0", i64* %35 
  ret i64* %31 
}


define external ccc  i64 @"alias_type3.position.y<0>"(i64*  %"$rec#0")    {
entry:
  %36 = bitcast i64* %"$rec#0" to i64* 
  %37 = getelementptr  i64, i64* %36, i64 1 
  %38 = load  i64, i64* %37 
  ret i64 %38 
}


define external ccc  i64* @"alias_type3.position.y<1>"(i64*  %"$rec#0", i64  %"$field#0")    {
entry:
  %39 = tail call ccc  i8*  @wybe_malloc(i32  16)  
  %40 = bitcast i8* %39 to i64* 
  %41 = bitcast i64* %40 to i8* 
  %42 = bitcast i64* %"$rec#0" to i8* 
  tail call ccc  void  @llvm.memcpy.p0i8.p0i8.i32(i8*  %41, i8*  %42, i32  16, i32  8, i1  0)  
  %43 = bitcast i64* %40 to i64* 
  %44 = getelementptr  i64, i64* %43, i64 1 
  store  i64 %"$field#0", i64* %44 
  ret i64* %40 
}
--------------------------------------------------
 Module alias_type3.posrec([])
  public submods  : 
  public types    : 
  public resources: 
  public procs    : alias_type3.posrec.=<0>
                    alias_type3.posrec.a<0>
                    alias_type3.posrec.a<1>
                    alias_type3.posrec.p<0>
                    alias_type3.posrec.p<1>
                    alias_type3.posrec.posrec<0>
                    alias_type3.posrec.posrec<1>
  imports         : use alias_type3
                    use wybe
  types           : 
  resources       : 
  procs           : 

= > public inline test (3 calls)
0: =($left#0:alias_type3.posrec, $right#0:alias_type3.posrec, ?$$#0:wybe.bool): AliasPairs: []
    foreign lpvm access($left#0:alias_type3.posrec, 0:wybe.int, ?$left$p#0:alias_type3.position)
    foreign lpvm access(~$left#0:alias_type3.posrec, 8:wybe.int, ?$left$a#0:wybe.int)
    foreign lpvm access($right#0:alias_type3.posrec, 0:wybe.int, ?$right$p#0:alias_type3.position)
    foreign lpvm access(~$right#0:alias_type3.posrec, 8:wybe.int, ?$right$a#0:wybe.int)
    alias_type3.position.position<1>(?tmp$10#0:wybe.int, ?tmp$11#0:wybe.int, ~$left$p#0:alias_type3.position)
    alias_type3.position.position<1>(?tmp$12#0:wybe.int, ?tmp$13#0:wybe.int, ~$right$p#0:alias_type3.position)
    wybe.int.=<0>(~tmp$10#0:wybe.int, ~tmp$12#0:wybe.int, ?tmp$14#0:wybe.bool)
    case ~tmp$14#0:wybe.bool of
    0:
        foreign llvm move(0:wybe.bool, ?$$#0:wybe.bool)

    1:
        wybe.int.=<0>(~tmp$11#0:wybe.int, ~tmp$13#0:wybe.int, ?tmp$2#0:wybe.bool)
        case ~tmp$2#0:wybe.bool of
        0:
            foreign llvm move(0:wybe.bool, ?$$#0:wybe.bool)

        1:
            foreign llvm icmp eq(~$left$a#0:wybe.int, ~$right$a#0:wybe.int, ?$$#0:wybe.bool) @wybe:nn:nn




a > public inline (0 calls)
0: a($rec#0:alias_type3.posrec, ?$#0:wybe.int): AliasPairs: []
    foreign lpvm access(~$rec#0:alias_type3.posrec, 8:wybe.int, ?$#0:wybe.int)
a > public inline (0 calls)
1: a($rec#0:alias_type3.posrec, ?$rec#1:alias_type3.posrec, $field#0:wybe.int): AliasPairs: []
    foreign lpvm mutate(~%$rec#0:alias_type3.posrec, ?%$rec#1:alias_type3.posrec, 16:wybe.int, 8:wybe.int, 0:wybe.int, ~$field#0:wybe.int)


p > public inline (0 calls)
0: p($rec#0:alias_type3.posrec, ?$#0:alias_type3.position): AliasPairs: []
    foreign lpvm access(~$rec#0:alias_type3.posrec, 0:wybe.int, ?$#0:alias_type3.position)
p > public inline (0 calls)
1: p($rec#0:alias_type3.posrec, ?$rec#1:alias_type3.posrec, $field#0:alias_type3.position): AliasPairs: []
    foreign lpvm mutate noalias(~%$rec#0:alias_type3.posrec, ?%$rec#1:alias_type3.posrec, 16:wybe.int, 0:wybe.int, 0:wybe.int, ~$field#0:alias_type3.position)


posrec > public inline (0 calls)
0: posrec(p#0:alias_type3.position, a#0:wybe.int, ?$#0:alias_type3.posrec): AliasPairs: []
    foreign lpvm alloc(16:wybe.int, ?$rec#0:alias_type3.posrec)
    foreign lpvm mutate(~%$rec#0:alias_type3.posrec, ?%$rec#1:alias_type3.posrec, 16:wybe.int, 0:wybe.int, 1:wybe.int, ~p#0:alias_type3.position)
    foreign lpvm mutate(~%$rec#1:alias_type3.posrec, ?%$#0:alias_type3.posrec, 16:wybe.int, 8:wybe.int, 1:wybe.int, ~a#0:wybe.int)
posrec > public inline (4 calls)
1: posrec(?p#0:alias_type3.position, ?a#0:wybe.int, $#0:alias_type3.posrec): AliasPairs: []
    foreign lpvm access($#0:alias_type3.posrec, 0:wybe.int, ?p#0:alias_type3.position)
    foreign lpvm access(~$#0:alias_type3.posrec, 8:wybe.int, ?a#0:wybe.int)

  LLVM code       :

; ModuleID = 'alias_type3.posrec'


 


declare external ccc  i1 @"wybe.int.=<0>"(i64, i64)    


declare external ccc  i8* @wybe_malloc(i32)    


declare external ccc  void @llvm.memcpy.p0i8.p0i8.i32(i8*, i8*, i32, i32, i1)    


define external ccc  i1 @"alias_type3.posrec.=<0>"(i64*  %"$left#0", i64*  %"$right#0")    {
entry:
  %1 = bitcast i64* %"$left#0" to i64** 
  %2 = getelementptr  i64*, i64** %1, i64 0 
  %3 = load  i64*, i64** %2 
  %4 = inttoptr i64* %3 to i64* 
  %5 = bitcast i64* %"$left#0" to i64* 
  %6 = getelementptr  i64, i64* %5, i64 1 
  %7 = load  i64, i64* %6 
  %8 = bitcast i64* %"$right#0" to i64** 
  %9 = getelementptr  i64*, i64** %8, i64 0 
  %10 = load  i64*, i64** %9 
  %11 = inttoptr i64* %10 to i64* 
  %12 = bitcast i64* %"$right#0" to i64* 
  %13 = getelementptr  i64, i64* %12, i64 1 
  %14 = load  i64, i64* %13 
  %15 = tail call ccc  {i64, i64}  @"alias_type3.position.position<1>"(i64*  %4)  
  %16 = extractvalue {i64, i64} %15, 0 
  %17 = extractvalue {i64, i64} %15, 1 
  %18 = tail call ccc  {i64, i64}  @"alias_type3.position.position<1>"(i64*  %11)  
  %19 = extractvalue {i64, i64} %18, 0 
  %20 = extractvalue {i64, i64} %18, 1 
  %"tmp$14#0" = tail call ccc  i1  @"wybe.int.=<0>"(i64  %16, i64  %19)  
  br i1 %"tmp$14#0", label %if.then, label %if.else 
if.then:
  %"tmp$2#0" = tail call ccc  i1  @"wybe.int.=<0>"(i64  %17, i64  %20)  
  br i1 %"tmp$2#0", label %if.then1, label %if.else1 
if.else:
  ret i1 0 
if.then1:
  %"$$#0" = icmp eq i64 %7, %14 
  ret i1 %"$$#0" 
if.else1:
  ret i1 %"tmp$2#0" 
}


define external ccc  i64 @"alias_type3.posrec.a<0>"(i64*  %"$rec#0")    {
entry:
  %21 = bitcast i64* %"$rec#0" to i64* 
  %22 = getelementptr  i64, i64* %21, i64 1 
  %23 = load  i64, i64* %22 
  ret i64 %23 
}


define external ccc  i64* @"alias_type3.posrec.a<1>"(i64*  %"$rec#0", i64  %"$field#0")    {
entry:
  %24 = tail call ccc  i8*  @wybe_malloc(i32  16)  
  %25 = bitcast i8* %24 to i64* 
  %26 = bitcast i64* %25 to i8* 
  %27 = bitcast i64* %"$rec#0" to i8* 
  tail call ccc  void  @llvm.memcpy.p0i8.p0i8.i32(i8*  %26, i8*  %27, i32  16, i32  8, i1  0)  
  %28 = bitcast i64* %25 to i64* 
  %29 = getelementptr  i64, i64* %28, i64 1 
  store  i64 %"$field#0", i64* %29 
  ret i64* %25 
}


define external ccc  i64* @"alias_type3.posrec.p<0>"(i64*  %"$rec#0")    {
entry:
  %30 = bitcast i64* %"$rec#0" to i64** 
  %31 = getelementptr  i64*, i64** %30, i64 0 
  %32 = load  i64*, i64** %31 
  %33 = inttoptr i64* %32 to i64* 
  ret i64* %33 
}


define external ccc  i64* @"alias_type3.posrec.p<1>"(i64*  %"$rec#0", i64*  %"$field#0")    {
entry:
  %34 = tail call ccc  i8*  @wybe_malloc(i32  16)  
  %35 = bitcast i8* %34 to i64* 
  %36 = bitcast i64* %35 to i8* 
  %37 = bitcast i64* %"$rec#0" to i8* 
  tail call ccc  void  @llvm.memcpy.p0i8.p0i8.i32(i8*  %36, i8*  %37, i32  16, i32  8, i1  0)  
  %38 = bitcast i64* %35 to i64** 
  %39 = getelementptr  i64*, i64** %38, i64 0 
  store  i64* %"$field#0", i64** %39 
  ret i64* %35 
}


define external ccc  i64* @"alias_type3.posrec.posrec<0>"(i64*  %"p#0", i64  %"a#0")    {
entry:
  %40 = tail call ccc  i8*  @wybe_malloc(i32  16)  
  %41 = bitcast i8* %40 to i64* 
  %42 = bitcast i64* %41 to i64** 
  %43 = getelementptr  i64*, i64** %42, i64 0 
  store  i64* %"p#0", i64** %43 
  %44 = bitcast i64* %41 to i64* 
  %45 = getelementptr  i64, i64* %44, i64 1 
  store  i64 %"a#0", i64* %45 
  ret i64* %41 
}


define external ccc  {i64*, i64} @"alias_type3.posrec.posrec<1>"(i64*  %"$#0")    {
entry:
  %46 = bitcast i64* %"$#0" to i64** 
  %47 = getelementptr  i64*, i64** %46, i64 0 
  %48 = load  i64*, i64** %47 
  %49 = inttoptr i64* %48 to i64* 
  %50 = bitcast i64* %"$#0" to i64* 
  %51 = getelementptr  i64, i64* %50, i64 1 
  %52 = load  i64, i64* %51 
  %53 = insertvalue {i64*, i64} undef, i64* %49, 0 
  %54 = insertvalue {i64*, i64} %53, i64 %52, 1 
  ret {i64*, i64} %54 
}
