Public type list(t) is {type-list:1:8}
  Public ctor [] {type-list:2:12}
  Public ctor [|](head:t,tail:list(t)) {type-list:3:12}
end

Public func ++(x:list(t),y:list(t)):? {type-list:6:8} = if ==(x {type-list:7:8}, []() {type-list:7:13}) {type-list:7:8} then y {type-list:8:10} else [|](head(x {type-list:9:11}) {type-list:9:11}, ++(tail(x {type-list:9:18}) {type-list:9:18}, y {type-list:9:26}) {type-list:9:18}) {type-list:9:10} {type-list:7:5}

 Module type-list
  public submods  : list {type-list:1:8}
  public types    : 
  public resources: 
  public procs    : ++(x:list(t), y:list(t), ?$:?) <0> {type-list:6:8}
  imports         : 
  types           : 
  resources       : 
  procs           : ++:
proc ++(x:list(t), y:list(t), ?$:?) (id 0):  {type-list:6:8}
    [](?$tmp0:0) {type-list:7:13}
    ==(x:0, $tmp0:0, ?$tmp1:0) {type-list:7:8}
    case $tmp1:0 of {type-list:7:5}
      0:
        =(?$tmp2:0, y:0) {?}
      1:
        head(x:0, ?$tmp5:0) {type-list:9:11}
        tail(x:0, ?$tmp3:0) {type-list:9:18}
        ++($tmp3:0, y:0, ?$tmp4:0) {type-list:9:18}
        [|]($tmp5:0, $tmp4:0, ?$tmp6:0) {type-list:9:10}
        =(?$tmp2:0, $tmp6:0) {?}
    end
    =(?$:0, $tmp2:0) {?}

Submodules of type-list:
list: 
 Module type-list.list(["t"])
  public submods  : 
  public types    : list/1 {type-list:1:8}
  public resources: 
  public procs    : [](?$:list(t)) <0> {?}
                    [|](head:t, tail:list(t), ?$:list(t)) <0> {?}
                    head($rec:list(t), ?$rec:list(t), $field:t) <1> {?}
                    head($rec:list(t), ?$field:t) <0> {?}
                    tail($rec:list(t), ?$rec:list(t), $field:list(t)) <1> {?}
                    tail($rec:list(t), ?$field:list(t)) <0> {?}
  imports         : 
  types           : list/1 {type-list:1:8}
  resources       : 
  procs           : []:
proc [](?$:list(t)) (id 0):  {?}
    $alloc([]:0, ?$tmp0:0) {?}
    =(?$:0, $tmp0:0) {?}
                    [|]:
proc [|](head:t, tail:list(t), ?$:list(t)) (id 0):  {?}
    $alloc([|]:0, ?$tmp1:0) {?}
    update$head(head:0, $tmp1:0, ?$tmp2:0) {?}
    update$tail(tail:0, $tmp2:0, ?$tmp3:0) {?}
    =(?$:0, $tmp3:0) {?}
                    head:
proc head($rec:list(t), ?$field:t) (id 0):  {?}
    foreign  access([|]:0, $rec:0, ?$field:0) {?}
proc head($rec:list(t), ?$rec:list(t), $field:t) (id 1):  {?}
    foreign  mutate([|]:0, $rec:0, ?$rec:0, $field:0) {?}
                    tail:
proc tail($rec:list(t), ?$field:list(t)) (id 0):  {?}
    foreign  access([|]:0, $rec:0, ?$field:0) {?}
proc tail($rec:list(t), ?$rec:list(t), $field:list(t)) (id 1):  {?}
    foreign  mutate([|]:0, $rec:0, ?$rec:0, $field:0) {?}

Submodules of type-list.list:

