[FuncDecl Public (FnProto "quad" [Param "x" (TypeSpec "int" []) ParamIn]) (TypeSpec "int" []) (Placed (Where [Placed (ProcCall "=" [ProcArg (Placed (Var "d") "test-cases/func-let.frg" (line 1, column 36)) ParamOut,ProcArg (Placed (Fncall "+" [Placed (Var "x") "test-cases/func-let.frg" (line 1, column 40),Placed (Var "x") "test-cases/func-let.frg" (line 1, column 42)]) "test-cases/func-let.frg" (line 1, column 40)) ParamIn]) "test-cases/func-let.frg" (line 1, column 36)] (Placed (Fncall "+" [Placed (Var "d") "test-cases/func-let.frg" (line 1, column 47),Placed (Var "d") "test-cases/func-let.frg" (line 1, column 49)]) "test-cases/func-let.frg" (line 1, column 47))) "test-cases/func-let.frg" (line 1, column 31)) (Just "test-cases/func-let.frg" (line 1, column 8))]
Module {modImports = fromList [], pubTypes = fromList [], pubResources = fromList [], pubProcs = fromList ["quad"], modTypes = fromList [], modResources = fromList [], modProcs = fromList [("quad",[ProcDef 1 (ProcProto "quad" [Param "x" (TypeSpec "int" []) ParamIn,Param "$" (TypeSpec "int" []) ParamOut]) [Unplaced (ProcCall "=" [ProcArg (Unplaced (Var "$")) ParamOut,ProcArg (Placed (Where [Placed (ProcCall "=" [ProcArg (Placed (Var "d") "test-cases/func-let.frg" (line 1, column 36)) ParamOut,ProcArg (Placed (Fncall "+" [Placed (Var "x") "test-cases/func-let.frg" (line 1, column 40),Placed (Var "x") "test-cases/func-let.frg" (line 1, column 42)]) "test-cases/func-let.frg" (line 1, column 40)) ParamIn]) "test-cases/func-let.frg" (line 1, column 36)] (Placed (Fncall "+" [Placed (Var "d") "test-cases/func-let.frg" (line 1, column 47),Placed (Var "d") "test-cases/func-let.frg" (line 1, column 49)]) "test-cases/func-let.frg" (line 1, column 47))) "test-cases/func-let.frg" (line 1, column 31)) ParamIn])] (Just "test-cases/func-let.frg" (line 1, column 8))])], procCount = 1}
