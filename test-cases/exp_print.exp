======================================================================
AFTER EVERYTHING:
 Module exp_print
  public submods  : 
  public types    : 
  public resources: 
  public procs    : exp_print.<0>
  imports         : use wybe
  types           : 
  resources       : 
  procs           : 

*main* > public (0 calls)
0: (wybe.io$io#0:wybe.phantom, ?wybe.io$io#6:wybe.phantom): AliasPairs: []
    foreign c print_string("print(x:string) creates a newline already":wybe.string, ~#wybe.io$io#0:wybe.phantom, ?#wybe.io$io#1:wybe.phantom) @wybe:92:41
    foreign c print_string("println(x:string) generates an extra newline?":wybe.string, ~#wybe.io$io#1:wybe.phantom, ?tmp$4#0:wybe.phantom) @wybe:92:41
    foreign c putchar('\n':wybe.char, ~tmp$4#0:wybe.phantom, ?#wybe.io$io#2:wybe.phantom) @wybe:78:28
    foreign c print_string("println(x:string) generates an extra newline?":wybe.string, ~#wybe.io$io#2:wybe.phantom, ?tmp$7#0:wybe.phantom) @wybe:92:41
    foreign c putchar('\n':wybe.char, ~tmp$7#0:wybe.phantom, ?#wybe.io$io#3:wybe.phantom) @wybe:78:28
    foreign c putchar('c':wybe.char, ~#wybe.io$io#3:wybe.phantom, ?tmp$10#0:wybe.phantom) @wybe:88:39
    foreign c putchar('\n':wybe.char, ~tmp$10#0:wybe.phantom, ?#wybe.io$io#4:wybe.phantom) @wybe:78:28
    foreign c print_int(1:wybe.int, ~#wybe.io$io#4:wybe.phantom, ?tmp$13#0:wybe.phantom) @wybe:80:38
    foreign c putchar('\n':wybe.char, ~tmp$13#0:wybe.phantom, ?#wybe.io$io#5:wybe.phantom) @wybe:78:28
    foreign c print_int(1:wybe.int, ~#wybe.io$io#5:wybe.phantom, ?#wybe.io$io#6:wybe.phantom) @wybe:80:38
exp_print
======================================================================
AFTER LLVM IR:

; ModuleID = 'exp_print'
source_filename = "test-cases/exp_print.wybe"

@exp_print.3 = constant [46 x i8] c"println(x:string) generates an extra newline?\00"
@exp_print.2 = constant [46 x i8] c"println(x:string) generates an extra newline?\00"
@exp_print.1 = constant [42 x i8] c"print(x:string) creates a newline already\00"

declare void @print_int(i64) local_unnamed_addr

declare void @putchar(i8) local_unnamed_addr

declare void @print_string(i8*) local_unnamed_addr

define i32 @exp_print.main() local_unnamed_addr {
entry:
  tail call void @print_string(i8* getelementptr inbounds ([42 x i8], [42 x i8]* @exp_print.1, i64 0, i64 0))
  tail call void @print_string(i8* getelementptr inbounds ([46 x i8], [46 x i8]* @exp_print.2, i64 0, i64 0))
  tail call void @putchar(i8 10)
  tail call void @print_string(i8* getelementptr inbounds ([46 x i8], [46 x i8]* @exp_print.3, i64 0, i64 0))
  tail call void @putchar(i8 10)
  tail call void @putchar(i8 99)
  tail call void @putchar(i8 10)
  tail call void @print_int(i64 1)
  tail call void @putchar(i8 10)
  tail call void @print_int(i64 1)
  ret i32 0
}

