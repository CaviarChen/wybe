======================================================================
AFTER EVERYTHING:
 Module test_loop
  public submods  : 
  public types    : int_seq: (test_loop.int_seq,Just address)
  public resources: 
  public procs    : test_loop.<0>
                    test_loop.seq_next<0>
                    test_loop.test_loop<0>
                    test_loop.int_seq./=<0>
                    test_loop.int_seq.=<0>
                    test_loop.int_seq.high<0>
                    test_loop.int_seq.high<1>
                    test_loop.int_seq.int_seq<0>
                    test_loop.int_seq.int_seq<1>
                    test_loop.int_seq.low<0>
                    test_loop.int_seq.low<1>
                    test_loop.int_seq.step<0>
                    test_loop.int_seq.step<1>
  imports         : public use test_loop.int_seq
                    use wybe
  types           : int_seq/public  is address { int_seq(low:int, step:int, high:int) @test_loop:3:24  }  @test_loop:3:5
  resources       : 
  submodules      : test_loop.int_seq
  procs           : 

*main* > public (0 calls)
0: (argc#0:wybe.int, [?argc#0:wybe.int], argv#0:wybe.int, [?argv#0:wybe.int], exit_code#0:wybe.int, [?exit_code#0:wybe.int], io#0:wybe.phantom, ?io#1:wybe.phantom):
 AliasPairs: []
 InterestingCallProperties: []
 MultiSpeczDepInfo: [(5,(test_loop.gen$1<0>,fromList [NonAliasedParamCond 0 []]))]
    foreign lpvm alloc(24:wybe.int, ?tmp$5#0:test_loop.int_seq)
    foreign lpvm mutate(~tmp$5#0:test_loop.int_seq, ?tmp$6#0:test_loop.int_seq, 0:wybe.int, 1:wybe.int, 24:wybe.int, 0:wybe.int, 1:wybe.int)
    foreign lpvm mutate(~tmp$6#0:test_loop.int_seq, ?tmp$7#0:test_loop.int_seq, 8:wybe.int, 1:wybe.int, 24:wybe.int, 0:wybe.int, 2:wybe.int)
    foreign lpvm mutate(~tmp$7#0:test_loop.int_seq, ?tmp$8#0:test_loop.int_seq, 16:wybe.int, 1:wybe.int, 24:wybe.int, 0:wybe.int, 10:wybe.int)
    test_loop.gen$1<0>[04d1467a4d](~tmp$8#0:test_loop.int_seq, ?i#0:wybe.int, ?tmp$1#0:wybe.bool) #5 @test_loop:13:5
    case ~tmp$1#0:wybe.bool of
    0:
        foreign c print_string("nup!":wybe.string, ~#io#0:wybe.phantom, ?tmp$12#0:wybe.phantom) @wybe:nn:nn
        foreign c putchar('\n':wybe.char, ~tmp$12#0:wybe.phantom, ?#io#1:wybe.phantom) @wybe:nn:nn

    1:
        foreign c print_int(~i#0:wybe.int, ~#io#0:wybe.phantom, ?tmp$12#0:wybe.phantom) @wybe:nn:nn
        foreign c putchar('\n':wybe.char, ~tmp$12#0:wybe.phantom, ?#io#1:wybe.phantom) @wybe:nn:nn



gen$1 > {test} (2 calls)
0: gen$1(seq#0:test_loop.int_seq, ?i#0:wybe.int, ?$$#0:wybe.bool):
 AliasPairs: []
 InterestingCallProperties: [InterestingUnaliased 0]
 MultiSpeczDepInfo: [(0,(test_loop.seq_next<0>,fromList [NonAliasedParamCond 0 [0]]))]
    test_loop.seq_next<0>(~%seq#0:test_loop.int_seq, ?%seq#1:test_loop.int_seq, ?tmp$0#0:wybe.int, ?tmp$7#0:wybe.bool) #0 @test_loop:14:14
    case ~tmp$7#0:wybe.bool of
    0:
        foreign llvm move(0:wybe.bool, ?$$#0:wybe.bool)

    1:
        foreign llvm move(tmp$0#0:wybe.int, ?i#0:wybe.int) @test_loop:14:9
        foreign llvm srem(tmp$0#0:wybe.int, 5:wybe.int, ?tmp$1#0:wybe.int) @wybe:nn:nn
        foreign llvm icmp_eq(~tmp$1#0:wybe.int, 0:wybe.int, ?tmp$8#0:wybe.bool) @wybe:nn:nn
        case ~tmp$8#0:wybe.bool of
        0:
            test_loop.gen$2<0>(~tmp$0#0:wybe.int, ~seq#1:test_loop.int_seq, _:wybe.int, ?i#1:wybe.int, ?$$#0:wybe.bool) #3

        1:
            foreign llvm move(1:wybe.bool, ?$$#0:wybe.bool)


 [04d1467a4d] [NonAliasedParam 0] :
    test_loop.seq_next<0>[04d1467a4d](~%seq#0:test_loop.int_seq, ?%seq#1:test_loop.int_seq, ?tmp$0#0:wybe.int, ?tmp$7#0:wybe.bool) #0 @test_loop:14:14
    case ~tmp$7#0:wybe.bool of
    0:
        foreign llvm move(0:wybe.bool, ?$$#0:wybe.bool)

    1:
        foreign llvm move(tmp$0#0:wybe.int, ?i#0:wybe.int) @test_loop:14:9
        foreign llvm srem(tmp$0#0:wybe.int, 5:wybe.int, ?tmp$1#0:wybe.int) @wybe:nn:nn
        foreign llvm icmp_eq(~tmp$1#0:wybe.int, 0:wybe.int, ?tmp$8#0:wybe.bool) @wybe:nn:nn
        case ~tmp$8#0:wybe.bool of
        0:
            test_loop.gen$2<0>(~tmp$0#0:wybe.int, ~seq#1:test_loop.int_seq, _:wybe.int, ?i#1:wybe.int, ?$$#0:wybe.bool) #3

        1:
            foreign llvm move(1:wybe.bool, ?$$#0:wybe.bool)




gen$2 > {inline} (1 calls)
0: gen$2(i#0:wybe.int, seq#0:test_loop.int_seq, [tmp$0#0:wybe.int], ?i#1:wybe.int, ?$$#0:wybe.bool):
 AliasPairs: []
 InterestingCallProperties: []
    foreign lpvm access(seq#0:test_loop.int_seq, 8:wybe.int, 24:wybe.int, 0:wybe.int, ?tmp$4#0:wybe.int)
    foreign llvm add(~i#0:wybe.int, tmp$4#0:wybe.int, ?tmp$3#0:wybe.int) @wybe:nn:nn
    foreign lpvm access(~seq#0:test_loop.int_seq, 16:wybe.int, 24:wybe.int, 0:wybe.int, ?tmp$6#0:wybe.int)
    foreign lpvm alloc(24:wybe.int, ?tmp$16#0:test_loop.int_seq)
    foreign lpvm mutate(~tmp$16#0:test_loop.int_seq, ?tmp$17#0:test_loop.int_seq, 0:wybe.int, 1:wybe.int, 24:wybe.int, 0:wybe.int, ~tmp$3#0:wybe.int)
    foreign lpvm mutate(~tmp$17#0:test_loop.int_seq, ?tmp$18#0:test_loop.int_seq, 8:wybe.int, 1:wybe.int, 24:wybe.int, 0:wybe.int, ~tmp$4#0:wybe.int)
    foreign lpvm mutate(~tmp$18#0:test_loop.int_seq, ?tmp$19#0:test_loop.int_seq, 16:wybe.int, 1:wybe.int, 24:wybe.int, 0:wybe.int, ~tmp$6#0:wybe.int)
    test_loop.gen$1<0>(~tmp$19#0:test_loop.int_seq, ?i#1:wybe.int, ?$$#0:wybe.bool) #5 @test_loop:13:5


seq_next > public (5 calls)
0: seq_next(seq#0:test_loop.int_seq, ?seq#1:test_loop.int_seq, ?$#0:wybe.int, ?$$#0:wybe.bool):
 AliasPairs: [(seq#0,seq#1)]
 InterestingCallProperties: [InterestingUnaliased 0]
    foreign lpvm access(seq#0:test_loop.int_seq, 0:wybe.int, 24:wybe.int, 0:wybe.int, ?elt#0:wybe.int)
    foreign lpvm access(seq#0:test_loop.int_seq, 8:wybe.int, 24:wybe.int, 0:wybe.int, ?step#0:wybe.int)
    foreign lpvm access(seq#0:test_loop.int_seq, 16:wybe.int, 24:wybe.int, 0:wybe.int, ?limit#0:wybe.int)
    foreign llvm icmp_sle(elt#0:wybe.int, ~limit#0:wybe.int, ?tmp$1#0:wybe.bool) @wybe:nn:nn
    case ~tmp$1#0:wybe.bool of
    0:
        foreign llvm move(0:wybe.bool, ?$$#0:wybe.bool)
        foreign llvm move(~seq#0:test_loop.int_seq, ?seq#1:test_loop.int_seq)

    1:
        foreign llvm add(elt#0:wybe.int, ~step#0:wybe.int, ?tmp$0#0:wybe.int) @wybe:nn:nn
        foreign lpvm mutate noalias(~%seq#0:test_loop.int_seq, ?%seq#1:test_loop.int_seq, 0:wybe.int, 0:wybe.int, 24:wybe.int, 0:wybe.int, ~tmp$0#0:wybe.int)
        foreign llvm move(~elt#0:wybe.int, ?$#0:wybe.int) @test_loop:5:5
        foreign llvm move(1:wybe.bool, ?$$#0:wybe.bool)

 [04d1467a4d] [NonAliasedParam 0] :
    foreign lpvm access(seq#0:test_loop.int_seq, 0:wybe.int, 24:wybe.int, 0:wybe.int, ?elt#0:wybe.int)
    foreign lpvm access(seq#0:test_loop.int_seq, 8:wybe.int, 24:wybe.int, 0:wybe.int, ?step#0:wybe.int)
    foreign lpvm access(seq#0:test_loop.int_seq, 16:wybe.int, 24:wybe.int, 0:wybe.int, ?limit#0:wybe.int)
    foreign llvm icmp_sle(elt#0:wybe.int, ~limit#0:wybe.int, ?tmp$1#0:wybe.bool) @wybe:nn:nn
    case ~tmp$1#0:wybe.bool of
    0:
        foreign llvm move(0:wybe.bool, ?$$#0:wybe.bool)
        foreign llvm move(~seq#0:test_loop.int_seq, ?seq#1:test_loop.int_seq)

    1:
        foreign llvm add(elt#0:wybe.int, ~step#0:wybe.int, ?tmp$0#0:wybe.int) @wybe:nn:nn
        foreign lpvm mutate noalias(~%seq#0:test_loop.int_seq, ?%seq#1:test_loop.int_seq, 0:wybe.int, 1:wybe.int, 24:wybe.int, 0:wybe.int, ~tmp$0#0:wybe.int)
        foreign llvm move(~elt#0:wybe.int, ?$#0:wybe.int) @test_loop:5:5
        foreign llvm move(1:wybe.bool, ?$$#0:wybe.bool)



test_loop > public {inline} (3 calls)
0: test_loop(seq#0:test_loop.int_seq, ?i#0:wybe.int, ?$$#0:wybe.bool):
 AliasPairs: []
 InterestingCallProperties: []
    test_loop.gen$1<0>(~seq#0:test_loop.int_seq, ?i#0:wybe.int, ?$$#0:wybe.bool) #0 @test_loop:13:5

  LLVM code       :

; ModuleID = 'test_loop'


 


declare external ccc  void @putchar(i8)    


declare external ccc  void @print_string(i64)    


declare external ccc  void @print_int(i64)    


@test_loop.15 =    constant [5 x i8] c"nup!\00"


declare external ccc  i8* @wybe_malloc(i32)    


declare external ccc  void @llvm.memcpy.p0i8.p0i8.i32(i8*, i8*, i32, i32, i1)    


define external fastcc  void @"test_loop.<0>"(i64  %"argc#0", i64  %"argv#0", i64  %"exit_code#0")    {
entry:
  %1 = trunc i64 24 to i32  
  %2 = tail call ccc  i8*  @wybe_malloc(i32  %1)  
  %3 = ptrtoint i8* %2 to i64 
  %4 = inttoptr i64 %3 to i64* 
  %5 = getelementptr  i64, i64* %4, i64 0 
  store  i64 1, i64* %5 
  %6 = add   i64 %3, 8 
  %7 = inttoptr i64 %6 to i64* 
  %8 = getelementptr  i64, i64* %7, i64 0 
  store  i64 2, i64* %8 
  %9 = add   i64 %3, 16 
  %10 = inttoptr i64 %9 to i64* 
  %11 = getelementptr  i64, i64* %10, i64 0 
  store  i64 10, i64* %11 
  %12 = tail call fastcc  {i64, i1}  @"test_loop.gen$1<0>[04d1467a4d]"(i64  %3)  
  %13 = extractvalue {i64, i1} %12, 0 
  %14 = extractvalue {i64, i1} %12, 1 
  br i1 %14, label %if.then, label %if.else 
if.then:
  tail call ccc  void  @print_int(i64  %13)  
  tail call ccc  void  @putchar(i8  10)  
  ret void 
if.else:
  %16 = ptrtoint i8* getelementptr inbounds ([5 x i8], [5 x i8]* @test_loop.15, i32 0, i32 0) to i64 
  tail call ccc  void  @print_string(i64  %16)  
  tail call ccc  void  @putchar(i8  10)  
  ret void 
}


define external fastcc  {i64, i1} @"test_loop.gen$1<0>"(i64  %"seq#0")    {
entry:
  %17 = tail call fastcc  {i64, i64, i1}  @"test_loop.seq_next<0>"(i64  %"seq#0")  
  %18 = extractvalue {i64, i64, i1} %17, 0 
  %19 = extractvalue {i64, i64, i1} %17, 1 
  %20 = extractvalue {i64, i64, i1} %17, 2 
  br i1 %20, label %if.then, label %if.else 
if.then:
  %"2$tmp$1#0" = srem i64 %19, 5 
  %"2$tmp$8#0" = icmp eq i64 %"2$tmp$1#0", 0 
  br i1 %"2$tmp$8#0", label %if.then1, label %if.else1 
if.else:
  %28 = insertvalue {i64, i1} undef, i64 undef, 0 
  %29 = insertvalue {i64, i1} %28, i1 0, 1 
  ret {i64, i1} %29 
if.then1:
  %21 = insertvalue {i64, i1} undef, i64 %19, 0 
  %22 = insertvalue {i64, i1} %21, i1 1, 1 
  ret {i64, i1} %22 
if.else1:
  %23 = tail call fastcc  {i64, i1}  @"test_loop.gen$2<0>"(i64  %19, i64  %18)  
  %24 = extractvalue {i64, i1} %23, 0 
  %25 = extractvalue {i64, i1} %23, 1 
  %26 = insertvalue {i64, i1} undef, i64 %19, 0 
  %27 = insertvalue {i64, i1} %26, i1 %25, 1 
  ret {i64, i1} %27 
}


define external fastcc  {i64, i1} @"test_loop.gen$1<0>[04d1467a4d]"(i64  %"seq#0")    {
entry:
  %30 = tail call fastcc  {i64, i64, i1}  @"test_loop.seq_next<0>[04d1467a4d]"(i64  %"seq#0")  
  %31 = extractvalue {i64, i64, i1} %30, 0 
  %32 = extractvalue {i64, i64, i1} %30, 1 
  %33 = extractvalue {i64, i64, i1} %30, 2 
  br i1 %33, label %if.then, label %if.else 
if.then:
  %"2$tmp$1#0" = srem i64 %32, 5 
  %"2$tmp$8#0" = icmp eq i64 %"2$tmp$1#0", 0 
  br i1 %"2$tmp$8#0", label %if.then1, label %if.else1 
if.else:
  %41 = insertvalue {i64, i1} undef, i64 undef, 0 
  %42 = insertvalue {i64, i1} %41, i1 0, 1 
  ret {i64, i1} %42 
if.then1:
  %34 = insertvalue {i64, i1} undef, i64 %32, 0 
  %35 = insertvalue {i64, i1} %34, i1 1, 1 
  ret {i64, i1} %35 
if.else1:
  %36 = tail call fastcc  {i64, i1}  @"test_loop.gen$2<0>"(i64  %32, i64  %31)  
  %37 = extractvalue {i64, i1} %36, 0 
  %38 = extractvalue {i64, i1} %36, 1 
  %39 = insertvalue {i64, i1} undef, i64 %32, 0 
  %40 = insertvalue {i64, i1} %39, i1 %38, 1 
  ret {i64, i1} %40 
}


define external fastcc  {i64, i1} @"test_loop.gen$2<0>"(i64  %"i#0", i64  %"seq#0")    {
entry:
  %43 = add   i64 %"seq#0", 8 
  %44 = inttoptr i64 %43 to i64* 
  %45 = getelementptr  i64, i64* %44, i64 0 
  %46 = load  i64, i64* %45 
  %"1$tmp$3#0" = add   i64 %"i#0", %46 
  %47 = add   i64 %"seq#0", 16 
  %48 = inttoptr i64 %47 to i64* 
  %49 = getelementptr  i64, i64* %48, i64 0 
  %50 = load  i64, i64* %49 
  %51 = trunc i64 24 to i32  
  %52 = tail call ccc  i8*  @wybe_malloc(i32  %51)  
  %53 = ptrtoint i8* %52 to i64 
  %54 = inttoptr i64 %53 to i64* 
  %55 = getelementptr  i64, i64* %54, i64 0 
  store  i64 %"1$tmp$3#0", i64* %55 
  %56 = add   i64 %53, 8 
  %57 = inttoptr i64 %56 to i64* 
  %58 = getelementptr  i64, i64* %57, i64 0 
  store  i64 %46, i64* %58 
  %59 = add   i64 %53, 16 
  %60 = inttoptr i64 %59 to i64* 
  %61 = getelementptr  i64, i64* %60, i64 0 
  store  i64 %50, i64* %61 
  %62 = tail call fastcc  {i64, i1}  @"test_loop.gen$1<0>"(i64  %53)  
  %63 = extractvalue {i64, i1} %62, 0 
  %64 = extractvalue {i64, i1} %62, 1 
  %65 = insertvalue {i64, i1} undef, i64 %63, 0 
  %66 = insertvalue {i64, i1} %65, i1 %64, 1 
  ret {i64, i1} %66 
}


define external fastcc  {i64, i64, i1} @"test_loop.seq_next<0>"(i64  %"seq#0")    {
entry:
  %67 = inttoptr i64 %"seq#0" to i64* 
  %68 = getelementptr  i64, i64* %67, i64 0 
  %69 = load  i64, i64* %68 
  %70 = add   i64 %"seq#0", 8 
  %71 = inttoptr i64 %70 to i64* 
  %72 = getelementptr  i64, i64* %71, i64 0 
  %73 = load  i64, i64* %72 
  %74 = add   i64 %"seq#0", 16 
  %75 = inttoptr i64 %74 to i64* 
  %76 = getelementptr  i64, i64* %75, i64 0 
  %77 = load  i64, i64* %76 
  %"1$tmp$1#0" = icmp sle i64 %69, %77 
  br i1 %"1$tmp$1#0", label %if.then, label %if.else 
if.then:
  %"2$tmp$0#0" = add   i64 %69, %73 
  %78 = trunc i64 24 to i32  
  %79 = tail call ccc  i8*  @wybe_malloc(i32  %78)  
  %80 = ptrtoint i8* %79 to i64 
  %81 = inttoptr i64 %80 to i8* 
  %82 = inttoptr i64 %"seq#0" to i8* 
  %83 = trunc i64 24 to i32  
  tail call ccc  void  @llvm.memcpy.p0i8.p0i8.i32(i8*  %81, i8*  %82, i32  %83, i32  8, i1  0)  
  %84 = inttoptr i64 %80 to i64* 
  %85 = getelementptr  i64, i64* %84, i64 0 
  store  i64 %"2$tmp$0#0", i64* %85 
  %86 = insertvalue {i64, i64, i1} undef, i64 %80, 0 
  %87 = insertvalue {i64, i64, i1} %86, i64 %69, 1 
  %88 = insertvalue {i64, i64, i1} %87, i1 1, 2 
  ret {i64, i64, i1} %88 
if.else:
  %89 = insertvalue {i64, i64, i1} undef, i64 %"seq#0", 0 
  %90 = insertvalue {i64, i64, i1} %89, i64 undef, 1 
  %91 = insertvalue {i64, i64, i1} %90, i1 0, 2 
  ret {i64, i64, i1} %91 
}


define external fastcc  {i64, i64, i1} @"test_loop.seq_next<0>[04d1467a4d]"(i64  %"seq#0")    {
entry:
  %92 = inttoptr i64 %"seq#0" to i64* 
  %93 = getelementptr  i64, i64* %92, i64 0 
  %94 = load  i64, i64* %93 
  %95 = add   i64 %"seq#0", 8 
  %96 = inttoptr i64 %95 to i64* 
  %97 = getelementptr  i64, i64* %96, i64 0 
  %98 = load  i64, i64* %97 
  %99 = add   i64 %"seq#0", 16 
  %100 = inttoptr i64 %99 to i64* 
  %101 = getelementptr  i64, i64* %100, i64 0 
  %102 = load  i64, i64* %101 
  %"1$tmp$1#0" = icmp sle i64 %94, %102 
  br i1 %"1$tmp$1#0", label %if.then, label %if.else 
if.then:
  %"2$tmp$0#0" = add   i64 %94, %98 
  %103 = inttoptr i64 %"seq#0" to i64* 
  %104 = getelementptr  i64, i64* %103, i64 0 
  store  i64 %"2$tmp$0#0", i64* %104 
  %105 = insertvalue {i64, i64, i1} undef, i64 %"seq#0", 0 
  %106 = insertvalue {i64, i64, i1} %105, i64 %94, 1 
  %107 = insertvalue {i64, i64, i1} %106, i1 1, 2 
  ret {i64, i64, i1} %107 
if.else:
  %108 = insertvalue {i64, i64, i1} undef, i64 %"seq#0", 0 
  %109 = insertvalue {i64, i64, i1} %108, i64 undef, 1 
  %110 = insertvalue {i64, i64, i1} %109, i1 0, 2 
  ret {i64, i64, i1} %110 
}


define external fastcc  {i64, i1} @"test_loop.test_loop<0>"(i64  %"seq#0")    {
entry:
  %111 = tail call fastcc  {i64, i1}  @"test_loop.gen$1<0>"(i64  %"seq#0")  
  %112 = extractvalue {i64, i1} %111, 0 
  %113 = extractvalue {i64, i1} %111, 1 
  %114 = insertvalue {i64, i1} undef, i64 %112, 0 
  %115 = insertvalue {i64, i1} %114, i1 %113, 1 
  ret {i64, i1} %115 
}
--------------------------------------------------
 Module test_loop.int_seq
  public submods  : 
  public types    : 
  public resources: 
  public procs    : test_loop.int_seq./=<0>
                    test_loop.int_seq.=<0>
                    test_loop.int_seq.high<0>
                    test_loop.int_seq.high<1>
                    test_loop.int_seq.int_seq<0>
                    test_loop.int_seq.int_seq<1>
                    test_loop.int_seq.low<0>
                    test_loop.int_seq.low<1>
                    test_loop.int_seq.step<0>
                    test_loop.int_seq.step<1>
  imports         : use test_loop
                    use wybe
  types           : 
  resources       : 
  procs           : 

/= > public {inline} (0 calls)
0: /=($left#0:test_loop.int_seq, $right#0:test_loop.int_seq, ?$$#0:wybe.bool):
 AliasPairs: []
 InterestingCallProperties: []
    foreign lpvm access($left#0:test_loop.int_seq, 0:wybe.int, 24:wybe.int, 0:wybe.int, ?tmp$3#0:wybe.int)
    foreign lpvm access($left#0:test_loop.int_seq, 8:wybe.int, 24:wybe.int, 0:wybe.int, ?tmp$4#0:wybe.int)
    foreign lpvm access(~$left#0:test_loop.int_seq, 16:wybe.int, 24:wybe.int, 0:wybe.int, ?tmp$5#0:wybe.int)
    foreign lpvm access($right#0:test_loop.int_seq, 0:wybe.int, 24:wybe.int, 0:wybe.int, ?tmp$6#0:wybe.int)
    foreign lpvm access($right#0:test_loop.int_seq, 8:wybe.int, 24:wybe.int, 0:wybe.int, ?tmp$7#0:wybe.int)
    foreign lpvm access(~$right#0:test_loop.int_seq, 16:wybe.int, 24:wybe.int, 0:wybe.int, ?tmp$8#0:wybe.int)
    foreign llvm icmp_eq(~tmp$3#0:wybe.int, ~tmp$6#0:wybe.int, ?tmp$9#0:wybe.bool) @wybe:nn:nn
    case ~tmp$9#0:wybe.bool of
    0:
        foreign llvm move(0:wybe.bool, ?tmp$0#0:wybe.bool)
        foreign llvm xor(~tmp$0#0:wybe.bool, 1:wybe.bool, ?$$#0:wybe.bool)

    1:
        foreign llvm icmp_eq(~tmp$4#0:wybe.int, ~tmp$7#0:wybe.int, ?tmp$10#0:wybe.bool) @wybe:nn:nn
        case ~tmp$10#0:wybe.bool of
        0:
            foreign llvm move(0:wybe.bool, ?tmp$0#0:wybe.bool)
            foreign llvm xor(~tmp$0#0:wybe.bool, 1:wybe.bool, ?$$#0:wybe.bool)

        1:
            foreign llvm icmp_eq(~tmp$5#0:wybe.int, ~tmp$8#0:wybe.int, ?tmp$0#0:wybe.bool) @wybe:nn:nn
            foreign llvm xor(~tmp$0#0:wybe.bool, 1:wybe.bool, ?$$#0:wybe.bool)




= > public {inline} (1 calls)
0: =($left#0:test_loop.int_seq, $right#0:test_loop.int_seq, ?$$#0:wybe.bool):
 AliasPairs: []
 InterestingCallProperties: []
    foreign lpvm access($left#0:test_loop.int_seq, 0:wybe.int, 24:wybe.int, 0:wybe.int, ?$left$low#0:wybe.int)
    foreign lpvm access($left#0:test_loop.int_seq, 8:wybe.int, 24:wybe.int, 0:wybe.int, ?$left$step#0:wybe.int)
    foreign lpvm access(~$left#0:test_loop.int_seq, 16:wybe.int, 24:wybe.int, 0:wybe.int, ?$left$high#0:wybe.int)
    foreign lpvm access($right#0:test_loop.int_seq, 0:wybe.int, 24:wybe.int, 0:wybe.int, ?$right$low#0:wybe.int)
    foreign lpvm access($right#0:test_loop.int_seq, 8:wybe.int, 24:wybe.int, 0:wybe.int, ?$right$step#0:wybe.int)
    foreign lpvm access(~$right#0:test_loop.int_seq, 16:wybe.int, 24:wybe.int, 0:wybe.int, ?$right$high#0:wybe.int)
    foreign llvm icmp_eq(~$left$low#0:wybe.int, ~$right$low#0:wybe.int, ?tmp$1#0:wybe.bool) @wybe:nn:nn
    case ~tmp$1#0:wybe.bool of
    0:
        foreign llvm move(0:wybe.bool, ?$$#0:wybe.bool)

    1:
        foreign llvm icmp_eq(~$left$step#0:wybe.int, ~$right$step#0:wybe.int, ?tmp$2#0:wybe.bool) @wybe:nn:nn
        case ~tmp$2#0:wybe.bool of
        0:
            foreign llvm move(0:wybe.bool, ?$$#0:wybe.bool)

        1:
            foreign llvm icmp_eq(~$left$high#0:wybe.int, ~$right$high#0:wybe.int, ?$$#0:wybe.bool) @wybe:nn:nn




high > public {inline} (0 calls)
0: high($rec#0:test_loop.int_seq, ?$#0:wybe.int):
 AliasPairs: []
 InterestingCallProperties: []
    foreign lpvm access(~$rec#0:test_loop.int_seq, 16:wybe.int, 24:wybe.int, 0:wybe.int, ?$#0:wybe.int)
high > public {inline} (0 calls)
1: high($rec#0:test_loop.int_seq, ?$rec#1:test_loop.int_seq, $field#0:wybe.int):
 AliasPairs: []
 InterestingCallProperties: []
    foreign lpvm mutate noalias(~%$rec#0:test_loop.int_seq, ?%$rec#1:test_loop.int_seq, 16:wybe.int, 0:wybe.int, 24:wybe.int, 0:wybe.int, ~$field#0:wybe.int)


int_seq > public {inline} (0 calls)
0: int_seq(low#0:wybe.int, step#0:wybe.int, high#0:wybe.int, ?$#0:test_loop.int_seq):
 AliasPairs: []
 InterestingCallProperties: []
    foreign lpvm alloc(24:wybe.int, ?$rec#0:!test_loop.int_seq)
    foreign lpvm mutate(~%$rec#0:test_loop.int_seq, ?%$rec#1:test_loop.int_seq, 0:wybe.int, 1:wybe.int, 24:wybe.int, 0:wybe.int, ~low#0:wybe.int)
    foreign lpvm mutate(~%$rec#1:test_loop.int_seq, ?%$rec#2:test_loop.int_seq, 8:wybe.int, 1:wybe.int, 24:wybe.int, 0:wybe.int, ~step#0:wybe.int)
    foreign lpvm mutate(~%$rec#2:test_loop.int_seq, ?%$#0:test_loop.int_seq, 16:wybe.int, 1:wybe.int, 24:wybe.int, 0:wybe.int, ~high#0:wybe.int)
int_seq > public {inline} (10 calls)
1: int_seq(?low#0:wybe.int, ?step#0:wybe.int, ?high#0:wybe.int, $#0:test_loop.int_seq):
 AliasPairs: []
 InterestingCallProperties: []
    foreign lpvm access($#0:test_loop.int_seq, 0:wybe.int, 24:wybe.int, 0:wybe.int, ?low#0:wybe.int)
    foreign lpvm access($#0:test_loop.int_seq, 8:wybe.int, 24:wybe.int, 0:wybe.int, ?step#0:wybe.int)
    foreign lpvm access(~$#0:test_loop.int_seq, 16:wybe.int, 24:wybe.int, 0:wybe.int, ?high#0:wybe.int)


low > public {inline} (0 calls)
0: low($rec#0:test_loop.int_seq, ?$#0:wybe.int):
 AliasPairs: []
 InterestingCallProperties: []
    foreign lpvm access(~$rec#0:test_loop.int_seq, 0:wybe.int, 24:wybe.int, 0:wybe.int, ?$#0:wybe.int)
low > public {inline} (0 calls)
1: low($rec#0:test_loop.int_seq, ?$rec#1:test_loop.int_seq, $field#0:wybe.int):
 AliasPairs: []
 InterestingCallProperties: []
    foreign lpvm mutate noalias(~%$rec#0:test_loop.int_seq, ?%$rec#1:test_loop.int_seq, 0:wybe.int, 0:wybe.int, 24:wybe.int, 0:wybe.int, ~$field#0:wybe.int)


step > public {inline} (0 calls)
0: step($rec#0:test_loop.int_seq, ?$#0:wybe.int):
 AliasPairs: []
 InterestingCallProperties: []
    foreign lpvm access(~$rec#0:test_loop.int_seq, 8:wybe.int, 24:wybe.int, 0:wybe.int, ?$#0:wybe.int)
step > public {inline} (0 calls)
1: step($rec#0:test_loop.int_seq, ?$rec#1:test_loop.int_seq, $field#0:wybe.int):
 AliasPairs: []
 InterestingCallProperties: []
    foreign lpvm mutate noalias(~%$rec#0:test_loop.int_seq, ?%$rec#1:test_loop.int_seq, 8:wybe.int, 0:wybe.int, 24:wybe.int, 0:wybe.int, ~$field#0:wybe.int)

  LLVM code       :

; ModuleID = 'test_loop.int_seq'


 


declare external ccc  i8* @wybe_malloc(i32)    


declare external ccc  void @llvm.memcpy.p0i8.p0i8.i32(i8*, i8*, i32, i32, i1)    


define external fastcc  i1 @"test_loop.int_seq./=<0>"(i64  %"$left#0", i64  %"$right#0")    {
entry:
  %1 = inttoptr i64 %"$left#0" to i64* 
  %2 = getelementptr  i64, i64* %1, i64 0 
  %3 = load  i64, i64* %2 
  %4 = add   i64 %"$left#0", 8 
  %5 = inttoptr i64 %4 to i64* 
  %6 = getelementptr  i64, i64* %5, i64 0 
  %7 = load  i64, i64* %6 
  %8 = add   i64 %"$left#0", 16 
  %9 = inttoptr i64 %8 to i64* 
  %10 = getelementptr  i64, i64* %9, i64 0 
  %11 = load  i64, i64* %10 
  %12 = inttoptr i64 %"$right#0" to i64* 
  %13 = getelementptr  i64, i64* %12, i64 0 
  %14 = load  i64, i64* %13 
  %15 = add   i64 %"$right#0", 8 
  %16 = inttoptr i64 %15 to i64* 
  %17 = getelementptr  i64, i64* %16, i64 0 
  %18 = load  i64, i64* %17 
  %19 = add   i64 %"$right#0", 16 
  %20 = inttoptr i64 %19 to i64* 
  %21 = getelementptr  i64, i64* %20, i64 0 
  %22 = load  i64, i64* %21 
  %"1$tmp$9#0" = icmp eq i64 %3, %14 
  br i1 %"1$tmp$9#0", label %if.then, label %if.else 
if.then:
  %"2$tmp$10#0" = icmp eq i64 %7, %18 
  br i1 %"2$tmp$10#0", label %if.then1, label %if.else1 
if.else:
  %"3$$$#0" = xor i1 0, 1 
  ret i1 %"3$$$#0" 
if.then1:
  %"4$tmp$0#0" = icmp eq i64 %11, %22 
  %"4$$$#0" = xor i1 %"4$tmp$0#0", 1 
  ret i1 %"4$$$#0" 
if.else1:
  %"5$$$#0" = xor i1 0, 1 
  ret i1 %"5$$$#0" 
}


define external fastcc  i1 @"test_loop.int_seq.=<0>"(i64  %"$left#0", i64  %"$right#0")    {
entry:
  %23 = inttoptr i64 %"$left#0" to i64* 
  %24 = getelementptr  i64, i64* %23, i64 0 
  %25 = load  i64, i64* %24 
  %26 = add   i64 %"$left#0", 8 
  %27 = inttoptr i64 %26 to i64* 
  %28 = getelementptr  i64, i64* %27, i64 0 
  %29 = load  i64, i64* %28 
  %30 = add   i64 %"$left#0", 16 
  %31 = inttoptr i64 %30 to i64* 
  %32 = getelementptr  i64, i64* %31, i64 0 
  %33 = load  i64, i64* %32 
  %34 = inttoptr i64 %"$right#0" to i64* 
  %35 = getelementptr  i64, i64* %34, i64 0 
  %36 = load  i64, i64* %35 
  %37 = add   i64 %"$right#0", 8 
  %38 = inttoptr i64 %37 to i64* 
  %39 = getelementptr  i64, i64* %38, i64 0 
  %40 = load  i64, i64* %39 
  %41 = add   i64 %"$right#0", 16 
  %42 = inttoptr i64 %41 to i64* 
  %43 = getelementptr  i64, i64* %42, i64 0 
  %44 = load  i64, i64* %43 
  %"1$tmp$1#0" = icmp eq i64 %25, %36 
  br i1 %"1$tmp$1#0", label %if.then, label %if.else 
if.then:
  %"2$tmp$2#0" = icmp eq i64 %29, %40 
  br i1 %"2$tmp$2#0", label %if.then1, label %if.else1 
if.else:
  ret i1 0 
if.then1:
  %"4$$$#0" = icmp eq i64 %33, %44 
  ret i1 %"4$$$#0" 
if.else1:
  ret i1 0 
}


define external fastcc  i64 @"test_loop.int_seq.high<0>"(i64  %"$rec#0")    {
entry:
  %45 = add   i64 %"$rec#0", 16 
  %46 = inttoptr i64 %45 to i64* 
  %47 = getelementptr  i64, i64* %46, i64 0 
  %48 = load  i64, i64* %47 
  ret i64 %48 
}


define external fastcc  i64 @"test_loop.int_seq.high<1>"(i64  %"$rec#0", i64  %"$field#0")    {
entry:
  %49 = trunc i64 24 to i32  
  %50 = tail call ccc  i8*  @wybe_malloc(i32  %49)  
  %51 = ptrtoint i8* %50 to i64 
  %52 = inttoptr i64 %51 to i8* 
  %53 = inttoptr i64 %"$rec#0" to i8* 
  %54 = trunc i64 24 to i32  
  tail call ccc  void  @llvm.memcpy.p0i8.p0i8.i32(i8*  %52, i8*  %53, i32  %54, i32  8, i1  0)  
  %55 = add   i64 %51, 16 
  %56 = inttoptr i64 %55 to i64* 
  %57 = getelementptr  i64, i64* %56, i64 0 
  store  i64 %"$field#0", i64* %57 
  ret i64 %51 
}


define external fastcc  i64 @"test_loop.int_seq.int_seq<0>"(i64  %"low#0", i64  %"step#0", i64  %"high#0")    {
entry:
  %58 = trunc i64 24 to i32  
  %59 = tail call ccc  i8*  @wybe_malloc(i32  %58)  
  %60 = ptrtoint i8* %59 to i64 
  %61 = inttoptr i64 %60 to i64* 
  %62 = getelementptr  i64, i64* %61, i64 0 
  store  i64 %"low#0", i64* %62 
  %63 = add   i64 %60, 8 
  %64 = inttoptr i64 %63 to i64* 
  %65 = getelementptr  i64, i64* %64, i64 0 
  store  i64 %"step#0", i64* %65 
  %66 = add   i64 %60, 16 
  %67 = inttoptr i64 %66 to i64* 
  %68 = getelementptr  i64, i64* %67, i64 0 
  store  i64 %"high#0", i64* %68 
  ret i64 %60 
}


define external fastcc  {i64, i64, i64} @"test_loop.int_seq.int_seq<1>"(i64  %"$#0")    {
entry:
  %69 = inttoptr i64 %"$#0" to i64* 
  %70 = getelementptr  i64, i64* %69, i64 0 
  %71 = load  i64, i64* %70 
  %72 = add   i64 %"$#0", 8 
  %73 = inttoptr i64 %72 to i64* 
  %74 = getelementptr  i64, i64* %73, i64 0 
  %75 = load  i64, i64* %74 
  %76 = add   i64 %"$#0", 16 
  %77 = inttoptr i64 %76 to i64* 
  %78 = getelementptr  i64, i64* %77, i64 0 
  %79 = load  i64, i64* %78 
  %80 = insertvalue {i64, i64, i64} undef, i64 %71, 0 
  %81 = insertvalue {i64, i64, i64} %80, i64 %75, 1 
  %82 = insertvalue {i64, i64, i64} %81, i64 %79, 2 
  ret {i64, i64, i64} %82 
}


define external fastcc  i64 @"test_loop.int_seq.low<0>"(i64  %"$rec#0")    {
entry:
  %83 = inttoptr i64 %"$rec#0" to i64* 
  %84 = getelementptr  i64, i64* %83, i64 0 
  %85 = load  i64, i64* %84 
  ret i64 %85 
}


define external fastcc  i64 @"test_loop.int_seq.low<1>"(i64  %"$rec#0", i64  %"$field#0")    {
entry:
  %86 = trunc i64 24 to i32  
  %87 = tail call ccc  i8*  @wybe_malloc(i32  %86)  
  %88 = ptrtoint i8* %87 to i64 
  %89 = inttoptr i64 %88 to i8* 
  %90 = inttoptr i64 %"$rec#0" to i8* 
  %91 = trunc i64 24 to i32  
  tail call ccc  void  @llvm.memcpy.p0i8.p0i8.i32(i8*  %89, i8*  %90, i32  %91, i32  8, i1  0)  
  %92 = inttoptr i64 %88 to i64* 
  %93 = getelementptr  i64, i64* %92, i64 0 
  store  i64 %"$field#0", i64* %93 
  ret i64 %88 
}


define external fastcc  i64 @"test_loop.int_seq.step<0>"(i64  %"$rec#0")    {
entry:
  %94 = add   i64 %"$rec#0", 8 
  %95 = inttoptr i64 %94 to i64* 
  %96 = getelementptr  i64, i64* %95, i64 0 
  %97 = load  i64, i64* %96 
  ret i64 %97 
}


define external fastcc  i64 @"test_loop.int_seq.step<1>"(i64  %"$rec#0", i64  %"$field#0")    {
entry:
  %98 = trunc i64 24 to i32  
  %99 = tail call ccc  i8*  @wybe_malloc(i32  %98)  
  %100 = ptrtoint i8* %99 to i64 
  %101 = inttoptr i64 %100 to i8* 
  %102 = inttoptr i64 %"$rec#0" to i8* 
  %103 = trunc i64 24 to i32  
  tail call ccc  void  @llvm.memcpy.p0i8.p0i8.i32(i8*  %101, i8*  %102, i32  %103, i32  8, i1  0)  
  %104 = add   i64 %100, 8 
  %105 = inttoptr i64 %104 to i64* 
  %106 = getelementptr  i64, i64* %105, i64 0 
  store  i64 %"$field#0", i64* %106 
  ret i64 %100 
}
