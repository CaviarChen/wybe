======================================================================
AFTER EVERYTHING:
 Module read_int
  public submods  : 
  public types    : 
  public resources: 
  public procs    : read_int.<0>
  imports         : use wybe
  types           : 
  resources       : 
  procs           : 

*main* > public (0 calls)
0: (argc#0:wybe.int, ?argc#1:wybe.int, argv#0:wybe.int, ?argv#1:wybe.int, exit_code#0:wybe.int, ?exit_code#1:wybe.int, io#0:wybe.phantom, ?io#12:wybe.phantom):
 AliasPairs: []
 InterestingCallProperties: []
    foreign c read_int(?a#0:wybe.int, ~#io#0:wybe.phantom, ?#io#1:wybe.phantom) @wybe:nn:nn
    foreign c read_int(?b#0:wybe.int, ~#io#1:wybe.phantom, ?#io#2:wybe.phantom) @wybe:nn:nn
    foreign c print_string("a = ":wybe.string, ~#io#2:wybe.phantom, ?#io#3:wybe.phantom) @wybe:nn:nn
    foreign c print_int(a#0:wybe.int, ~#io#3:wybe.phantom, ?tmp$10#0:wybe.phantom) @wybe:nn:nn
    foreign c putchar('\n':wybe.char, ~tmp$10#0:wybe.phantom, ?#io#4:wybe.phantom) @wybe:nn:nn
    foreign c print_string("b = ":wybe.string, ~#io#4:wybe.phantom, ?#io#5:wybe.phantom) @wybe:nn:nn
    foreign c print_int(b#0:wybe.int, ~#io#5:wybe.phantom, ?tmp$15#0:wybe.phantom) @wybe:nn:nn
    foreign c putchar('\n':wybe.char, ~tmp$15#0:wybe.phantom, ?#io#6:wybe.phantom) @wybe:nn:nn
    foreign c print_string("a + b = ":wybe.string, ~#io#6:wybe.phantom, ?#io#7:wybe.phantom) @wybe:nn:nn
    foreign llvm add(a#0:wybe.int, b#0:wybe.int, ?tmp$0#0:wybe.int) @wybe:nn:nn
    foreign c print_int(~tmp$0#0:wybe.int, ~#io#7:wybe.phantom, ?tmp$22#0:wybe.phantom) @wybe:nn:nn
    foreign c putchar('\n':wybe.char, ~tmp$22#0:wybe.phantom, ?#io#8:wybe.phantom) @wybe:nn:nn
    foreign c print_string("a - b = ":wybe.string, ~#io#8:wybe.phantom, ?#io#9:wybe.phantom) @wybe:nn:nn
    foreign llvm sub(a#0:wybe.int, b#0:wybe.int, ?tmp$1#0:wybe.int) @wybe:nn:nn
    foreign c print_int(~tmp$1#0:wybe.int, ~#io#9:wybe.phantom, ?tmp$29#0:wybe.phantom) @wybe:nn:nn
    foreign c putchar('\n':wybe.char, ~tmp$29#0:wybe.phantom, ?#io#10:wybe.phantom) @wybe:nn:nn
    foreign llvm icmp_sgt(~a#0:wybe.int, ~b#0:wybe.int, ?tmp$3#0:wybe.bool) @wybe:nn:nn
    case ~tmp$3#0:wybe.bool of
    0:
        foreign c print_string("a <= b":wybe.string, ~#io#10:wybe.phantom, ?tmp$34#0:wybe.phantom) @wybe:nn:nn
        foreign c putchar('\n':wybe.char, ~tmp$34#0:wybe.phantom, ?#io#11:wybe.phantom) @wybe:nn:nn
        foreign llvm move(~argc#0:wybe.int, ?argc#1:wybe.int)
        foreign llvm move(~argv#0:wybe.int, ?argv#1:wybe.int)
        foreign llvm move(~exit_code#0:wybe.int, ?exit_code#1:wybe.int)
        foreign c print_string("c = ":wybe.string, ~io#11:wybe.phantom, ?tmp$40#0:wybe.phantom) @wybe:nn:nn
        foreign c print_int(-10:wybe.int, ~tmp$40#0:wybe.phantom, ?tmp$41#0:wybe.phantom) @wybe:nn:nn
        foreign c putchar('\n':wybe.char, ~tmp$41#0:wybe.phantom, ?tmp$42#0:wybe.phantom) @wybe:nn:nn
        foreign c print_string("d = ":wybe.string, ~tmp$42#0:wybe.phantom, ?tmp$43#0:wybe.phantom) @wybe:nn:nn
        foreign c print_int(5:wybe.int, ~tmp$43#0:wybe.phantom, ?tmp$44#0:wybe.phantom) @wybe:nn:nn
        foreign c putchar('\n':wybe.char, ~tmp$44#0:wybe.phantom, ?tmp$45#0:wybe.phantom) @wybe:nn:nn
        read_int.print_comparison<0>(-10:wybe.int, 5:wybe.int, ~tmp$45#0:wybe.phantom, ?io#12:wybe.phantom) #18 @read_int:18:2

    1:
        foreign c print_string("a > b":wybe.string, ~#io#10:wybe.phantom, ?tmp$34#0:wybe.phantom) @wybe:nn:nn
        foreign c putchar('\n':wybe.char, ~tmp$34#0:wybe.phantom, ?#io#11:wybe.phantom) @wybe:nn:nn
        foreign llvm move(~argc#0:wybe.int, ?argc#1:wybe.int)
        foreign llvm move(~argv#0:wybe.int, ?argv#1:wybe.int)
        foreign llvm move(~exit_code#0:wybe.int, ?exit_code#1:wybe.int)
        foreign c print_string("c = ":wybe.string, ~io#11:wybe.phantom, ?tmp$40#0:wybe.phantom) @wybe:nn:nn
        foreign c print_int(-10:wybe.int, ~tmp$40#0:wybe.phantom, ?tmp$41#0:wybe.phantom) @wybe:nn:nn
        foreign c putchar('\n':wybe.char, ~tmp$41#0:wybe.phantom, ?tmp$42#0:wybe.phantom) @wybe:nn:nn
        foreign c print_string("d = ":wybe.string, ~tmp$42#0:wybe.phantom, ?tmp$43#0:wybe.phantom) @wybe:nn:nn
        foreign c print_int(5:wybe.int, ~tmp$43#0:wybe.phantom, ?tmp$44#0:wybe.phantom) @wybe:nn:nn
        foreign c putchar('\n':wybe.char, ~tmp$44#0:wybe.phantom, ?tmp$45#0:wybe.phantom) @wybe:nn:nn
        read_int.print_comparison<0>(-10:wybe.int, 5:wybe.int, ~tmp$45#0:wybe.phantom, ?io#12:wybe.phantom) #19 @read_int:18:2



gen$1 > {inline} (2 calls)
0: gen$1([a#0:wybe.int], argc#0:wybe.int, argv#0:wybe.int, [b#0:wybe.int], exit_code#0:wybe.int, io#0:wybe.phantom, [tmp$0#0:wybe.int], [tmp$1#0:wybe.int], [?argc#0:wybe.int], [?argv#0:wybe.int], [?exit_code#0:wybe.int], ?io#5:wybe.phantom):
 AliasPairs: []
 InterestingCallProperties: []
    foreign c print_string("c = ":wybe.string, ~#io#0:wybe.phantom, ?#io#1:wybe.phantom) @wybe:nn:nn
    foreign c print_int(-10:wybe.int, ~#io#1:wybe.phantom, ?tmp$8#0:wybe.phantom) @wybe:nn:nn
    foreign c putchar('\n':wybe.char, ~tmp$8#0:wybe.phantom, ?#io#2:wybe.phantom) @wybe:nn:nn
    foreign c print_string("d = ":wybe.string, ~#io#2:wybe.phantom, ?#io#3:wybe.phantom) @wybe:nn:nn
    foreign c print_int(5:wybe.int, ~#io#3:wybe.phantom, ?tmp$13#0:wybe.phantom) @wybe:nn:nn
    foreign c putchar('\n':wybe.char, ~tmp$13#0:wybe.phantom, ?#io#4:wybe.phantom) @wybe:nn:nn
    read_int.print_comparison<0>(-10:wybe.int, 5:wybe.int, ~#io#4:wybe.phantom, ?#io#5:wybe.phantom) #5 @read_int:18:2


print_comparison > {noinline} (1 calls)
0: print_comparison(c#0:wybe.int, d#0:wybe.int, io#0:wybe.phantom, ?io#1:wybe.phantom):
 AliasPairs: []
 InterestingCallProperties: []
    foreign llvm icmp_sgt(~c#0:wybe.int, ~d#0:wybe.int, ?tmp$0#0:wybe.bool) @wybe:nn:nn
    case ~tmp$0#0:wybe.bool of
    0:
        foreign c print_string("c <= d":wybe.string, ~#io#0:wybe.phantom, ?tmp$5#0:wybe.phantom) @wybe:nn:nn
        foreign c putchar('\n':wybe.char, ~tmp$5#0:wybe.phantom, ?#io#1:wybe.phantom) @wybe:nn:nn

    1:
        foreign c print_string("c > d":wybe.string, ~#io#0:wybe.phantom, ?tmp$5#0:wybe.phantom) @wybe:nn:nn
        foreign c putchar('\n':wybe.char, ~tmp$5#0:wybe.phantom, ?#io#1:wybe.phantom) @wybe:nn:nn


  LLVM code       :

; ModuleID = 'read_int'


 


declare external ccc  void @putchar(i8)    


declare external ccc  void @print_int(i64)    


declare external ccc  void @print_string(i64)    


declare external ccc  i64 @read_int()    


@read_int.22 =    constant [5 x i8] c"d = \00"


@read_int.20 =    constant [5 x i8] c"c = \00"


@read_int.18 =    constant [7 x i8] c"a <= b\00"


@read_int.13 =    constant [5 x i8] c"d = \00"


@read_int.11 =    constant [5 x i8] c"c = \00"


@read_int.9 =    constant [6 x i8] c"a > b\00"


@read_int.7 =    constant [9 x i8] c"a - b = \00"


@read_int.5 =    constant [9 x i8] c"a + b = \00"


@read_int.3 =    constant [5 x i8] c"b = \00"


@read_int.1 =    constant [5 x i8] c"a = \00"


@read_int.29 =    constant [5 x i8] c"d = \00"


@read_int.27 =    constant [5 x i8] c"c = \00"


@read_int.33 =    constant [7 x i8] c"c <= d\00"


@read_int.31 =    constant [6 x i8] c"c > d\00"


declare external ccc  i8* @wybe_malloc(i32)    


declare external ccc  void @llvm.memcpy.p0i8.p0i8.i32(i8*, i8*, i32, i32, i1)    


define external fastcc  {i64, i64, i64} @"read_int.<0>"(i64  %"argc#0", i64  %"argv#0", i64  %"exit_code#0")    {
entry:
  %"1$a#0" = tail call ccc  i64  @read_int()  
  %"1$b#0" = tail call ccc  i64  @read_int()  
  %2 = ptrtoint i8* getelementptr inbounds ([5 x i8], [5 x i8]* @read_int.1, i32 0, i32 0) to i64 
  tail call ccc  void  @print_string(i64  %2)  
  tail call ccc  void  @print_int(i64  %"1$a#0")  
  tail call ccc  void  @putchar(i8  10)  
  %4 = ptrtoint i8* getelementptr inbounds ([5 x i8], [5 x i8]* @read_int.3, i32 0, i32 0) to i64 
  tail call ccc  void  @print_string(i64  %4)  
  tail call ccc  void  @print_int(i64  %"1$b#0")  
  tail call ccc  void  @putchar(i8  10)  
  %6 = ptrtoint i8* getelementptr inbounds ([9 x i8], [9 x i8]* @read_int.5, i32 0, i32 0) to i64 
  tail call ccc  void  @print_string(i64  %6)  
  %"1$tmp$0#0" = add   i64 %"1$a#0", %"1$b#0" 
  tail call ccc  void  @print_int(i64  %"1$tmp$0#0")  
  tail call ccc  void  @putchar(i8  10)  
  %8 = ptrtoint i8* getelementptr inbounds ([9 x i8], [9 x i8]* @read_int.7, i32 0, i32 0) to i64 
  tail call ccc  void  @print_string(i64  %8)  
  %"1$tmp$1#0" = sub   i64 %"1$a#0", %"1$b#0" 
  tail call ccc  void  @print_int(i64  %"1$tmp$1#0")  
  tail call ccc  void  @putchar(i8  10)  
  %"1$tmp$3#0" = icmp sgt i64 %"1$a#0", %"1$b#0" 
  br i1 %"1$tmp$3#0", label %if.then, label %if.else 
if.then:
  %10 = ptrtoint i8* getelementptr inbounds ([6 x i8], [6 x i8]* @read_int.9, i32 0, i32 0) to i64 
  tail call ccc  void  @print_string(i64  %10)  
  tail call ccc  void  @putchar(i8  10)  
  %12 = ptrtoint i8* getelementptr inbounds ([5 x i8], [5 x i8]* @read_int.11, i32 0, i32 0) to i64 
  tail call ccc  void  @print_string(i64  %12)  
  tail call ccc  void  @print_int(i64  -10)  
  tail call ccc  void  @putchar(i8  10)  
  %14 = ptrtoint i8* getelementptr inbounds ([5 x i8], [5 x i8]* @read_int.13, i32 0, i32 0) to i64 
  tail call ccc  void  @print_string(i64  %14)  
  tail call ccc  void  @print_int(i64  5)  
  tail call ccc  void  @putchar(i8  10)  
  tail call fastcc  void  @"read_int.print_comparison<0>"(i64  -10, i64  5)  
  %15 = insertvalue {i64, i64, i64} undef, i64 %"argc#0", 0 
  %16 = insertvalue {i64, i64, i64} %15, i64 %"argv#0", 1 
  %17 = insertvalue {i64, i64, i64} %16, i64 %"exit_code#0", 2 
  ret {i64, i64, i64} %17 
if.else:
  %19 = ptrtoint i8* getelementptr inbounds ([7 x i8], [7 x i8]* @read_int.18, i32 0, i32 0) to i64 
  tail call ccc  void  @print_string(i64  %19)  
  tail call ccc  void  @putchar(i8  10)  
  %21 = ptrtoint i8* getelementptr inbounds ([5 x i8], [5 x i8]* @read_int.20, i32 0, i32 0) to i64 
  tail call ccc  void  @print_string(i64  %21)  
  tail call ccc  void  @print_int(i64  -10)  
  tail call ccc  void  @putchar(i8  10)  
  %23 = ptrtoint i8* getelementptr inbounds ([5 x i8], [5 x i8]* @read_int.22, i32 0, i32 0) to i64 
  tail call ccc  void  @print_string(i64  %23)  
  tail call ccc  void  @print_int(i64  5)  
  tail call ccc  void  @putchar(i8  10)  
  tail call fastcc  void  @"read_int.print_comparison<0>"(i64  -10, i64  5)  
  %24 = insertvalue {i64, i64, i64} undef, i64 %"argc#0", 0 
  %25 = insertvalue {i64, i64, i64} %24, i64 %"argv#0", 1 
  %26 = insertvalue {i64, i64, i64} %25, i64 %"exit_code#0", 2 
  ret {i64, i64, i64} %26 
}


define external fastcc  void @"read_int.gen$1<0>"(i64  %"argc#0", i64  %"argv#0", i64  %"exit_code#0")    {
entry:
  %28 = ptrtoint i8* getelementptr inbounds ([5 x i8], [5 x i8]* @read_int.27, i32 0, i32 0) to i64 
  tail call ccc  void  @print_string(i64  %28)  
  tail call ccc  void  @print_int(i64  -10)  
  tail call ccc  void  @putchar(i8  10)  
  %30 = ptrtoint i8* getelementptr inbounds ([5 x i8], [5 x i8]* @read_int.29, i32 0, i32 0) to i64 
  tail call ccc  void  @print_string(i64  %30)  
  tail call ccc  void  @print_int(i64  5)  
  tail call ccc  void  @putchar(i8  10)  
  tail call fastcc  void  @"read_int.print_comparison<0>"(i64  -10, i64  5)  
  ret void 
}


define external fastcc  void @"read_int.print_comparison<0>"(i64  %"c#0", i64  %"d#0")    {
entry:
  %"1$tmp$0#0" = icmp sgt i64 %"c#0", %"d#0" 
  br i1 %"1$tmp$0#0", label %if.then, label %if.else 
if.then:
  %32 = ptrtoint i8* getelementptr inbounds ([6 x i8], [6 x i8]* @read_int.31, i32 0, i32 0) to i64 
  tail call ccc  void  @print_string(i64  %32)  
  tail call ccc  void  @putchar(i8  10)  
  ret void 
if.else:
  %34 = ptrtoint i8* getelementptr inbounds ([7 x i8], [7 x i8]* @read_int.33, i32 0, i32 0) to i64 
  tail call ccc  void  @print_string(i64  %34)  
  tail call ccc  void  @putchar(i8  10)  
  ret void 
}
