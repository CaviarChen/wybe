# A test case for a semidet loop

pub type int_seq { pub int_seq(low:int, step:int, high:int) }

pub def {partial} seq_next(!seq:int_seq):int = elt where {
    int_seq(?elt, ?step, ?limit, seq)
    (elt <= limit)
    low(!seq, elt+step)
}


pub def {test} test_loop(seq:int_seq, ?i:int) {
    do {
        logmsg("loop top\n")
        ?i = seq_next(!seq)
        logmsg("i = ") logmsg(i) logmsg('\n')
        logmsg("i % 5 = ") logmsg(i % 5) logmsg('\n')
        until (i % 5 = 0)
    }
}


if {
    test_loop(int_seq(1,2,10), ?i) ::
       !println(i)
  | otherwise ::
       !println("nup!")
}