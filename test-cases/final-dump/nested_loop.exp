======================================================================
AFTER EVERYTHING:
 Module nested_loop
  public submods  : 
  public types    : 
  public resources: 
  public procs    : nested_loop.<0>
  imports         : use wybe
  types           : 
  resources       : 
  procs           : 

*main* > public (0 calls)
0: (argc#0:wybe.int, ?argc#1:wybe.int, argv#0:wybe.int, ?argv#1:wybe.int, exit_code#0:wybe.int, ?exit_code#1:wybe.int, io#0:wybe.phantom, ?io#1:wybe.phantom):
 AliasPairs: []
 AliasMultiSpeczInfo: []
    foreign c print_string("Outer":wybe.string, ~io#0:wybe.phantom, ?tmp$4#0:wybe.phantom) @wybe:nn:nn
    foreign c putchar('\n':wybe.char, ~tmp$4#0:wybe.phantom, ?tmp$5#0:wybe.phantom) @wybe:nn:nn
    foreign c print_string("Inner":wybe.string, ~tmp$5#0:wybe.phantom, ?tmp$6#0:wybe.phantom) @wybe:nn:nn
    foreign c putchar('\n':wybe.char, ~tmp$6#0:wybe.phantom, ?tmp$7#0:wybe.phantom) @wybe:nn:nn
    foreign c print_string("Inner":wybe.string, ~tmp$7#0:wybe.phantom, ?tmp$8#0:wybe.phantom) @wybe:nn:nn
    foreign c putchar('\n':wybe.char, ~tmp$8#0:wybe.phantom, ?tmp$9#0:wybe.phantom) @wybe:nn:nn
    foreign c print_string("Inner":wybe.string, ~tmp$9#0:wybe.phantom, ?tmp$14#0:wybe.phantom) @wybe:nn:nn
    foreign c putchar('\n':wybe.char, ~tmp$14#0:wybe.phantom, ?tmp$15#0:wybe.phantom) @wybe:nn:nn
    nested_loop.gen$2<0>(~argc#0:wybe.int, ~argv#0:wybe.int, ~exit_code#0:wybe.int, ~tmp$15#0:wybe.phantom, ?argc#1:wybe.int, ?argv#1:wybe.int, ?exit_code#1:wybe.int, ?io#1:wybe.phantom) @nested_loop:3:5


gen$1 > inline (1 calls)
0: gen$1(argc#0:wybe.int, argv#0:wybe.int, exit_code#0:wybe.int, io#0:wybe.phantom, ?argc#1:wybe.int, ?argv#1:wybe.int, ?exit_code#1:wybe.int, ?io#2:wybe.phantom):
 AliasPairs: []
 AliasMultiSpeczInfo: []
    foreign c print_string("Outer":wybe.string, ~#io#0:wybe.phantom, ?tmp$2#0:wybe.phantom) @wybe:nn:nn
    foreign c putchar('\n':wybe.char, ~tmp$2#0:wybe.phantom, ?#io#1:wybe.phantom) @wybe:nn:nn
    foreign c print_string("Inner":wybe.string, ~io#1:wybe.phantom, ?tmp$7#0:wybe.phantom) @wybe:nn:nn
    foreign c putchar('\n':wybe.char, ~tmp$7#0:wybe.phantom, ?tmp$8#0:wybe.phantom) @wybe:nn:nn
    foreign c print_string("Inner":wybe.string, ~tmp$8#0:wybe.phantom, ?tmp$13#0:wybe.phantom) @wybe:nn:nn
    foreign c putchar('\n':wybe.char, ~tmp$13#0:wybe.phantom, ?tmp$14#0:wybe.phantom) @wybe:nn:nn
    nested_loop.gen$2<0>(~argc#0:wybe.int, ~argv#0:wybe.int, ~exit_code#0:wybe.int, ~tmp$14#0:wybe.phantom, ?argc#1:wybe.int, ?argv#1:wybe.int, ?exit_code#1:wybe.int, ?io#2:wybe.phantom) @nested_loop:3:5


gen$2 > inline (2 calls)
0: gen$2(argc#0:wybe.int, argv#0:wybe.int, exit_code#0:wybe.int, io#0:wybe.phantom, ?argc#1:wybe.int, ?argv#1:wybe.int, ?exit_code#1:wybe.int, ?io#2:wybe.phantom):
 AliasPairs: []
 AliasMultiSpeczInfo: []
    foreign c print_string("Inner":wybe.string, ~#io#0:wybe.phantom, ?tmp$2#0:wybe.phantom) @wybe:nn:nn
    foreign c putchar('\n':wybe.char, ~tmp$2#0:wybe.phantom, ?#io#1:wybe.phantom) @wybe:nn:nn
    nested_loop.gen$2<0>(~argc#0:wybe.int, ~argv#0:wybe.int, ~exit_code#0:wybe.int, ~io#1:wybe.phantom, ?argc#1:wybe.int, ?argv#1:wybe.int, ?exit_code#1:wybe.int, ?io#2:wybe.phantom) @nested_loop:3:5

  LLVM code       :

; ModuleID = 'nested_loop'


 


declare external ccc  void @putchar(i8)    


declare external ccc  void @print_string(i64)    


@nested_loop.7 =    constant [6 x i8] c"Inner\00"


@nested_loop.5 =    constant [6 x i8] c"Inner\00"


@nested_loop.3 =    constant [6 x i8] c"Inner\00"


@nested_loop.1 =    constant [6 x i8] c"Outer\00"


@nested_loop.20 =    constant [6 x i8] c"Inner\00"


@nested_loop.18 =    constant [6 x i8] c"Inner\00"


@nested_loop.16 =    constant [6 x i8] c"Outer\00"


@nested_loop.29 =    constant [6 x i8] c"Inner\00"


declare external ccc  i8* @wybe_malloc(i32)    


declare external ccc  void @llvm.memcpy.p0i8.p0i8.i32(i8*, i8*, i32, i32, i1)    


define external fastcc  {i64, i64, i64} @"nested_loop.<0>"(i64  %"argc#0", i64  %"argv#0", i64  %"exit_code#0")    {
entry:
  %2 = ptrtoint i8* getelementptr inbounds ([6 x i8], [6 x i8]* @nested_loop.1, i32 0, i32 0) to i64 
  tail call ccc  void  @print_string(i64  %2)  
  tail call ccc  void  @putchar(i8  10)  
  %4 = ptrtoint i8* getelementptr inbounds ([6 x i8], [6 x i8]* @nested_loop.3, i32 0, i32 0) to i64 
  tail call ccc  void  @print_string(i64  %4)  
  tail call ccc  void  @putchar(i8  10)  
  %6 = ptrtoint i8* getelementptr inbounds ([6 x i8], [6 x i8]* @nested_loop.5, i32 0, i32 0) to i64 
  tail call ccc  void  @print_string(i64  %6)  
  tail call ccc  void  @putchar(i8  10)  
  %8 = ptrtoint i8* getelementptr inbounds ([6 x i8], [6 x i8]* @nested_loop.7, i32 0, i32 0) to i64 
  tail call ccc  void  @print_string(i64  %8)  
  tail call ccc  void  @putchar(i8  10)  
  %9 = tail call fastcc  {i64, i64, i64}  @"nested_loop.gen$2<0>"(i64  %"argc#0", i64  %"argv#0", i64  %"exit_code#0")  
  %10 = extractvalue {i64, i64, i64} %9, 0 
  %11 = extractvalue {i64, i64, i64} %9, 1 
  %12 = extractvalue {i64, i64, i64} %9, 2 
  %13 = insertvalue {i64, i64, i64} undef, i64 %10, 0 
  %14 = insertvalue {i64, i64, i64} %13, i64 %11, 1 
  %15 = insertvalue {i64, i64, i64} %14, i64 %12, 2 
  ret {i64, i64, i64} %15 
}


define external fastcc  {i64, i64, i64} @"nested_loop.gen$1<0>"(i64  %"argc#0", i64  %"argv#0", i64  %"exit_code#0")    {
entry:
  %17 = ptrtoint i8* getelementptr inbounds ([6 x i8], [6 x i8]* @nested_loop.16, i32 0, i32 0) to i64 
  tail call ccc  void  @print_string(i64  %17)  
  tail call ccc  void  @putchar(i8  10)  
  %19 = ptrtoint i8* getelementptr inbounds ([6 x i8], [6 x i8]* @nested_loop.18, i32 0, i32 0) to i64 
  tail call ccc  void  @print_string(i64  %19)  
  tail call ccc  void  @putchar(i8  10)  
  %21 = ptrtoint i8* getelementptr inbounds ([6 x i8], [6 x i8]* @nested_loop.20, i32 0, i32 0) to i64 
  tail call ccc  void  @print_string(i64  %21)  
  tail call ccc  void  @putchar(i8  10)  
  %22 = tail call fastcc  {i64, i64, i64}  @"nested_loop.gen$2<0>"(i64  %"argc#0", i64  %"argv#0", i64  %"exit_code#0")  
  %23 = extractvalue {i64, i64, i64} %22, 0 
  %24 = extractvalue {i64, i64, i64} %22, 1 
  %25 = extractvalue {i64, i64, i64} %22, 2 
  %26 = insertvalue {i64, i64, i64} undef, i64 %23, 0 
  %27 = insertvalue {i64, i64, i64} %26, i64 %24, 1 
  %28 = insertvalue {i64, i64, i64} %27, i64 %25, 2 
  ret {i64, i64, i64} %28 
}


define external fastcc  {i64, i64, i64} @"nested_loop.gen$2<0>"(i64  %"argc#0", i64  %"argv#0", i64  %"exit_code#0")    {
entry:
  %30 = ptrtoint i8* getelementptr inbounds ([6 x i8], [6 x i8]* @nested_loop.29, i32 0, i32 0) to i64 
  tail call ccc  void  @print_string(i64  %30)  
  tail call ccc  void  @putchar(i8  10)  
  %31 = tail call fastcc  {i64, i64, i64}  @"nested_loop.gen$2<0>"(i64  %"argc#0", i64  %"argv#0", i64  %"exit_code#0")  
  %32 = extractvalue {i64, i64, i64} %31, 0 
  %33 = extractvalue {i64, i64, i64} %31, 1 
  %34 = extractvalue {i64, i64, i64} %31, 2 
  %35 = insertvalue {i64, i64, i64} undef, i64 %32, 0 
  %36 = insertvalue {i64, i64, i64} %35, i64 %33, 1 
  %37 = insertvalue {i64, i64, i64} %36, i64 %34, 2 
  ret {i64, i64, i64} %37 
}
