======================================================================
AFTER EVERYTHING:
 Module generic_list(T)
  representation  : address
  public submods  : 
  public resources: 
  public procs    : generic_list.++<0>
                    generic_list.[]<0>
                    generic_list.[|]<0>
                    generic_list.[|]<1>
                    generic_list.head<0>
                    generic_list.head<1>
                    generic_list.length<0>
                    generic_list.tail<0>
                    generic_list.tail<1>
  imports         : use wybe
  resources       : 
  procs           : 

++ > public (1 calls)
0: ++(x#0:generic_list(?T), y#0:generic_list(?T), ?$#0:generic_list(?T)):
 AliasPairs: [($#0,y#0)]
 InterestingCallProperties: [InterestingUnaliased 0]
 MultiSpeczDepInfo: [(1,(generic_list.++<0>,fromList [NonAliasedParamCond 0 [0]]))]
    foreign llvm icmp_ne(x#0:generic_list(?T), 0:wybe.int, ?tmp$5#0:wybe.bool)
    case ~tmp$5#0:wybe.bool of
    0:
        foreign llvm move(~y#0:generic_list(?T), ?$#0:generic_list(?T)) @generic_list:3:5

    1:
        foreign lpvm access(x#0:generic_list(?T), 0:wybe.int, 16:wybe.int, 0:wybe.int, ?h#0:?T)
        foreign lpvm access(~x#0:generic_list(?T), 8:wybe.int, 16:wybe.int, 0:wybe.int, ?t#0:generic_list(?T))
        generic_list.++<0>(~t#0:generic_list(?T), ~y#0:generic_list(?T), ?tmp$2#0:generic_list(?T)) #1 @generic_list:5:13
        foreign lpvm alloc(16:wybe.int, ?tmp$8#0:generic_list(?T))
        foreign lpvm mutate(~tmp$8#0:generic_list(?T), ?tmp$9#0:generic_list(?T), 0:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, ~h#0:?T)
        foreign lpvm mutate(~tmp$9#0:generic_list(?T), ?$#0:generic_list(?T), 8:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, ~tmp$2#0:generic_list(?T))

 [04d1467a4d] [NonAliasedParam 0] :
    foreign llvm icmp_ne(x#0:generic_list(?T), 0:wybe.int, ?tmp$5#0:wybe.bool)
    case ~tmp$5#0:wybe.bool of
    0:
        foreign llvm move(~y#0:generic_list(?T), ?$#0:generic_list(?T)) @generic_list:3:5

    1:
        foreign lpvm access(x#0:generic_list(?T), 8:wybe.int, 16:wybe.int, 0:wybe.int, ?t#0:generic_list(?T))
        generic_list.++<0>[04d1467a4d](~t#0:generic_list(?T), ~y#0:generic_list(?T), ?tmp$2#0:generic_list(?T)) #1 @generic_list:5:13
        foreign lpvm mutate(~x#0:generic_list(?T), ?$#0:generic_list(?T), 8:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, ~tmp$2#0:generic_list(?T))



[] > public {inline} (0 calls)
0: [](?$#0:generic_list(?T)):
 AliasPairs: []
 InterestingCallProperties: []
    foreign llvm move(0:generic_list(?T), ?$#0:generic_list(?T))


[|] > public {inline} (1 calls)
0: [|](head#0:?T, tail#0:generic_list(?T), ?$#0:generic_list(?T)):
 AliasPairs: []
 InterestingCallProperties: []
    foreign lpvm alloc(16:wybe.int, ?$rec#0:!generic_list(?T))
    foreign lpvm mutate(~%$rec#0:generic_list(?T), ?%$rec#1:generic_list(?T), 0:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, ~head#0:?T)
    foreign lpvm mutate(~%$rec#1:generic_list(?T), ?%$#0:generic_list(?T), 8:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, ~tail#0:generic_list(?T))
[|] > public {inline} (6 calls)
1: [|](?head#0:?T, ?tail#0:generic_list(?T), $#0:generic_list(?T), ?$$#0:wybe.bool):
 AliasPairs: []
 InterestingCallProperties: []
    foreign llvm icmp_ne($#0:generic_list(?T), 0:wybe.int, ?tmp$0#0:!wybe.bool)
    case ~tmp$0#0:wybe.bool of
    0:
        foreign llvm move(0:wybe.bool, ?$$#0:wybe.bool)
        foreign llvm move(undef:?T, ?head#0:?T)
        foreign llvm move(undef:generic_list(?T), ?tail#0:generic_list(?T))

    1:
        foreign lpvm access($#0:generic_list(?T), 0:wybe.int, 16:wybe.int, 0:wybe.int, ?head#0:?T)
        foreign lpvm access(~$#0:generic_list(?T), 8:wybe.int, 16:wybe.int, 0:wybe.int, ?tail#0:generic_list(?T))
        foreign llvm move(1:wybe.bool, ?$$#0:wybe.bool)



head > public {inline} (0 calls)
0: head($rec#0:generic_list(?T), ?$#0:?T, ?$$#0:wybe.bool):
 AliasPairs: []
 InterestingCallProperties: []
    foreign llvm icmp_ne($rec#0:generic_list(?T), 0:wybe.int, ?tmp$0#0:!wybe.bool)
    case ~tmp$0#0:wybe.bool of
    0:
        foreign llvm move(0:wybe.bool, ?$$#0:wybe.bool)
        foreign llvm move(undef:?T, ?$#0:?T)

    1:
        foreign lpvm access(~$rec#0:generic_list(?T), 0:wybe.int, 16:wybe.int, 0:wybe.int, ?$#0:?T)
        foreign llvm move(1:wybe.bool, ?$$#0:wybe.bool)

head > public {inline} (0 calls)
1: head($rec#0:generic_list(?T), ?$rec#1:generic_list(?T), $field#0:?T, ?$$#0:wybe.bool):
 AliasPairs: []
 InterestingCallProperties: []
    foreign llvm icmp_ne($rec#0:generic_list(?T), 0:wybe.int, ?tmp$0#0:!wybe.bool)
    case ~tmp$0#0:wybe.bool of
    0:
        foreign llvm move(0:wybe.bool, ?$$#0:wybe.bool)
        foreign llvm move(~$rec#0:generic_list(?T), ?$rec#1:generic_list(?T))

    1:
        foreign lpvm mutate(~%$rec#0:generic_list(?T), ?%$rec#1:generic_list(?T), 0:wybe.int, 0:wybe.int, 16:wybe.int, 0:wybe.int, ~$field#0:?T)
        foreign llvm move(1:wybe.bool, ?$$#0:wybe.bool)



length > public {inline} (0 calls)
0: length(x#0:generic_list(?T), ?$#0:wybe.int):
 AliasPairs: []
 InterestingCallProperties: []
    generic_list.length1<0>(~x#0:generic_list(?T), 0:wybe.int, ?$#0:wybe.int) #0 @generic_list:8:44


length1 > (2 calls)
0: length1(x#0:generic_list(?T), acc#0:wybe.int, ?$#0:wybe.int):
 AliasPairs: []
 InterestingCallProperties: []
    foreign llvm icmp_ne(x#0:generic_list(?T), 0:wybe.int, ?tmp$5#0:wybe.bool)
    case ~tmp$5#0:wybe.bool of
    0:
        foreign llvm move(~acc#0:wybe.int, ?$#0:wybe.int) @generic_list:10:1

    1:
        foreign lpvm access(~x#0:generic_list(?T), 8:wybe.int, 16:wybe.int, 0:wybe.int, ?t#0:generic_list(?T))
        foreign llvm add(~acc#0:wybe.int, 1:wybe.int, ?tmp$2#0:wybe.int) @wybe:nn:nn
        generic_list.length1<0>(~t#0:generic_list(?T), ~tmp$2#0:wybe.int, ?$#0:wybe.int) #2 @generic_list:11:28



tail > public {inline} (0 calls)
0: tail($rec#0:generic_list(?T), ?$#0:generic_list(?T), ?$$#0:wybe.bool):
 AliasPairs: []
 InterestingCallProperties: []
    foreign llvm icmp_ne($rec#0:generic_list(?T), 0:wybe.int, ?tmp$0#0:!wybe.bool)
    case ~tmp$0#0:wybe.bool of
    0:
        foreign llvm move(0:wybe.bool, ?$$#0:wybe.bool)
        foreign llvm move(undef:generic_list(?T), ?$#0:generic_list(?T))

    1:
        foreign lpvm access(~$rec#0:generic_list(?T), 8:wybe.int, 16:wybe.int, 0:wybe.int, ?$#0:generic_list(?T))
        foreign llvm move(1:wybe.bool, ?$$#0:wybe.bool)

tail > public {inline} (0 calls)
1: tail($rec#0:generic_list(?T), ?$rec#1:generic_list(?T), $field#0:generic_list(?T), ?$$#0:wybe.bool):
 AliasPairs: []
 InterestingCallProperties: []
    foreign llvm icmp_ne($rec#0:generic_list(?T), 0:wybe.int, ?tmp$0#0:!wybe.bool)
    case ~tmp$0#0:wybe.bool of
    0:
        foreign llvm move(0:wybe.bool, ?$$#0:wybe.bool)
        foreign llvm move(~$rec#0:generic_list(?T), ?$rec#1:generic_list(?T))

    1:
        foreign lpvm {noalias} mutate(~%$rec#0:generic_list(?T), ?%$rec#1:generic_list(?T), 8:wybe.int, 0:wybe.int, 16:wybe.int, 0:wybe.int, ~$field#0:generic_list(?T))
        foreign llvm move(1:wybe.bool, ?$$#0:wybe.bool)


  LLVM code       :

; ModuleID = 'generic_list'


 


declare external ccc  i8* @wybe_malloc(i32)    


declare external ccc  void @llvm.memcpy.p0i8.p0i8.i32(i8*, i8*, i32, i32, i1)    


define external fastcc  i64 @"generic_list.++<0>"(i64  %"x#0", i64  %"y#0")    {
entry:
  %"1$tmp$5#0" = icmp ne i64 %"x#0", 0 
  br i1 %"1$tmp$5#0", label %if.then, label %if.else 
if.then:
  %1 = inttoptr i64 %"x#0" to i64* 
  %2 = getelementptr  i64, i64* %1, i64 0 
  %3 = load  i64, i64* %2 
  %4 = add   i64 %"x#0", 8 
  %5 = inttoptr i64 %4 to i64* 
  %6 = getelementptr  i64, i64* %5, i64 0 
  %7 = load  i64, i64* %6 
  %"2$tmp$2#0" = tail call fastcc  i64  @"generic_list.++<0>"(i64  %7, i64  %"y#0")  
  %8 = trunc i64 16 to i32  
  %9 = tail call ccc  i8*  @wybe_malloc(i32  %8)  
  %10 = ptrtoint i8* %9 to i64 
  %11 = inttoptr i64 %10 to i64* 
  %12 = getelementptr  i64, i64* %11, i64 0 
  store  i64 %3, i64* %12 
  %13 = add   i64 %10, 8 
  %14 = inttoptr i64 %13 to i64* 
  %15 = getelementptr  i64, i64* %14, i64 0 
  store  i64 %"2$tmp$2#0", i64* %15 
  ret i64 %10 
if.else:
  ret i64 %"y#0" 
}


define external fastcc  i64 @"generic_list.++<0>[04d1467a4d]"(i64  %"x#0", i64  %"y#0")    {
entry:
  %"1$tmp$5#0" = icmp ne i64 %"x#0", 0 
  br i1 %"1$tmp$5#0", label %if.then, label %if.else 
if.then:
  %16 = add   i64 %"x#0", 8 
  %17 = inttoptr i64 %16 to i64* 
  %18 = getelementptr  i64, i64* %17, i64 0 
  %19 = load  i64, i64* %18 
  %"2$tmp$2#0" = tail call fastcc  i64  @"generic_list.++<0>[04d1467a4d]"(i64  %19, i64  %"y#0")  
  %20 = add   i64 %"x#0", 8 
  %21 = inttoptr i64 %20 to i64* 
  %22 = getelementptr  i64, i64* %21, i64 0 
  store  i64 %"2$tmp$2#0", i64* %22 
  ret i64 %"x#0" 
if.else:
  ret i64 %"y#0" 
}


define external fastcc  i64 @"generic_list.[]<0>"()    {
entry:
  ret i64 0 
}


define external fastcc  i64 @"generic_list.[|]<0>"(i64  %"head#0", i64  %"tail#0")    {
entry:
  %23 = trunc i64 16 to i32  
  %24 = tail call ccc  i8*  @wybe_malloc(i32  %23)  
  %25 = ptrtoint i8* %24 to i64 
  %26 = inttoptr i64 %25 to i64* 
  %27 = getelementptr  i64, i64* %26, i64 0 
  store  i64 %"head#0", i64* %27 
  %28 = add   i64 %25, 8 
  %29 = inttoptr i64 %28 to i64* 
  %30 = getelementptr  i64, i64* %29, i64 0 
  store  i64 %"tail#0", i64* %30 
  ret i64 %25 
}


define external fastcc  {i64, i64, i1} @"generic_list.[|]<1>"(i64  %"$#0")    {
entry:
  %"1$tmp$0#0" = icmp ne i64 %"$#0", 0 
  br i1 %"1$tmp$0#0", label %if.then, label %if.else 
if.then:
  %31 = inttoptr i64 %"$#0" to i64* 
  %32 = getelementptr  i64, i64* %31, i64 0 
  %33 = load  i64, i64* %32 
  %34 = add   i64 %"$#0", 8 
  %35 = inttoptr i64 %34 to i64* 
  %36 = getelementptr  i64, i64* %35, i64 0 
  %37 = load  i64, i64* %36 
  %38 = insertvalue {i64, i64, i1} undef, i64 %33, 0 
  %39 = insertvalue {i64, i64, i1} %38, i64 %37, 1 
  %40 = insertvalue {i64, i64, i1} %39, i1 1, 2 
  ret {i64, i64, i1} %40 
if.else:
  %41 = insertvalue {i64, i64, i1} undef, i64 undef, 0 
  %42 = insertvalue {i64, i64, i1} %41, i64 undef, 1 
  %43 = insertvalue {i64, i64, i1} %42, i1 0, 2 
  ret {i64, i64, i1} %43 
}


define external fastcc  {i64, i1} @"generic_list.head<0>"(i64  %"$rec#0")    {
entry:
  %"1$tmp$0#0" = icmp ne i64 %"$rec#0", 0 
  br i1 %"1$tmp$0#0", label %if.then, label %if.else 
if.then:
  %44 = inttoptr i64 %"$rec#0" to i64* 
  %45 = getelementptr  i64, i64* %44, i64 0 
  %46 = load  i64, i64* %45 
  %47 = insertvalue {i64, i1} undef, i64 %46, 0 
  %48 = insertvalue {i64, i1} %47, i1 1, 1 
  ret {i64, i1} %48 
if.else:
  %49 = insertvalue {i64, i1} undef, i64 undef, 0 
  %50 = insertvalue {i64, i1} %49, i1 0, 1 
  ret {i64, i1} %50 
}


define external fastcc  {i64, i1} @"generic_list.head<1>"(i64  %"$rec#0", i64  %"$field#0")    {
entry:
  %"1$tmp$0#0" = icmp ne i64 %"$rec#0", 0 
  br i1 %"1$tmp$0#0", label %if.then, label %if.else 
if.then:
  %51 = trunc i64 16 to i32  
  %52 = tail call ccc  i8*  @wybe_malloc(i32  %51)  
  %53 = ptrtoint i8* %52 to i64 
  %54 = inttoptr i64 %53 to i8* 
  %55 = inttoptr i64 %"$rec#0" to i8* 
  %56 = trunc i64 16 to i32  
  tail call ccc  void  @llvm.memcpy.p0i8.p0i8.i32(i8*  %54, i8*  %55, i32  %56, i32  8, i1  0)  
  %57 = inttoptr i64 %53 to i64* 
  %58 = getelementptr  i64, i64* %57, i64 0 
  store  i64 %"$field#0", i64* %58 
  %59 = insertvalue {i64, i1} undef, i64 %53, 0 
  %60 = insertvalue {i64, i1} %59, i1 1, 1 
  ret {i64, i1} %60 
if.else:
  %61 = insertvalue {i64, i1} undef, i64 %"$rec#0", 0 
  %62 = insertvalue {i64, i1} %61, i1 0, 1 
  ret {i64, i1} %62 
}


define external fastcc  i64 @"generic_list.length<0>"(i64  %"x#0")    {
entry:
  %"1$$#0" = tail call fastcc  i64  @"generic_list.length1<0>"(i64  %"x#0", i64  0)  
  ret i64 %"1$$#0" 
}


define external fastcc  i64 @"generic_list.length1<0>"(i64  %"x#0", i64  %"acc#0")    {
entry:
  %"1$tmp$5#0" = icmp ne i64 %"x#0", 0 
  br i1 %"1$tmp$5#0", label %if.then, label %if.else 
if.then:
  %63 = add   i64 %"x#0", 8 
  %64 = inttoptr i64 %63 to i64* 
  %65 = getelementptr  i64, i64* %64, i64 0 
  %66 = load  i64, i64* %65 
  %"2$tmp$2#0" = add   i64 %"acc#0", 1 
  %"2$$#0" = tail call fastcc  i64  @"generic_list.length1<0>"(i64  %66, i64  %"2$tmp$2#0")  
  ret i64 %"2$$#0" 
if.else:
  ret i64 %"acc#0" 
}


define external fastcc  {i64, i1} @"generic_list.tail<0>"(i64  %"$rec#0")    {
entry:
  %"1$tmp$0#0" = icmp ne i64 %"$rec#0", 0 
  br i1 %"1$tmp$0#0", label %if.then, label %if.else 
if.then:
  %67 = add   i64 %"$rec#0", 8 
  %68 = inttoptr i64 %67 to i64* 
  %69 = getelementptr  i64, i64* %68, i64 0 
  %70 = load  i64, i64* %69 
  %71 = insertvalue {i64, i1} undef, i64 %70, 0 
  %72 = insertvalue {i64, i1} %71, i1 1, 1 
  ret {i64, i1} %72 
if.else:
  %73 = insertvalue {i64, i1} undef, i64 undef, 0 
  %74 = insertvalue {i64, i1} %73, i1 0, 1 
  ret {i64, i1} %74 
}


define external fastcc  {i64, i1} @"generic_list.tail<1>"(i64  %"$rec#0", i64  %"$field#0")    {
entry:
  %"1$tmp$0#0" = icmp ne i64 %"$rec#0", 0 
  br i1 %"1$tmp$0#0", label %if.then, label %if.else 
if.then:
  %75 = trunc i64 16 to i32  
  %76 = tail call ccc  i8*  @wybe_malloc(i32  %75)  
  %77 = ptrtoint i8* %76 to i64 
  %78 = inttoptr i64 %77 to i8* 
  %79 = inttoptr i64 %"$rec#0" to i8* 
  %80 = trunc i64 16 to i32  
  tail call ccc  void  @llvm.memcpy.p0i8.p0i8.i32(i8*  %78, i8*  %79, i32  %80, i32  8, i1  0)  
  %81 = add   i64 %77, 8 
  %82 = inttoptr i64 %81 to i64* 
  %83 = getelementptr  i64, i64* %82, i64 0 
  store  i64 %"$field#0", i64* %83 
  %84 = insertvalue {i64, i1} undef, i64 %77, 0 
  %85 = insertvalue {i64, i1} %84, i1 1, 1 
  ret {i64, i1} %85 
if.else:
  %86 = insertvalue {i64, i1} undef, i64 %"$rec#0", 0 
  %87 = insertvalue {i64, i1} %86, i1 0, 1 
  ret {i64, i1} %87 
}
--------------------------------------------------
 Module generic_use
  representation  : (not a type)
  public submods  : 
  public resources: 
  public procs    : generic_use.fromto<0>
                    generic_use.iota<0>
                    generic_use.nrev<0>
                    generic_use.reverse<0>
                    generic_use.reverse1<0>
  imports         : use generic_list
                    use wybe
  resources       : 
  procs           : 

fromto > public {inline} (1 calls)
0: fromto(lo#0:wybe.int, hi#0:wybe.int, ?$#0:generic_list(wybe.int)):
 AliasPairs: []
 InterestingCallProperties: []
    generic_use.fromto1<0>(~lo#0:wybe.int, ~hi#0:wybe.int, 0:generic_list(?T), ?$#0:generic_list(wybe.int)) #1 @generic_use:4:54


fromto1 > (2 calls)
0: fromto1(lo#0:wybe.int, hi#0:wybe.int, sofar#0:generic_list(wybe.int), ?$#0:generic_list(wybe.int)):
 AliasPairs: [($#0,sofar#0)]
 InterestingCallProperties: []
    foreign llvm icmp_sge(hi#0:wybe.int, lo#0:wybe.int, ?tmp$4#0:wybe.bool) @wybe:nn:nn
    case ~tmp$4#0:wybe.bool of
    0:
        foreign llvm move(~sofar#0:generic_list(wybe.int), ?$#0:generic_list(wybe.int)) @generic_use:5:1

    1:
        foreign llvm sub(hi#0:wybe.int, 1:wybe.int, ?tmp$2#0:wybe.int) @wybe:nn:nn
        foreign lpvm alloc(16:wybe.int, ?tmp$11#0:generic_list(?T))
        foreign lpvm mutate(~tmp$11#0:generic_list(?T), ?tmp$12#0:generic_list(?T), 0:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, ~hi#0:wybe.int)
        foreign lpvm mutate(~tmp$12#0:generic_list(?T), ?tmp$3#0:generic_list(wybe.int), 8:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, ~sofar#0:generic_list(wybe.int))
        generic_use.fromto1<0>(~lo#0:wybe.int, ~tmp$2#0:wybe.int, ~tmp$3#0:generic_list(wybe.int), ?$#0:generic_list(wybe.int)) #3 @generic_use:6:22



iota > public {inline} (0 calls)
0: iota(n#0:wybe.int, ?$#0:generic_list(wybe.int)):
 AliasPairs: []
 InterestingCallProperties: []
    generic_use.fromto1<0>(1:wybe.int, ~n#0:wybe.int, 0:generic_list(?T), ?$#0:generic_list(wybe.int)) #1 @generic_use:4:54


nrev > public (1 calls)
0: nrev(lst#0:generic_list(?t), ?$#0:generic_list(?t)):
 AliasPairs: []
 InterestingCallProperties: [InterestingUnaliased 0]
 MultiSpeczDepInfo: [(1,(generic_use.nrev<0>,fromList [NonAliasedParamCond 0 [0]])),(4,(generic_list.++<0>,fromList [NonAliasedParamCond 0 []]))]
    foreign llvm icmp_ne(lst#0:generic_list(?t), 0:wybe.int, ?tmp$8#0:wybe.bool)
    case ~tmp$8#0:wybe.bool of
    0:
        foreign llvm move(0:generic_list(?T), ?$#0:generic_list(?t)) @generic_use:8:5

    1:
        foreign lpvm access(lst#0:generic_list(?t), 0:wybe.int, 16:wybe.int, 0:wybe.int, ?h#0:?t)
        foreign lpvm access(~lst#0:generic_list(?t), 8:wybe.int, 16:wybe.int, 0:wybe.int, ?t#0:generic_list(?t))
        generic_use.nrev<0>(~t#0:generic_list(?t), ?tmp$2#0:generic_list(?t)) #1 @generic_use:9:29
        foreign lpvm alloc(16:wybe.int, ?tmp$11#0:generic_list(?T))
        foreign lpvm mutate(~tmp$11#0:generic_list(?T), ?tmp$12#0:generic_list(?T), 0:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, ~h#0:?t)
        foreign lpvm mutate(~tmp$12#0:generic_list(?T), ?tmp$3#0:generic_list(?t), 8:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, 0:generic_list(?T))
        generic_list.++<0>[04d1467a4d](~tmp$2#0:generic_list(?t), ~tmp$3#0:generic_list(?t), ?$#0:generic_list(?t)) #4 @generic_use:9:29



reverse > public {inline} (0 calls)
0: reverse(lst#0:generic_list(?t), ?$#0:generic_list(?t)):
 AliasPairs: []
 InterestingCallProperties: []
    generic_use.reverse1<0>(~lst#0:generic_list(?t), 0:generic_list(?T), ?$#0:generic_list(?t)) #1 @generic_use:11:60


reverse1 > public (2 calls)
0: reverse1(lst#0:generic_list(?t), suffix#0:generic_list(?t), ?$#0:generic_list(?t)):
 AliasPairs: [($#0,suffix#0)]
 InterestingCallProperties: [InterestingUnaliased 0]
 MultiSpeczDepInfo: [(2,(generic_use.reverse1<0>,fromList [NonAliasedParamCond 0 [0]]))]
    foreign llvm icmp_ne(lst#0:generic_list(?t), 0:wybe.int, ?tmp$5#0:wybe.bool)
    case ~tmp$5#0:wybe.bool of
    0:
        foreign llvm move(~suffix#0:generic_list(?t), ?$#0:generic_list(?t)) @generic_use:12:5

    1:
        foreign lpvm access(lst#0:generic_list(?t), 0:wybe.int, 16:wybe.int, 0:wybe.int, ?h#0:?t)
        foreign lpvm access(~lst#0:generic_list(?t), 8:wybe.int, 16:wybe.int, 0:wybe.int, ?t#0:generic_list(?t))
        foreign lpvm alloc(16:wybe.int, ?tmp$8#0:generic_list(?T))
        foreign lpvm mutate(~tmp$8#0:generic_list(?T), ?tmp$9#0:generic_list(?T), 0:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, ~h#0:?t)
        foreign lpvm mutate(~tmp$9#0:generic_list(?T), ?tmp$2#0:generic_list(?t), 8:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, ~suffix#0:generic_list(?t))
        generic_use.reverse1<0>(~t#0:generic_list(?t), ~tmp$2#0:generic_list(?t), ?$#0:generic_list(?t)) #2 @generic_use:14:29


  LLVM code       :

; ModuleID = 'generic_use'


 


declare external fastcc  i64 @"generic_list.++<0>[04d1467a4d]"(i64, i64)    


declare external ccc  i8* @wybe_malloc(i32)    


declare external ccc  void @llvm.memcpy.p0i8.p0i8.i32(i8*, i8*, i32, i32, i1)    


define external fastcc  i64 @"generic_use.fromto<0>"(i64  %"lo#0", i64  %"hi#0")    {
entry:
  %"1$$#0" = tail call fastcc  i64  @"generic_use.fromto1<0>"(i64  %"lo#0", i64  %"hi#0", i64  0)  
  ret i64 %"1$$#0" 
}


define external fastcc  i64 @"generic_use.fromto1<0>"(i64  %"lo#0", i64  %"hi#0", i64  %"sofar#0")    {
entry:
  %"1$tmp$4#0" = icmp sge i64 %"hi#0", %"lo#0" 
  br i1 %"1$tmp$4#0", label %if.then, label %if.else 
if.then:
  %"2$tmp$2#0" = sub   i64 %"hi#0", 1 
  %1 = trunc i64 16 to i32  
  %2 = tail call ccc  i8*  @wybe_malloc(i32  %1)  
  %3 = ptrtoint i8* %2 to i64 
  %4 = inttoptr i64 %3 to i64* 
  %5 = getelementptr  i64, i64* %4, i64 0 
  store  i64 %"hi#0", i64* %5 
  %6 = add   i64 %3, 8 
  %7 = inttoptr i64 %6 to i64* 
  %8 = getelementptr  i64, i64* %7, i64 0 
  store  i64 %"sofar#0", i64* %8 
  %"2$$#0" = tail call fastcc  i64  @"generic_use.fromto1<0>"(i64  %"lo#0", i64  %"2$tmp$2#0", i64  %3)  
  ret i64 %"2$$#0" 
if.else:
  ret i64 %"sofar#0" 
}


define external fastcc  i64 @"generic_use.iota<0>"(i64  %"n#0")    {
entry:
  %"1$$#0" = tail call fastcc  i64  @"generic_use.fromto1<0>"(i64  1, i64  %"n#0", i64  0)  
  ret i64 %"1$$#0" 
}


define external fastcc  i64 @"generic_use.nrev<0>"(i64  %"lst#0")    {
entry:
  %"1$tmp$8#0" = icmp ne i64 %"lst#0", 0 
  br i1 %"1$tmp$8#0", label %if.then, label %if.else 
if.then:
  %9 = inttoptr i64 %"lst#0" to i64* 
  %10 = getelementptr  i64, i64* %9, i64 0 
  %11 = load  i64, i64* %10 
  %12 = add   i64 %"lst#0", 8 
  %13 = inttoptr i64 %12 to i64* 
  %14 = getelementptr  i64, i64* %13, i64 0 
  %15 = load  i64, i64* %14 
  %"2$tmp$2#0" = tail call fastcc  i64  @"generic_use.nrev<0>"(i64  %15)  
  %16 = trunc i64 16 to i32  
  %17 = tail call ccc  i8*  @wybe_malloc(i32  %16)  
  %18 = ptrtoint i8* %17 to i64 
  %19 = inttoptr i64 %18 to i64* 
  %20 = getelementptr  i64, i64* %19, i64 0 
  store  i64 %11, i64* %20 
  %21 = add   i64 %18, 8 
  %22 = inttoptr i64 %21 to i64* 
  %23 = getelementptr  i64, i64* %22, i64 0 
  store  i64 0, i64* %23 
  %"2$$#0" = tail call fastcc  i64  @"generic_list.++<0>[04d1467a4d]"(i64  %"2$tmp$2#0", i64  %18)  
  ret i64 %"2$$#0" 
if.else:
  ret i64 0 
}


define external fastcc  i64 @"generic_use.reverse<0>"(i64  %"lst#0")    {
entry:
  %"1$$#0" = tail call fastcc  i64  @"generic_use.reverse1<0>"(i64  %"lst#0", i64  0)  
  ret i64 %"1$$#0" 
}


define external fastcc  i64 @"generic_use.reverse1<0>"(i64  %"lst#0", i64  %"suffix#0")    {
entry:
  %"1$tmp$5#0" = icmp ne i64 %"lst#0", 0 
  br i1 %"1$tmp$5#0", label %if.then, label %if.else 
if.then:
  %24 = inttoptr i64 %"lst#0" to i64* 
  %25 = getelementptr  i64, i64* %24, i64 0 
  %26 = load  i64, i64* %25 
  %27 = add   i64 %"lst#0", 8 
  %28 = inttoptr i64 %27 to i64* 
  %29 = getelementptr  i64, i64* %28, i64 0 
  %30 = load  i64, i64* %29 
  %31 = trunc i64 16 to i32  
  %32 = tail call ccc  i8*  @wybe_malloc(i32  %31)  
  %33 = ptrtoint i8* %32 to i64 
  %34 = inttoptr i64 %33 to i64* 
  %35 = getelementptr  i64, i64* %34, i64 0 
  store  i64 %26, i64* %35 
  %36 = add   i64 %33, 8 
  %37 = inttoptr i64 %36 to i64* 
  %38 = getelementptr  i64, i64* %37, i64 0 
  store  i64 %"suffix#0", i64* %38 
  %"2$$#0" = tail call fastcc  i64  @"generic_use.reverse1<0>"(i64  %30, i64  %33)  
  ret i64 %"2$$#0" 
if.else:
  ret i64 %"suffix#0" 
}
