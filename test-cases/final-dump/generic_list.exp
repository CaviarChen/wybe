======================================================================
AFTER EVERYTHING:
 Module generic_list(T)
  representation  : address
  public submods  : 
  public resources: 
  public procs    : generic_list.++<0>
                    generic_list.[]<0>
                    generic_list.[|]<0>
                    generic_list.[|]<1>
                    generic_list.head<0>
                    generic_list.head<1>
                    generic_list.length<0>
                    generic_list.tail<0>
                    generic_list.tail<1>
  imports         : use wybe
  resources       : 
  procs           : 

++ > public (1 calls)
0: ++(x#0:generic_list(?T), y#0:generic_list(?T), ?$#0:generic_list(?T)):
 AliasPairs: [($#0,y#0)]
 InterestingCallProperties: [InterestingUnaliased 0]
 MultiSpeczDepInfo: [(1,(generic_list.++<0>,fromList [NonAliasedParamCond 0 [0]]))]
    foreign llvm icmp_ne(x#0:generic_list(?T), 0:wybe.int, ?tmp$5#0:wybe.bool)
    case ~tmp$5#0:wybe.bool of
    0:
        foreign llvm move(~y#0:generic_list(?T), ?$#0:generic_list(?T)) @generic_list:3:5

    1:
        foreign lpvm access(x#0:generic_list(?T), 0:wybe.int, 16:wybe.int, 0:wybe.int, ?h#0:?T)
        foreign lpvm access(~x#0:generic_list(?T), 8:wybe.int, 16:wybe.int, 0:wybe.int, ?t#0:generic_list(?T))
        generic_list.++<0>(~t#0:generic_list(?T), ~y#0:generic_list(?T), ?tmp$2#0:generic_list(?T)) #1 @generic_list:5:13
        foreign lpvm alloc(16:wybe.int, ?tmp$8#0:generic_list(?T))
        foreign lpvm mutate(~tmp$8#0:generic_list(?T), ?tmp$9#0:generic_list(?T), 0:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, ~h#0:?T)
        foreign lpvm mutate(~tmp$9#0:generic_list(?T), ?$#0:generic_list(?T), 8:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, ~tmp$2#0:generic_list(?T))



[] > public {inline} (0 calls)
0: [](?$#0:generic_list(?T)):
 AliasPairs: []
 InterestingCallProperties: []
    foreign llvm move(0:generic_list(?T), ?$#0:generic_list(?T))


[|] > public {inline} (1 calls)
0: [|](head#0:?T, tail#0:generic_list(?T), ?$#0:generic_list(?T)):
 AliasPairs: []
 InterestingCallProperties: []
    foreign lpvm alloc(16:wybe.int, ?$rec#0:!generic_list(?T))
    foreign lpvm mutate(~%$rec#0:generic_list(?T), ?%$rec#1:generic_list(?T), 0:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, ~head#0:?T)
    foreign lpvm mutate(~%$rec#1:generic_list(?T), ?%$#0:generic_list(?T), 8:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, ~tail#0:generic_list(?T))
[|] > public {inline} (6 calls)
1: [|](?head#0:?T, ?tail#0:generic_list(?T), $#0:generic_list(?T), ?$$#0:wybe.bool):
 AliasPairs: []
 InterestingCallProperties: []
    foreign llvm icmp_ne($#0:generic_list(?T), 0:wybe.int, ?tmp$0#0:!wybe.bool)
    case ~tmp$0#0:wybe.bool of
    0:
        foreign llvm move(0:wybe.bool, ?$$#0:wybe.bool)
        foreign llvm move(undef:?T, ?head#0:?T)
        foreign llvm move(undef:generic_list(?T), ?tail#0:generic_list(?T))

    1:
        foreign lpvm access($#0:generic_list(?T), 0:wybe.int, 16:wybe.int, 0:wybe.int, ?head#0:?T)
        foreign lpvm access(~$#0:generic_list(?T), 8:wybe.int, 16:wybe.int, 0:wybe.int, ?tail#0:generic_list(?T))
        foreign llvm move(1:wybe.bool, ?$$#0:wybe.bool)



head > public {inline} (0 calls)
0: head($rec#0:generic_list(?T), ?$#0:?T, ?$$#0:wybe.bool):
 AliasPairs: []
 InterestingCallProperties: []
    foreign llvm icmp_ne($rec#0:generic_list(?T), 0:wybe.int, ?tmp$0#0:!wybe.bool)
    case ~tmp$0#0:wybe.bool of
    0:
        foreign llvm move(0:wybe.bool, ?$$#0:wybe.bool)
        foreign llvm move(undef:?T, ?$#0:?T)

    1:
        foreign lpvm access(~$rec#0:generic_list(?T), 0:wybe.int, 16:wybe.int, 0:wybe.int, ?$#0:?T)
        foreign llvm move(1:wybe.bool, ?$$#0:wybe.bool)

head > public {inline} (0 calls)
1: head($rec#0:generic_list(?T), ?$rec#1:generic_list(?T), $field#0:?T, ?$$#0:wybe.bool):
 AliasPairs: []
 InterestingCallProperties: []
    foreign llvm icmp_ne($rec#0:generic_list(?T), 0:wybe.int, ?tmp$0#0:!wybe.bool)
    case ~tmp$0#0:wybe.bool of
    0:
        foreign llvm move(0:wybe.bool, ?$$#0:wybe.bool)
        foreign llvm move(~$rec#0:generic_list(?T), ?$rec#1:generic_list(?T))

    1:
        foreign lpvm mutate(~%$rec#0:generic_list(?T), ?%$rec#1:generic_list(?T), 0:wybe.int, 0:wybe.int, 16:wybe.int, 0:wybe.int, ~$field#0:?T)
        foreign llvm move(1:wybe.bool, ?$$#0:wybe.bool)



length > public (1 calls)
0: length(x#0:generic_list(?T), ?$#0:wybe.int):
 AliasPairs: []
 InterestingCallProperties: []
    foreign llvm icmp_ne(x#0:generic_list(?T), 0:wybe.int, ?tmp$5#0:wybe.bool)
    case ~tmp$5#0:wybe.bool of
    0:
        foreign llvm move(0:wybe.int, ?$#0:wybe.int) @generic_list:8:5

    1:
        foreign lpvm access(~x#0:generic_list(?T), 8:wybe.int, 16:wybe.int, 0:wybe.int, ?t#0:generic_list(?T))
        generic_list.length<0>(~t#0:generic_list(?T), ?tmp$2#0:wybe.int) #1 @generic_list:9:32
        foreign llvm add(~tmp$2#0:wybe.int, 1:wybe.int, ?$#0:wybe.int) @wybe:nn:nn



tail > public {inline} (0 calls)
0: tail($rec#0:generic_list(?T), ?$#0:generic_list(?T), ?$$#0:wybe.bool):
 AliasPairs: []
 InterestingCallProperties: []
    foreign llvm icmp_ne($rec#0:generic_list(?T), 0:wybe.int, ?tmp$0#0:!wybe.bool)
    case ~tmp$0#0:wybe.bool of
    0:
        foreign llvm move(0:wybe.bool, ?$$#0:wybe.bool)
        foreign llvm move(undef:generic_list(?T), ?$#0:generic_list(?T))

    1:
        foreign lpvm access(~$rec#0:generic_list(?T), 8:wybe.int, 16:wybe.int, 0:wybe.int, ?$#0:generic_list(?T))
        foreign llvm move(1:wybe.bool, ?$$#0:wybe.bool)

tail > public {inline} (0 calls)
1: tail($rec#0:generic_list(?T), ?$rec#1:generic_list(?T), $field#0:generic_list(?T), ?$$#0:wybe.bool):
 AliasPairs: []
 InterestingCallProperties: []
    foreign llvm icmp_ne($rec#0:generic_list(?T), 0:wybe.int, ?tmp$0#0:!wybe.bool)
    case ~tmp$0#0:wybe.bool of
    0:
        foreign llvm move(0:wybe.bool, ?$$#0:wybe.bool)
        foreign llvm move(~$rec#0:generic_list(?T), ?$rec#1:generic_list(?T))

    1:
        foreign lpvm {noalias} mutate(~%$rec#0:generic_list(?T), ?%$rec#1:generic_list(?T), 8:wybe.int, 0:wybe.int, 16:wybe.int, 0:wybe.int, ~$field#0:generic_list(?T))
        foreign llvm move(1:wybe.bool, ?$$#0:wybe.bool)


  LLVM code       :

; ModuleID = 'generic_list'


 


declare external ccc  i8* @wybe_malloc(i32)    


declare external ccc  void @llvm.memcpy.p0i8.p0i8.i32(i8*, i8*, i32, i32, i1)    


define external fastcc  i64 @"generic_list.++<0>"(i64  %"x#0", i64  %"y#0")    {
entry:
  %"1$tmp$5#0" = icmp ne i64 %"x#0", 0 
  br i1 %"1$tmp$5#0", label %if.then, label %if.else 
if.then:
  %1 = inttoptr i64 %"x#0" to i64* 
  %2 = getelementptr  i64, i64* %1, i64 0 
  %3 = load  i64, i64* %2 
  %4 = add   i64 %"x#0", 8 
  %5 = inttoptr i64 %4 to i64* 
  %6 = getelementptr  i64, i64* %5, i64 0 
  %7 = load  i64, i64* %6 
  %"2$tmp$2#0" = tail call fastcc  i64  @"generic_list.++<0>"(i64  %7, i64  %"y#0")  
  %8 = trunc i64 16 to i32  
  %9 = tail call ccc  i8*  @wybe_malloc(i32  %8)  
  %10 = ptrtoint i8* %9 to i64 
  %11 = inttoptr i64 %10 to i64* 
  %12 = getelementptr  i64, i64* %11, i64 0 
  store  i64 %3, i64* %12 
  %13 = add   i64 %10, 8 
  %14 = inttoptr i64 %13 to i64* 
  %15 = getelementptr  i64, i64* %14, i64 0 
  store  i64 %"2$tmp$2#0", i64* %15 
  ret i64 %10 
if.else:
  ret i64 %"y#0" 
}


define external fastcc  i64 @"generic_list.[]<0>"()    {
entry:
  ret i64 0 
}


define external fastcc  i64 @"generic_list.[|]<0>"(i64  %"head#0", i64  %"tail#0")    {
entry:
  %16 = trunc i64 16 to i32  
  %17 = tail call ccc  i8*  @wybe_malloc(i32  %16)  
  %18 = ptrtoint i8* %17 to i64 
  %19 = inttoptr i64 %18 to i64* 
  %20 = getelementptr  i64, i64* %19, i64 0 
  store  i64 %"head#0", i64* %20 
  %21 = add   i64 %18, 8 
  %22 = inttoptr i64 %21 to i64* 
  %23 = getelementptr  i64, i64* %22, i64 0 
  store  i64 %"tail#0", i64* %23 
  ret i64 %18 
}


define external fastcc  {i64, i64, i1} @"generic_list.[|]<1>"(i64  %"$#0")    {
entry:
  %"1$tmp$0#0" = icmp ne i64 %"$#0", 0 
  br i1 %"1$tmp$0#0", label %if.then, label %if.else 
if.then:
  %24 = inttoptr i64 %"$#0" to i64* 
  %25 = getelementptr  i64, i64* %24, i64 0 
  %26 = load  i64, i64* %25 
  %27 = add   i64 %"$#0", 8 
  %28 = inttoptr i64 %27 to i64* 
  %29 = getelementptr  i64, i64* %28, i64 0 
  %30 = load  i64, i64* %29 
  %31 = insertvalue {i64, i64, i1} undef, i64 %26, 0 
  %32 = insertvalue {i64, i64, i1} %31, i64 %30, 1 
  %33 = insertvalue {i64, i64, i1} %32, i1 1, 2 
  ret {i64, i64, i1} %33 
if.else:
  %34 = insertvalue {i64, i64, i1} undef, i64 undef, 0 
  %35 = insertvalue {i64, i64, i1} %34, i64 undef, 1 
  %36 = insertvalue {i64, i64, i1} %35, i1 0, 2 
  ret {i64, i64, i1} %36 
}


define external fastcc  {i64, i1} @"generic_list.head<0>"(i64  %"$rec#0")    {
entry:
  %"1$tmp$0#0" = icmp ne i64 %"$rec#0", 0 
  br i1 %"1$tmp$0#0", label %if.then, label %if.else 
if.then:
  %37 = inttoptr i64 %"$rec#0" to i64* 
  %38 = getelementptr  i64, i64* %37, i64 0 
  %39 = load  i64, i64* %38 
  %40 = insertvalue {i64, i1} undef, i64 %39, 0 
  %41 = insertvalue {i64, i1} %40, i1 1, 1 
  ret {i64, i1} %41 
if.else:
  %42 = insertvalue {i64, i1} undef, i64 undef, 0 
  %43 = insertvalue {i64, i1} %42, i1 0, 1 
  ret {i64, i1} %43 
}


define external fastcc  {i64, i1} @"generic_list.head<1>"(i64  %"$rec#0", i64  %"$field#0")    {
entry:
  %"1$tmp$0#0" = icmp ne i64 %"$rec#0", 0 
  br i1 %"1$tmp$0#0", label %if.then, label %if.else 
if.then:
  %44 = trunc i64 16 to i32  
  %45 = tail call ccc  i8*  @wybe_malloc(i32  %44)  
  %46 = ptrtoint i8* %45 to i64 
  %47 = inttoptr i64 %46 to i8* 
  %48 = inttoptr i64 %"$rec#0" to i8* 
  %49 = trunc i64 16 to i32  
  tail call ccc  void  @llvm.memcpy.p0i8.p0i8.i32(i8*  %47, i8*  %48, i32  %49, i32  8, i1  0)  
  %50 = inttoptr i64 %46 to i64* 
  %51 = getelementptr  i64, i64* %50, i64 0 
  store  i64 %"$field#0", i64* %51 
  %52 = insertvalue {i64, i1} undef, i64 %46, 0 
  %53 = insertvalue {i64, i1} %52, i1 1, 1 
  ret {i64, i1} %53 
if.else:
  %54 = insertvalue {i64, i1} undef, i64 %"$rec#0", 0 
  %55 = insertvalue {i64, i1} %54, i1 0, 1 
  ret {i64, i1} %55 
}


define external fastcc  i64 @"generic_list.length<0>"(i64  %"x#0")    {
entry:
  %"1$tmp$5#0" = icmp ne i64 %"x#0", 0 
  br i1 %"1$tmp$5#0", label %if.then, label %if.else 
if.then:
  %56 = add   i64 %"x#0", 8 
  %57 = inttoptr i64 %56 to i64* 
  %58 = getelementptr  i64, i64* %57, i64 0 
  %59 = load  i64, i64* %58 
  %"2$tmp$2#0" = tail call fastcc  i64  @"generic_list.length<0>"(i64  %59)  
  %"2$$#0" = add   i64 %"2$tmp$2#0", 1 
  ret i64 %"2$$#0" 
if.else:
  ret i64 0 
}


define external fastcc  {i64, i1} @"generic_list.tail<0>"(i64  %"$rec#0")    {
entry:
  %"1$tmp$0#0" = icmp ne i64 %"$rec#0", 0 
  br i1 %"1$tmp$0#0", label %if.then, label %if.else 
if.then:
  %60 = add   i64 %"$rec#0", 8 
  %61 = inttoptr i64 %60 to i64* 
  %62 = getelementptr  i64, i64* %61, i64 0 
  %63 = load  i64, i64* %62 
  %64 = insertvalue {i64, i1} undef, i64 %63, 0 
  %65 = insertvalue {i64, i1} %64, i1 1, 1 
  ret {i64, i1} %65 
if.else:
  %66 = insertvalue {i64, i1} undef, i64 undef, 0 
  %67 = insertvalue {i64, i1} %66, i1 0, 1 
  ret {i64, i1} %67 
}


define external fastcc  {i64, i1} @"generic_list.tail<1>"(i64  %"$rec#0", i64  %"$field#0")    {
entry:
  %"1$tmp$0#0" = icmp ne i64 %"$rec#0", 0 
  br i1 %"1$tmp$0#0", label %if.then, label %if.else 
if.then:
  %68 = trunc i64 16 to i32  
  %69 = tail call ccc  i8*  @wybe_malloc(i32  %68)  
  %70 = ptrtoint i8* %69 to i64 
  %71 = inttoptr i64 %70 to i8* 
  %72 = inttoptr i64 %"$rec#0" to i8* 
  %73 = trunc i64 16 to i32  
  tail call ccc  void  @llvm.memcpy.p0i8.p0i8.i32(i8*  %71, i8*  %72, i32  %73, i32  8, i1  0)  
  %74 = add   i64 %70, 8 
  %75 = inttoptr i64 %74 to i64* 
  %76 = getelementptr  i64, i64* %75, i64 0 
  store  i64 %"$field#0", i64* %76 
  %77 = insertvalue {i64, i1} undef, i64 %70, 0 
  %78 = insertvalue {i64, i1} %77, i1 1, 1 
  ret {i64, i1} %78 
if.else:
  %79 = insertvalue {i64, i1} undef, i64 %"$rec#0", 0 
  %80 = insertvalue {i64, i1} %79, i1 0, 1 
  ret {i64, i1} %80 
}
