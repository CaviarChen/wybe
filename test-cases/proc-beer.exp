[ProcDecl Public (ProcProto "print2" [Param "x" (TypeSpec "int" []) ParamIn,Param "y" (TypeSpec "int" []) ParamIn]) [Placed (Loop [Placed (For (InRange "count" (Placed (IntValue 99) "test-cases/proc-beer.frg" (line 2, column 29)) (Placed (Fncall "Negate" [Placed (IntValue 1) "test-cases/proc-beer.frg" (line 2, column 40)]) "test-cases/proc-beer.frg" (line 2, column 38)) (Just (Placed (IntValue 0) "test-cases/proc-beer.frg" (line 2, column 34))))) "test-cases/proc-beer.frg" (line 2, column 12),Placed (NormalStmt (Placed (ProcCall "println" [Placed (StringValue "$count bottles of beer on the wall") "test-cases/proc-beer.frg" (line 3, column 20)]) "test-cases/proc-beer.frg" (line 3, column 12))) "test-cases/proc-beer.frg" (line 3, column 12)]) "test-cases/proc-beer.frg" (line 2, column 8)] (Just "test-cases/proc-beer.frg" (line 1, column 8))]
Module {modImports = fromList [], pubTypes = fromList [], pubResources = fromList [], pubProcs = fromList ["print2"], modTypes = fromList [], modResources = fromList [], modProcs = fromList [("print2",[ProcDef 1 (ProcProto "print2" [Param "x" (TypeSpec "int" []) ParamIn,Param "y" (TypeSpec "int" []) ParamIn]) [Placed (Loop [Placed (For (InRange "count" (Placed (IntValue 99) "test-cases/proc-beer.frg" (line 2, column 29)) (Placed (Fncall "Negate" [Placed (IntValue 1) "test-cases/proc-beer.frg" (line 2, column 40)]) "test-cases/proc-beer.frg" (line 2, column 38)) (Just (Placed (IntValue 0) "test-cases/proc-beer.frg" (line 2, column 34))))) "test-cases/proc-beer.frg" (line 2, column 12),Placed (NormalStmt (Placed (ProcCall "println" [Placed (StringValue "$count bottles of beer on the wall") "test-cases/proc-beer.frg" (line 3, column 20)]) "test-cases/proc-beer.frg" (line 3, column 12))) "test-cases/proc-beer.frg" (line 3, column 12)]) "test-cases/proc-beer.frg" (line 2, column 8)] (Just "test-cases/proc-beer.frg" (line 1, column 8))])], procCount = 1}
