[ProcDecl Public (ProcProto "print2" [Param "x" (TypeSpec "int" []) ParamIn,Param "y" (TypeSpec "int" []) ParamIn]) [Placed (Loop [Placed (For (InRange "count" (IntValue 99) (Fncall "Negate" [IntValue 1]) (Just (IntValue 0)))) "test-cases/proc-beer.frg" (line 2, column 12),Placed (NormalStmt (ProcCall "println" [StringValue "$count bottles of beer on the wall"])) "test-cases/proc-beer.frg" (line 3, column 12)]) "test-cases/proc-beer.frg" (line 2, column 8)] (Just "test-cases/proc-beer.frg" (line 1, column 8))]
Module {modImports = fromList [], pubTypes = fromList [], pubResources = fromList [], pubProcs = fromList ["print2"], modTypes = fromList [], modResources = fromList [], modProcs = fromList [("print2",ProcDef (ProcProto "print2" [Param "x" (TypeSpec "int" []) ParamIn,Param "y" (TypeSpec "int" []) ParamIn]) [Placed (Loop [Placed (For (InRange "count" (IntValue 99) (Fncall "Negate" [IntValue 1]) (Just (IntValue 0)))) "test-cases/proc-beer.frg" (line 2, column 12),Placed (NormalStmt (ProcCall "println" [StringValue "$count bottles of beer on the wall"])) "test-cases/proc-beer.frg" (line 3, column 12)]) "test-cases/proc-beer.frg" (line 2, column 8)] (Just "test-cases/proc-beer.frg" (line 1, column 8)))]}
