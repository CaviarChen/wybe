[ProcDecl Public (ProcProto "yorn" [Param "prompt" (TypeSpec "string" []) ParamIn,Param "result" (TypeSpec "bool" []) ParamOut]) [Placed (Loop [Placed (NormalStmt (ProcCall "print" [Var "prompt"])) "test-cases/proc-yorn2.frg" (line 2, column 9),Placed (NormalStmt (ProcCall "print" [StringValue " (y/n) "])) "test-cases/proc-yorn2.frg" (line 3, column 9),Placed (NormalStmt (ProcCall "read_line" [Var "response"])) "test-cases/proc-yorn2.frg" (line 4, column 9),Placed (NormalStmt (Assign "responsechar" (Fncall "to_upper" [Fncall "first" [Var "response"]]))) "test-cases/proc-yorn2.frg" (line 5, column 9),Placed (NormalStmt (Assign "result" (Fncall "==" [Var "responsechar",CharValue 'Y']))) "test-cases/proc-yorn2.frg" (line 6, column 9),Placed (BreakIf (Fncall "or" [Var "result",Fncall "==" [Var "responsechar",CharValue 'N']])) "test-cases/proc-yorn2.frg" (line 7, column 9),Placed (NormalStmt (ProcCall "println" [StringValue "Please answer 'yes' or 'no'."])) "test-cases/proc-yorn2.frg" (line 8, column 9)]) "test-cases/proc-yorn2.frg" (line 2, column 5)] (Just "test-cases/proc-yorn2.frg" (line 1, column 8))]
Module {modImports = fromList [], pubTypes = fromList [], pubResources = fromList [], pubProcs = fromList ["yorn"], modTypes = fromList [], modResources = fromList [], modProcs = fromList [("yorn",ProcDef (ProcProto "yorn" [Param "prompt" (TypeSpec "string" []) ParamIn,Param "result" (TypeSpec "bool" []) ParamOut]) [Placed (Loop [Placed (NormalStmt (ProcCall "print" [Var "prompt"])) "test-cases/proc-yorn2.frg" (line 2, column 9),Placed (NormalStmt (ProcCall "print" [StringValue " (y/n) "])) "test-cases/proc-yorn2.frg" (line 3, column 9),Placed (NormalStmt (ProcCall "read_line" [Var "response"])) "test-cases/proc-yorn2.frg" (line 4, column 9),Placed (NormalStmt (Assign "responsechar" (Fncall "to_upper" [Fncall "first" [Var "response"]]))) "test-cases/proc-yorn2.frg" (line 5, column 9),Placed (NormalStmt (Assign "result" (Fncall "==" [Var "responsechar",CharValue 'Y']))) "test-cases/proc-yorn2.frg" (line 6, column 9),Placed (BreakIf (Fncall "or" [Var "result",Fncall "==" [Var "responsechar",CharValue 'N']])) "test-cases/proc-yorn2.frg" (line 7, column 9),Placed (NormalStmt (ProcCall "println" [StringValue "Please answer 'yes' or 'no'."])) "test-cases/proc-yorn2.frg" (line 8, column 9)]) "test-cases/proc-yorn2.frg" (line 2, column 5)] (Just "test-cases/proc-yorn2.frg" (line 1, column 8)))]}
