[ProcDecl Public (ProcProto "yorn" [Param "prompt" (TypeSpec "string" []) ParamIn,Param "result" (TypeSpec "bool" []) ParamOut]) [Placed (Loop [Placed (NormalStmt (Placed (ProcCall "print" [ProcArg (Placed (Var "prompt") "test-cases/proc-yorn2.frg" (line 2, column 15)) ParamIn]) "test-cases/proc-yorn2.frg" (line 2, column 9))) "test-cases/proc-yorn2.frg" (line 2, column 9),Placed (NormalStmt (Placed (ProcCall "print" [ProcArg (Placed (StringValue " (y/n) ") "test-cases/proc-yorn2.frg" (line 3, column 15)) ParamIn]) "test-cases/proc-yorn2.frg" (line 3, column 9))) "test-cases/proc-yorn2.frg" (line 3, column 9),Placed (NormalStmt (Placed (ProcCall "read_line" [ProcArg (Placed (Var "response") "test-cases/proc-yorn2.frg" (line 4, column 19)) ParamIn]) "test-cases/proc-yorn2.frg" (line 4, column 9))) "test-cases/proc-yorn2.frg" (line 4, column 9),Placed (NormalStmt (Placed (Assign "responsechar" (Placed (Fncall "to_upper" [Placed (Fncall "first" [Placed (Var "response") "test-cases/proc-yorn2.frg" (line 5, column 39)]) "test-cases/proc-yorn2.frg" (line 5, column 33)]) "test-cases/proc-yorn2.frg" (line 5, column 24))) "test-cases/proc-yorn2.frg" (line 5, column 9))) "test-cases/proc-yorn2.frg" (line 5, column 9),Placed (NormalStmt (Placed (Assign "result" (Placed (Fncall "==" [Placed (Var "responsechar") "test-cases/proc-yorn2.frg" (line 6, column 18),Placed (CharValue 'Y') "test-cases/proc-yorn2.frg" (line 6, column 34)]) "test-cases/proc-yorn2.frg" (line 6, column 18))) "test-cases/proc-yorn2.frg" (line 6, column 9))) "test-cases/proc-yorn2.frg" (line 6, column 9),Placed (BreakIf (Placed (Fncall "or" [Placed (Var "result") "test-cases/proc-yorn2.frg" (line 7, column 15),Placed (Fncall "==" [Placed (Var "responsechar") "test-cases/proc-yorn2.frg" (line 7, column 25),Placed (CharValue 'N') "test-cases/proc-yorn2.frg" (line 7, column 41)]) "test-cases/proc-yorn2.frg" (line 7, column 25)]) "test-cases/proc-yorn2.frg" (line 7, column 15))) "test-cases/proc-yorn2.frg" (line 7, column 9),Placed (NormalStmt (Placed (ProcCall "println" [ProcArg (Placed (StringValue "Please answer 'yes' or 'no'.") "test-cases/proc-yorn2.frg" (line 8, column 17)) ParamIn]) "test-cases/proc-yorn2.frg" (line 8, column 9))) "test-cases/proc-yorn2.frg" (line 8, column 9)]) "test-cases/proc-yorn2.frg" (line 2, column 5)] (Just "test-cases/proc-yorn2.frg" (line 1, column 8))]
Module {modImports = fromList [], pubTypes = fromList [], pubResources = fromList [], pubProcs = fromList ["yorn"], modTypes = fromList [], modResources = fromList [], modProcs = fromList [("yorn",[ProcDef 1 (ProcProto "yorn" [Param "prompt" (TypeSpec "string" []) ParamIn,Param "result" (TypeSpec "bool" []) ParamOut]) [Placed (Loop [Placed (NormalStmt (Placed (ProcCall "print" [ProcArg (Placed (Var "prompt") "test-cases/proc-yorn2.frg" (line 2, column 15)) ParamIn]) "test-cases/proc-yorn2.frg" (line 2, column 9))) "test-cases/proc-yorn2.frg" (line 2, column 9),Placed (NormalStmt (Placed (ProcCall "print" [ProcArg (Placed (StringValue " (y/n) ") "test-cases/proc-yorn2.frg" (line 3, column 15)) ParamIn]) "test-cases/proc-yorn2.frg" (line 3, column 9))) "test-cases/proc-yorn2.frg" (line 3, column 9),Placed (NormalStmt (Placed (ProcCall "read_line" [ProcArg (Placed (Var "response") "test-cases/proc-yorn2.frg" (line 4, column 19)) ParamIn]) "test-cases/proc-yorn2.frg" (line 4, column 9))) "test-cases/proc-yorn2.frg" (line 4, column 9),Placed (NormalStmt (Placed (Assign "responsechar" (Placed (Fncall "to_upper" [Placed (Fncall "first" [Placed (Var "response") "test-cases/proc-yorn2.frg" (line 5, column 39)]) "test-cases/proc-yorn2.frg" (line 5, column 33)]) "test-cases/proc-yorn2.frg" (line 5, column 24))) "test-cases/proc-yorn2.frg" (line 5, column 9))) "test-cases/proc-yorn2.frg" (line 5, column 9),Placed (NormalStmt (Placed (Assign "result" (Placed (Fncall "==" [Placed (Var "responsechar") "test-cases/proc-yorn2.frg" (line 6, column 18),Placed (CharValue 'Y') "test-cases/proc-yorn2.frg" (line 6, column 34)]) "test-cases/proc-yorn2.frg" (line 6, column 18))) "test-cases/proc-yorn2.frg" (line 6, column 9))) "test-cases/proc-yorn2.frg" (line 6, column 9),Placed (BreakIf (Placed (Fncall "or" [Placed (Var "result") "test-cases/proc-yorn2.frg" (line 7, column 15),Placed (Fncall "==" [Placed (Var "responsechar") "test-cases/proc-yorn2.frg" (line 7, column 25),Placed (CharValue 'N') "test-cases/proc-yorn2.frg" (line 7, column 41)]) "test-cases/proc-yorn2.frg" (line 7, column 25)]) "test-cases/proc-yorn2.frg" (line 7, column 15))) "test-cases/proc-yorn2.frg" (line 7, column 9),Placed (NormalStmt (Placed (ProcCall "println" [ProcArg (Placed (StringValue "Please answer 'yes' or 'no'.") "test-cases/proc-yorn2.frg" (line 8, column 17)) ParamIn]) "test-cases/proc-yorn2.frg" (line 8, column 9))) "test-cases/proc-yorn2.frg" (line 8, column 9)]) "test-cases/proc-yorn2.frg" (line 2, column 5)] (Just "test-cases/proc-yorn2.frg" (line 1, column 8))])], procCount = 1}
