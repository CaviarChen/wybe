======================================================================
AFTER EVERYTHING:
 Module nested_if
  public submods  : 
  public types    : 
  public resources: 
  public procs    : nested_if.nested_if<0>
  imports         : use wybe
  types           : 
  resources       : 
  procs           : 

nested_if > public (0 calls)
0: nested_if(i#0:wybe.int, wybe.io$io#0:phantom, ?wybe.io$io#1:phantom):
    foreign llvm icmp eq(i#0:wybe.int, 0:wybe.int, ?tmp$0#0:wybe.bool) @wybe:27:40
    case ~tmp$0#0:wybe.bool of
    0:
        foreign llvm icmp eq(i#0:wybe.int, 1001:wybe.int, ?tmp$1#0:wybe.bool) @wybe:27:40
        case ~tmp$1#0:wybe.bool of
        0:
            foreign llvm icmp eq(~i#0:wybe.int, 2:wybe.int, ?tmp$2#0:wybe.bool) @wybe:27:40
            case ~tmp$2#0:wybe.bool of
            0:
                foreign lpvm cast(1:wybe.bool, ?tmp$3#0:wybe.bool)
                case ~tmp$3#0:wybe.bool of
                0:
                    foreign llvm move(~wybe.io$io#0:phantom, ?wybe.io$io#1:phantom)

                1:
                    foreign c print_string("other":wybe.string, ~#wybe.io$io#0:phantom, ?tmp$12#0:phantom) @wybe:93:41
                    foreign c putchar('\n':wybe.char, ~tmp$12#0:phantom, ?#wybe.io$io#1:phantom) @wybe:79:28


            1:
                foreign c print_string("two":wybe.string, ~#wybe.io$io#0:phantom, ?tmp$12#0:phantom) @wybe:93:41
                foreign c putchar('\n':wybe.char, ~tmp$12#0:phantom, ?#wybe.io$io#1:phantom) @wybe:79:28


        1:
            foreign c print_string("one thousand and one":wybe.string, ~#wybe.io$io#0:phantom, ?tmp$10#0:phantom) @wybe:93:41
            foreign c putchar('\n':wybe.char, ~tmp$10#0:phantom, ?#wybe.io$io#1:phantom) @wybe:79:28


    1:
        foreign c print_string("zero":wybe.string, ~#wybe.io$io#0:phantom, ?tmp$8#0:phantom) @wybe:93:41
        foreign c putchar('\n':wybe.char, ~tmp$8#0:phantom, ?#wybe.io$io#1:phantom) @wybe:79:28

nested_if
======================================================================
AFTER LLVM IR:

; ModuleID = 'nested_if'
source_filename = "test-cases/nested_if.wybe"

@nested_if.7 = constant [6 x i8] c"other\00"
@nested_if.3 = constant [4 x i8] c"two\00"
@nested_if.2 = constant [21 x i8] c"one thousand and one\00"
@nested_if.1 = constant [5 x i8] c"zero\00"

declare void @putchar(i8) local_unnamed_addr

declare void @print_string(i8*) local_unnamed_addr

define void @"nested_if.nested_if<0>"(i64 %"i#0") local_unnamed_addr {
entry:
  switch i64 %"i#0", label %if.then3 [
    i64 0, label %if.then
    i64 1001, label %if.then1
    i64 2, label %if.then2
  ]

if.then:                                          ; preds = %entry
  tail call void @print_string(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @nested_if.1, i64 0, i64 0))
  tail call void @putchar(i8 10)
  ret void

if.then1:                                         ; preds = %entry
  tail call void @print_string(i8* getelementptr inbounds ([21 x i8], [21 x i8]* @nested_if.2, i64 0, i64 0))
  tail call void @putchar(i8 10)
  ret void

if.then2:                                         ; preds = %entry
  tail call void @print_string(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @nested_if.3, i64 0, i64 0))
  tail call void @putchar(i8 10)
  ret void

if.then3:                                         ; preds = %entry
  tail call void @print_string(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @nested_if.7, i64 0, i64 0))
  tail call void @putchar(i8 10)
  ret void
}

