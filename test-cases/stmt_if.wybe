# if case

public type tree { public empty | node(left:tree, key:int, right:tree) }

public def lookup(key:int, tree:tree, ?result:bool) {
    if tree = node(?left, ?nodekey, ?right)::
        if  key = nodekey:: ?result = true
        |   key < nodekey:: lookup(key, left , ?result)
        |   key > nodekey:: lookup(key, right, ?result)
        end
    |   true:: ?result = false
    end
}

def foobar use !io {
    ?tr = node(empty, 1, empty)

    if lookup(1, tr) :: !println("lookup succeeds when it should")
    | true           :: !println("lookup fails when it should succeed")
    end
# if lookup(3, tr) :: !println("lookup fails when it should")
# | true           :: !println("lookup succeeds when it should fail")
# end
}
