======================================================================
AFTER EVERYTHING:
 Module person3
  public submods  : 
  public types    : person: (person3.person,"pointer")
  public resources: 
  public procs    : person3.<0>
                    person3.person.=<0>
                    person3.person.=<1>
                    person3.person.=<2>
                    person3.person.firstname<0>
                    person3.person.firstname<1>
                    person3.person.lastname<0>
                    person3.person.lastname<1>
                    person3.person.person<0>
                    person3.person.person<1>
  imports         : public use person3.person
                    use wybe
  types           : person/0 (pointer)  @person3:1:8
  resources       : 
  procs           : 

*main* > public (0 calls)
0: (wybe.io$io#0:wybe.phantom, ?wybe.io$io#2:wybe.phantom): AliasPairs: []
    foreign lpvm alloc(16:wybe.int, ?tmp$5#0:person3.person)
    foreign lpvm mutate(~tmp$5#0:person3.person, ?tmp$6#0:person3.person, 16:wybe.int, 0:wybe.int, 1:wybe.int, "John":wybe.string)
    foreign lpvm mutate(~tmp$6#0:person3.person, ?tmp$7#0:person3.person, 16:wybe.int, 8:wybe.int, 1:wybe.int, "Smith":wybe.string)
    foreign lpvm mutate(tmp$7#0:person3.person, ?%personB#1:person3.person, 16:wybe.int, 0:wybe.int, 0:wybe.int, "Jane":wybe.string)
    foreign lpvm mutate(~%personB#1:person3.person, ?%personB#2:person3.person, 16:wybe.int, 8:wybe.int, 1:wybe.int, "Wang":wybe.string)
    foreign lpvm access(~tmp$7#0:person3.person, 8:wybe.int, ?tmp$1#0:wybe.string)
    foreign c print_string(~tmp$1#0:wybe.string, ~#wybe.io$io#0:wybe.phantom, ?#wybe.io$io#1:wybe.phantom) @wybe:92:41
    foreign lpvm access(~personB#2:person3.person, 8:wybe.int, ?tmp$2#0:wybe.string)
    foreign c print_string(~tmp$2#0:wybe.string, ~#wybe.io$io#1:wybe.phantom, ?#wybe.io$io#2:wybe.phantom) @wybe:92:41
  submodules      : person3.person
--------------------------------------------------
 Module person3.person([])
  public submods  : 
  public types    : 
  public resources: 
  public procs    : person3.person.=<0>
                    person3.person.=<1>
                    person3.person.=<2>
                    person3.person.firstname<0>
                    person3.person.firstname<1>
                    person3.person.lastname<0>
                    person3.person.lastname<1>
                    person3.person.person<0>
                    person3.person.person<1>
  imports         : use person3
                    use wybe
  types           : 
  resources       : 
  procs           : 

= > public inline (0 calls)
0: =(?out#0:person3.person, in#0:person3.person): AliasPairs: []
    foreign llvm move(~in#0:person3.person, ?out#0:person3.person)
= > public inline (0 calls)
1: =(in#0:person3.person, ?out#0:person3.person): AliasPairs: []
    foreign llvm move(~in#0:person3.person, ?out#0:person3.person)
= > public inline test (3 calls)
2: =($left#0:person3.person, $right#0:person3.person, ?$$#0:wybe.bool): AliasPairs: []
    foreign lpvm access($left#0:person3.person, 0:wybe.int, ?$left$firstname#0:wybe.string)
    foreign lpvm access(~$left#0:person3.person, 8:wybe.int, ?$left$lastname#0:wybe.string)
    foreign lpvm access($right#0:person3.person, 0:wybe.int, ?$right$firstname#0:wybe.string)
    foreign lpvm access(~$right#0:person3.person, 8:wybe.int, ?$right$lastname#0:wybe.string)
    foreign c strcmp(~$left$firstname#0:wybe.string, ~$right$firstname#0:wybe.string, ?tmp$8#0:wybe.int) @wybe:61:46
    wybe.int.=<2>(~tmp$8#0:wybe.int, 0:wybe.int, ?tmp$2#0:wybe.bool) @wybe:61:46
    case ~tmp$2#0:wybe.bool of
    0:
        foreign llvm move(0:wybe.bool, ?$$#0:wybe.bool)

    1:
        foreign c strcmp(~$left$lastname#0:wybe.string, ~$right$lastname#0:wybe.string, ?tmp$11#0:wybe.int) @wybe:61:46
        wybe.int.=<2>(~tmp$11#0:wybe.int, 0:wybe.int, ?$$#0:wybe.bool) @wybe:61:46



firstname > public inline (0 calls)
0: firstname($rec#0:person3.person, ?$#0:wybe.string): AliasPairs: []
    foreign lpvm access(~$rec#0:person3.person, 0:wybe.int, ?$#0:wybe.string)
firstname > public inline (0 calls)
1: firstname($rec#0:person3.person, ?$rec#1:person3.person, $field#0:wybe.string): AliasPairs: []
    foreign lpvm mutate(~%$rec#0:person3.person, ?%$rec#1:person3.person, 16:wybe.int, 0:wybe.int, 0:wybe.int, ~$field#0:wybe.string)


lastname > public inline (0 calls)
0: lastname($rec#0:person3.person, ?$#0:wybe.string): AliasPairs: []
    foreign lpvm access(~$rec#0:person3.person, 8:wybe.int, ?$#0:wybe.string)
lastname > public inline (0 calls)
1: lastname($rec#0:person3.person, ?$rec#1:person3.person, $field#0:wybe.string): AliasPairs: []
    foreign lpvm mutate(~%$rec#0:person3.person, ?%$rec#1:person3.person, 16:wybe.int, 8:wybe.int, 0:wybe.int, ~$field#0:wybe.string)


person > public inline (0 calls)
0: person(firstname#0:wybe.string, lastname#0:wybe.string, ?$#0:person3.person): AliasPairs: []
    foreign lpvm alloc(16:wybe.int, ?$rec#0:person3.person)
    foreign lpvm mutate(~%$rec#0:person3.person, ?%$rec#1:person3.person, 16:wybe.int, 0:wybe.int, 1:wybe.int, ~firstname#0:wybe.string)
    foreign lpvm mutate(~%$rec#1:person3.person, ?%$#0:person3.person, 16:wybe.int, 8:wybe.int, 1:wybe.int, ~lastname#0:wybe.string)
person > public inline (4 calls)
1: person(?firstname#0:wybe.string, ?lastname#0:wybe.string, $#0:person3.person): AliasPairs: []
    foreign lpvm access($#0:person3.person, 0:wybe.int, ?firstname#0:wybe.string)
    foreign lpvm access(~$#0:person3.person, 8:wybe.int, ?lastname#0:wybe.string)
person3, person3.person
======================================================================
AFTER LLVM IR:

; ModuleID = 'person3'
source_filename = "test-cases/person3.wybe"

@person3.16 = constant [5 x i8] c"Wang\00"
@person3.9 = constant [5 x i8] c"Jane\00"
@person3.6 = constant [6 x i8] c"Smith\00"
@person3.3 = constant [5 x i8] c"John\00"

declare void @print_string(i8*) local_unnamed_addr

declare i8* @wybe_malloc(i32) local_unnamed_addr

declare void @llvm.memcpy.p0i8.p0i8.i32(i8*, i8*, i32, i1)

define i32 @person3.main() local_unnamed_addr {
entry:
  %0 = tail call i8* @wybe_malloc(i32 16)
  %1 = bitcast i8* %0 to i8**
  store i8* getelementptr inbounds ([5 x i8], [5 x i8]* @person3.3, i64 0, i64 0), i8** %1, align 8
  %2 = getelementptr i8, i8* %0, i64 64
  %3 = bitcast i8* %2 to i8**
  store i8* getelementptr inbounds ([6 x i8], [6 x i8]* @person3.6, i64 0, i64 0), i8** %3, align 8
  %4 = tail call i8* @wybe_malloc(i32 16)
  tail call void @llvm.memcpy.p0i8.p0i8.i32(i8* %4, i8* %0, i32 16, i1 false)
  %5 = bitcast i8* %4 to i8**
  store i8* getelementptr inbounds ([5 x i8], [5 x i8]* @person3.9, i64 0, i64 0), i8** %5, align 8
  %6 = getelementptr i8, i8* %4, i64 64
  %7 = bitcast i8* %6 to i8**
  store i8* getelementptr inbounds ([5 x i8], [5 x i8]* @person3.16, i64 0, i64 0), i8** %7, align 8
  %8 = load i8*, i8** %3, align 8
  tail call void @print_string(i8* %8)
  %9 = load i8*, i8** %7, align 8
  tail call void @print_string(i8* %9)
  ret i32 0
}

declare i1 @"wybe.int.=<2>"(i64, i64) local_unnamed_addr

declare i64 @strcmp(i8*, i8*) local_unnamed_addr

; Function Attrs: norecurse nounwind readnone
define i64* @"person3.person.=<0>"(i64* readnone returned %"in#0") local_unnamed_addr #0 {
entry:
  ret i64* %"in#0"
}

; Function Attrs: norecurse nounwind readnone
define i64* @"person3.person.=<1>"(i64* readnone returned %"in#0") local_unnamed_addr #0 {
entry:
  ret i64* %"in#0"
}

define i1 @"person3.person.=<2>"(i64* nocapture readonly %"$left#0", i64* nocapture readonly %"$right#0") local_unnamed_addr {
entry:
  %0 = bitcast i64* %"$left#0" to i8**
  %1 = load i8*, i8** %0, align 8
  %2 = getelementptr i64, i64* %"$left#0", i64 8
  %3 = bitcast i64* %2 to i8**
  %4 = load i8*, i8** %3, align 8
  %5 = bitcast i64* %"$right#0" to i8**
  %6 = load i8*, i8** %5, align 8
  %7 = getelementptr i64, i64* %"$right#0", i64 8
  %8 = bitcast i64* %7 to i8**
  %9 = load i8*, i8** %8, align 8
  %"tmp$8#0" = tail call i64 @strcmp(i8* %1, i8* %6)
  %"tmp$2#0" = tail call i1 @"wybe.int.=<2>"(i64 %"tmp$8#0", i64 0)
  br i1 %"tmp$2#0", label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %"tmp$11#0" = tail call i64 @strcmp(i8* %4, i8* %9)
  %"$$#0" = tail call i1 @"wybe.int.=<2>"(i64 %"tmp$11#0", i64 0)
  ret i1 %"$$#0"

if.else:                                          ; preds = %entry
  ret i1 false
}

; Function Attrs: norecurse nounwind readonly
define i8* @"person3.person.firstname<0>"(i64* nocapture readonly %"$rec#0") local_unnamed_addr #1 {
entry:
  %0 = bitcast i64* %"$rec#0" to i8**
  %1 = load i8*, i8** %0, align 8
  ret i8* %1
}

define i64* @"person3.person.firstname<1>"(i64* %"$rec#0", i8* %"$field#0") local_unnamed_addr {
entry:
  %0 = tail call i8* @wybe_malloc(i32 16)
  %1 = bitcast i8* %0 to i64*
  %2 = bitcast i64* %"$rec#0" to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i32(i8* %0, i8* %2, i32 16, i1 false)
  %3 = bitcast i8* %0 to i8**
  store i8* %"$field#0", i8** %3, align 8
  ret i64* %1
}

; Function Attrs: norecurse nounwind readonly
define i8* @"person3.person.lastname<0>"(i64* nocapture readonly %"$rec#0") local_unnamed_addr #1 {
entry:
  %0 = getelementptr i64, i64* %"$rec#0", i64 8
  %1 = bitcast i64* %0 to i8**
  %2 = load i8*, i8** %1, align 8
  ret i8* %2
}

define i64* @"person3.person.lastname<1>"(i64* %"$rec#0", i8* %"$field#0") local_unnamed_addr {
entry:
  %0 = tail call i8* @wybe_malloc(i32 16)
  %1 = bitcast i8* %0 to i64*
  %2 = bitcast i64* %"$rec#0" to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i32(i8* %0, i8* %2, i32 16, i1 false)
  %3 = getelementptr i8, i8* %0, i64 64
  %4 = bitcast i8* %3 to i8**
  store i8* %"$field#0", i8** %4, align 8
  ret i64* %1
}

define i64* @"person3.person.person<0>"(i8* %"firstname#0", i8* %"lastname#0") local_unnamed_addr {
entry:
  %0 = tail call i8* @wybe_malloc(i32 16)
  %1 = bitcast i8* %0 to i64*
  %2 = bitcast i8* %0 to i8**
  store i8* %"firstname#0", i8** %2, align 8
  %3 = getelementptr i8, i8* %0, i64 64
  %4 = bitcast i8* %3 to i8**
  store i8* %"lastname#0", i8** %4, align 8
  ret i64* %1
}

; Function Attrs: norecurse nounwind readonly
define { i8*, i8* } @"person3.person.person<1>"(i64* nocapture readonly %"$#0") local_unnamed_addr #1 {
entry:
  %0 = bitcast i64* %"$#0" to i8**
  %1 = load i8*, i8** %0, align 8
  %2 = getelementptr i64, i64* %"$#0", i64 8
  %3 = bitcast i64* %2 to i8**
  %4 = load i8*, i8** %3, align 8
  %5 = insertvalue { i8*, i8* } undef, i8* %1, 0
  %6 = insertvalue { i8*, i8* } %5, i8* %4, 1
  ret { i8*, i8* } %6
}

attributes #0 = { norecurse nounwind readnone }
attributes #1 = { norecurse nounwind readonly }

--------------------------------------------------
; ModuleID = 'person3.person'
source_filename = "test-cases"

declare i1 @"wybe.int.=<2>"(i64, i64) local_unnamed_addr

declare i64 @strcmp(i8*, i8*) local_unnamed_addr

declare i8* @wybe_malloc(i32) local_unnamed_addr

declare void @llvm.memcpy.p0i8.p0i8.i32(i8*, i8*, i32, i1)

; Function Attrs: norecurse nounwind readnone
define i64* @"person3.person.=<0>"(i64* readnone returned %"in#0") local_unnamed_addr #0 {
entry:
  ret i64* %"in#0"
}

; Function Attrs: norecurse nounwind readnone
define i64* @"person3.person.=<1>"(i64* readnone returned %"in#0") local_unnamed_addr #0 {
entry:
  ret i64* %"in#0"
}

define i1 @"person3.person.=<2>"(i64* nocapture readonly %"$left#0", i64* nocapture readonly %"$right#0") local_unnamed_addr {
entry:
  %0 = bitcast i64* %"$left#0" to i8**
  %1 = load i8*, i8** %0, align 8
  %2 = getelementptr i64, i64* %"$left#0", i64 8
  %3 = bitcast i64* %2 to i8**
  %4 = load i8*, i8** %3, align 8
  %5 = bitcast i64* %"$right#0" to i8**
  %6 = load i8*, i8** %5, align 8
  %7 = getelementptr i64, i64* %"$right#0", i64 8
  %8 = bitcast i64* %7 to i8**
  %9 = load i8*, i8** %8, align 8
  %"tmp$8#0" = tail call i64 @strcmp(i8* %1, i8* %6)
  %"tmp$2#0" = tail call i1 @"wybe.int.=<2>"(i64 %"tmp$8#0", i64 0)
  br i1 %"tmp$2#0", label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %"tmp$11#0" = tail call i64 @strcmp(i8* %4, i8* %9)
  %"$$#0" = tail call i1 @"wybe.int.=<2>"(i64 %"tmp$11#0", i64 0)
  ret i1 %"$$#0"

if.else:                                          ; preds = %entry
  ret i1 false
}

; Function Attrs: norecurse nounwind readonly
define i8* @"person3.person.firstname<0>"(i64* nocapture readonly %"$rec#0") local_unnamed_addr #1 {
entry:
  %0 = bitcast i64* %"$rec#0" to i8**
  %1 = load i8*, i8** %0, align 8
  ret i8* %1
}

define i64* @"person3.person.firstname<1>"(i64* %"$rec#0", i8* %"$field#0") local_unnamed_addr {
entry:
  %0 = tail call i8* @wybe_malloc(i32 16)
  %1 = bitcast i8* %0 to i64*
  %2 = bitcast i64* %"$rec#0" to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i32(i8* %0, i8* %2, i32 16, i1 false)
  %3 = bitcast i8* %0 to i8**
  store i8* %"$field#0", i8** %3, align 8
  ret i64* %1
}

; Function Attrs: norecurse nounwind readonly
define i8* @"person3.person.lastname<0>"(i64* nocapture readonly %"$rec#0") local_unnamed_addr #1 {
entry:
  %0 = getelementptr i64, i64* %"$rec#0", i64 8
  %1 = bitcast i64* %0 to i8**
  %2 = load i8*, i8** %1, align 8
  ret i8* %2
}

define i64* @"person3.person.lastname<1>"(i64* %"$rec#0", i8* %"$field#0") local_unnamed_addr {
entry:
  %0 = tail call i8* @wybe_malloc(i32 16)
  %1 = bitcast i8* %0 to i64*
  %2 = bitcast i64* %"$rec#0" to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i32(i8* %0, i8* %2, i32 16, i1 false)
  %3 = getelementptr i8, i8* %0, i64 64
  %4 = bitcast i8* %3 to i8**
  store i8* %"$field#0", i8** %4, align 8
  ret i64* %1
}

define i64* @"person3.person.person<0>"(i8* %"firstname#0", i8* %"lastname#0") local_unnamed_addr {
entry:
  %0 = tail call i8* @wybe_malloc(i32 16)
  %1 = bitcast i8* %0 to i64*
  %2 = bitcast i8* %0 to i8**
  store i8* %"firstname#0", i8** %2, align 8
  %3 = getelementptr i8, i8* %0, i64 64
  %4 = bitcast i8* %3 to i8**
  store i8* %"lastname#0", i8** %4, align 8
  ret i64* %1
}

; Function Attrs: norecurse nounwind readonly
define { i8*, i8* } @"person3.person.person<1>"(i64* nocapture readonly %"$#0") local_unnamed_addr #1 {
entry:
  %0 = bitcast i64* %"$#0" to i8**
  %1 = load i8*, i8** %0, align 8
  %2 = getelementptr i64, i64* %"$#0", i64 8
  %3 = bitcast i64* %2 to i8**
  %4 = load i8*, i8** %3, align 8
  %5 = insertvalue { i8*, i8* } undef, i8* %1, 0
  %6 = insertvalue { i8*, i8* } %5, i8* %4, 1
  ret { i8*, i8* } %6
}

attributes #0 = { norecurse nounwind readnone }
attributes #1 = { norecurse nounwind readonly }

