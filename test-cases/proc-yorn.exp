[ProcDecl Public (ProcProto "yorn" [Param "prompt" (TypeSpec "string" []) ParamIn,Param "result" (TypeSpec "bool" []) ParamOut]) [Placed (Loop [Placed (NormalStmt (Placed (ProcCall "print" [Placed (Var "prompt") "test-cases/proc-yorn.frg" (line 2, column 18)]) "test-cases/proc-yorn.frg" (line 2, column 12))) "test-cases/proc-yorn.frg" (line 2, column 12),Placed (NormalStmt (Placed (ProcCall "print" [Placed (StringValue " (y/n) ") "test-cases/proc-yorn.frg" (line 3, column 18)]) "test-cases/proc-yorn.frg" (line 3, column 12))) "test-cases/proc-yorn.frg" (line 3, column 12),Placed (NormalStmt (Placed (ProcCall "read_char" [Placed (Var "response") "test-cases/proc-yorn.frg" (line 4, column 22)]) "test-cases/proc-yorn.frg" (line 4, column 12))) "test-cases/proc-yorn.frg" (line 4, column 12),Placed (NormalStmt (Placed (Assign "result" (Placed (Fncall "is_yes" [Placed (Var "response") "test-cases/proc-yorn.frg" (line 5, column 28)]) "test-cases/proc-yorn.frg" (line 5, column 21))) "test-cases/proc-yorn.frg" (line 5, column 12))) "test-cases/proc-yorn.frg" (line 5, column 12),Placed (NextIf (Placed (Fncall "is_yes_or_no" [Placed (Var "response") "test-cases/proc-yorn.frg" (line 6, column 32)]) "test-cases/proc-yorn.frg" (line 6, column 19))) "test-cases/proc-yorn.frg" (line 6, column 12),Placed (NormalStmt (Placed (ProcCall "println" [Placed (StringValue "Please answer 'yes' or 'no'.") "test-cases/proc-yorn.frg" (line 7, column 20)]) "test-cases/proc-yorn.frg" (line 7, column 12))) "test-cases/proc-yorn.frg" (line 7, column 12),Placed (BreakIf (Placed (Fncall "is_yes_or_no" [Placed (Var "response") "test-cases/proc-yorn.frg" (line 8, column 31)]) "test-cases/proc-yorn.frg" (line 8, column 18))) "test-cases/proc-yorn.frg" (line 8, column 12)]) "test-cases/proc-yorn.frg" (line 2, column 8)] (Just "test-cases/proc-yorn.frg" (line 1, column 8))]
Module {modImports = fromList [], pubTypes = fromList [], pubResources = fromList [], pubProcs = fromList ["yorn"], modTypes = fromList [], modResources = fromList [], modProcs = fromList [("yorn",[ProcDef 1 (ProcProto "yorn" [Param "prompt" (TypeSpec "string" []) ParamIn,Param "result" (TypeSpec "bool" []) ParamOut]) [Placed (Loop [Placed (NormalStmt (Placed (ProcCall "print" [Placed (Var "prompt") "test-cases/proc-yorn.frg" (line 2, column 18)]) "test-cases/proc-yorn.frg" (line 2, column 12))) "test-cases/proc-yorn.frg" (line 2, column 12),Placed (NormalStmt (Placed (ProcCall "print" [Placed (StringValue " (y/n) ") "test-cases/proc-yorn.frg" (line 3, column 18)]) "test-cases/proc-yorn.frg" (line 3, column 12))) "test-cases/proc-yorn.frg" (line 3, column 12),Placed (NormalStmt (Placed (ProcCall "read_char" [Placed (Var "response") "test-cases/proc-yorn.frg" (line 4, column 22)]) "test-cases/proc-yorn.frg" (line 4, column 12))) "test-cases/proc-yorn.frg" (line 4, column 12),Placed (NormalStmt (Placed (Assign "result" (Placed (Fncall "is_yes" [Placed (Var "response") "test-cases/proc-yorn.frg" (line 5, column 28)]) "test-cases/proc-yorn.frg" (line 5, column 21))) "test-cases/proc-yorn.frg" (line 5, column 12))) "test-cases/proc-yorn.frg" (line 5, column 12),Placed (NextIf (Placed (Fncall "is_yes_or_no" [Placed (Var "response") "test-cases/proc-yorn.frg" (line 6, column 32)]) "test-cases/proc-yorn.frg" (line 6, column 19))) "test-cases/proc-yorn.frg" (line 6, column 12),Placed (NormalStmt (Placed (ProcCall "println" [Placed (StringValue "Please answer 'yes' or 'no'.") "test-cases/proc-yorn.frg" (line 7, column 20)]) "test-cases/proc-yorn.frg" (line 7, column 12))) "test-cases/proc-yorn.frg" (line 7, column 12),Placed (BreakIf (Placed (Fncall "is_yes_or_no" [Placed (Var "response") "test-cases/proc-yorn.frg" (line 8, column 31)]) "test-cases/proc-yorn.frg" (line 8, column 18))) "test-cases/proc-yorn.frg" (line 8, column 12)]) "test-cases/proc-yorn.frg" (line 2, column 8)] (Just "test-cases/proc-yorn.frg" (line 1, column 8))])], procCount = 1}
