======================================================================
AFTER EVERYTHING:
 Module type_enum
  public submods  : 
  public types    : season: (type_enum.season,"i2")
  public resources: 
  public procs    : type_enum.season.=<0>
                    type_enum.season.=<1>
                    type_enum.season.autumn<0>
                    type_enum.season.autumn<1>
                    type_enum.season.spring<0>
                    type_enum.season.spring<1>
                    type_enum.season.summer<0>
                    type_enum.season.summer<1>
                    type_enum.season.winter<0>
                    type_enum.season.winter<1>
  imports         : public use type_enum.season
                    use wybe
  types           : season/0 (i2)  @type_enum:1:8
  resources       : 
  procs           : 

  submodules      : type_enum.season
--------------------------------------------------
 Module type_enum.season([])
  public submods  : 
  public types    : 
  public resources: 
  public procs    : type_enum.season.=<0>
                    type_enum.season.=<1>
                    type_enum.season.autumn<0>
                    type_enum.season.autumn<1>
                    type_enum.season.spring<0>
                    type_enum.season.spring<1>
                    type_enum.season.summer<0>
                    type_enum.season.summer<1>
                    type_enum.season.winter<0>
                    type_enum.season.winter<1>
  imports         : use wybe
  types           : 
  resources       : 
  procs           : 

= > public inline (0 calls)
0: =(?out#0:type_enum.season, in#0:type_enum.season):
    foreign llvm move(~in#0:type_enum.season, ?out#0:type_enum.season)
= > public inline (0 calls)
1: =(in#0:type_enum.season, ?out#0:type_enum.season):
    foreign llvm move(~in#0:type_enum.season, ?out#0:type_enum.season)


autumn > public inline (0 calls)
0: autumn(?$#0:type_enum.season):
    foreign lpvm cast(3:season, ?$#0:type_enum.season)
autumn > public inline test (0 calls)
1: autumn($#0:type_enum.season, ?$$#1:wybe.bool, ?$$#1:wybe.bool):
    foreign lpvm cast(~$#0:type_enum.season, ?$int#0:wybe.int)
    foreign llvm icmp eq(~$int#0:wybe.int, 3:wybe.int, ?$succeed#0:wybe.bool)
    foreign llvm move(~$succeed#0:wybe.bool, ?$$#1:wybe.bool)


spring > public inline (0 calls)
0: spring(?$#0:type_enum.season):
    foreign lpvm cast(1:season, ?$#0:type_enum.season)
spring > public inline test (0 calls)
1: spring($#0:type_enum.season, ?$$#1:wybe.bool, ?$$#1:wybe.bool):
    foreign lpvm cast(~$#0:type_enum.season, ?$int#0:wybe.int)
    foreign llvm icmp eq(~$int#0:wybe.int, 1:wybe.int, ?$succeed#0:wybe.bool)
    foreign llvm move(~$succeed#0:wybe.bool, ?$$#1:wybe.bool)


summer > public inline (0 calls)
0: summer(?$#0:type_enum.season):
    foreign lpvm cast(2:season, ?$#0:type_enum.season)
summer > public inline test (0 calls)
1: summer($#0:type_enum.season, ?$$#1:wybe.bool, ?$$#1:wybe.bool):
    foreign lpvm cast(~$#0:type_enum.season, ?$int#0:wybe.int)
    foreign llvm icmp eq(~$int#0:wybe.int, 2:wybe.int, ?$succeed#0:wybe.bool)
    foreign llvm move(~$succeed#0:wybe.bool, ?$$#1:wybe.bool)


winter > public inline (0 calls)
0: winter(?$#0:type_enum.season):
    foreign lpvm cast(0:season, ?$#0:type_enum.season)
winter > public inline test (0 calls)
1: winter($#0:type_enum.season, ?$$#1:wybe.bool, ?$$#1:wybe.bool):
    foreign lpvm cast(~$#0:type_enum.season, ?$int#0:wybe.int)
    foreign llvm icmp eq(~$int#0:wybe.int, 0:wybe.int, ?$succeed#0:wybe.bool)
    foreign llvm move(~$succeed#0:wybe.bool, ?$$#1:wybe.bool)
type_enum, type_enum.season
======================================================================
AFTER LLVM IR:

; ModuleID = 'type_enum'

; Function Attrs: nounwind readnone
define i2 @"type_enum.season.=<0>"(i2 %"in#0") #0 {
entry:
  ret i2 %"in#0"
}

; Function Attrs: nounwind readnone
define i2 @"type_enum.season.=<1>"(i2 %"in#0") #0 {
entry:
  ret i2 %"in#0"
}

; Function Attrs: nounwind readnone
define i2 @"type_enum.season.autumn<0>"() #0 {
entry:
  ret i2 -1
}

; Function Attrs: nounwind readnone
define { i1, i1 } @"type_enum.season.autumn<1>"(i2 %"$#0") #0 {
entry:
  %"$succeed#0" = icmp eq i2 %"$#0", -1
  %0 = insertvalue { i1, i1 } undef, i1 %"$succeed#0", 0
  %1 = insertvalue { i1, i1 } %0, i1 %"$succeed#0", 1
  ret { i1, i1 } %1
}

; Function Attrs: nounwind readnone
define i2 @"type_enum.season.spring<0>"() #0 {
entry:
  ret i2 1
}

; Function Attrs: nounwind readnone
define { i1, i1 } @"type_enum.season.spring<1>"(i2 %"$#0") #0 {
entry:
  %"$succeed#0" = icmp eq i2 %"$#0", 1
  %0 = insertvalue { i1, i1 } undef, i1 %"$succeed#0", 0
  %1 = insertvalue { i1, i1 } %0, i1 %"$succeed#0", 1
  ret { i1, i1 } %1
}

; Function Attrs: nounwind readnone
define i2 @"type_enum.season.summer<0>"() #0 {
entry:
  ret i2 -2
}

; Function Attrs: nounwind readnone
define { i1, i1 } @"type_enum.season.summer<1>"(i2 %"$#0") #0 {
entry:
  %"$succeed#0" = icmp eq i2 %"$#0", -2
  %0 = insertvalue { i1, i1 } undef, i1 %"$succeed#0", 0
  %1 = insertvalue { i1, i1 } %0, i1 %"$succeed#0", 1
  ret { i1, i1 } %1
}

; Function Attrs: nounwind readnone
define i2 @"type_enum.season.winter<0>"() #0 {
entry:
  ret i2 0
}

; Function Attrs: nounwind readnone
define { i1, i1 } @"type_enum.season.winter<1>"(i2 %"$#0") #0 {
entry:
  %"$succeed#0" = icmp eq i2 %"$#0", 0
  %0 = insertvalue { i1, i1 } undef, i1 %"$succeed#0", 0
  %1 = insertvalue { i1, i1 } %0, i1 %"$succeed#0", 1
  ret { i1, i1 } %1
}

attributes #0 = { nounwind readnone }

--------------------------------------------------
; ModuleID = 'type_enum.season'

; Function Attrs: nounwind readnone
define i2 @"type_enum.season.=<0>"(i2 %"in#0") #0 {
entry:
  ret i2 %"in#0"
}

; Function Attrs: nounwind readnone
define i2 @"type_enum.season.=<1>"(i2 %"in#0") #0 {
entry:
  ret i2 %"in#0"
}

; Function Attrs: nounwind readnone
define i2 @"type_enum.season.autumn<0>"() #0 {
entry:
  ret i2 -1
}

; Function Attrs: nounwind readnone
define { i1, i1 } @"type_enum.season.autumn<1>"(i2 %"$#0") #0 {
entry:
  %"$succeed#0" = icmp eq i2 %"$#0", -1
  %0 = insertvalue { i1, i1 } undef, i1 %"$succeed#0", 0
  %1 = insertvalue { i1, i1 } %0, i1 %"$succeed#0", 1
  ret { i1, i1 } %1
}

; Function Attrs: nounwind readnone
define i2 @"type_enum.season.spring<0>"() #0 {
entry:
  ret i2 1
}

; Function Attrs: nounwind readnone
define { i1, i1 } @"type_enum.season.spring<1>"(i2 %"$#0") #0 {
entry:
  %"$succeed#0" = icmp eq i2 %"$#0", 1
  %0 = insertvalue { i1, i1 } undef, i1 %"$succeed#0", 0
  %1 = insertvalue { i1, i1 } %0, i1 %"$succeed#0", 1
  ret { i1, i1 } %1
}

; Function Attrs: nounwind readnone
define i2 @"type_enum.season.summer<0>"() #0 {
entry:
  ret i2 -2
}

; Function Attrs: nounwind readnone
define { i1, i1 } @"type_enum.season.summer<1>"(i2 %"$#0") #0 {
entry:
  %"$succeed#0" = icmp eq i2 %"$#0", -2
  %0 = insertvalue { i1, i1 } undef, i1 %"$succeed#0", 0
  %1 = insertvalue { i1, i1 } %0, i1 %"$succeed#0", 1
  ret { i1, i1 } %1
}

; Function Attrs: nounwind readnone
define i2 @"type_enum.season.winter<0>"() #0 {
entry:
  ret i2 0
}

; Function Attrs: nounwind readnone
define { i1, i1 } @"type_enum.season.winter<1>"(i2 %"$#0") #0 {
entry:
  %"$succeed#0" = icmp eq i2 %"$#0", 0
  %0 = insertvalue { i1, i1 } undef, i1 %"$succeed#0", 0
  %1 = insertvalue { i1, i1 } %0, i1 %"$succeed#0", 1
  ret { i1, i1 } %1
}

attributes #0 = { nounwind readnone }

