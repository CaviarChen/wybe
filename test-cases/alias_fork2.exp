======================================================================
AFTER EVERYTHING:
 Module alias_fork2
  public submods  : 
  public types    : 
  public resources: 
  public procs    : alias_fork2.<0>
                    alias_fork2.simpleMerge<0>
  imports         : use mytree
                    use wybe
  types           : 
  resources       : 
  procs           : 

*main* > public (0 calls)
0: (wybe.io$io#0:wybe.phantom, ?wybe.io$io#4:wybe.phantom): AliasPairs: []
    foreign lpvm cast(0:mytree.tree, ?tmp$1#0:mytree.tree)
    foreign lpvm alloc(24:wybe.int, ?tmp$10#0:mytree.tree)
    foreign lpvm mutate(~tmp$10#0:mytree.tree, ?tmp$11#0:mytree.tree, 24:wybe.int, 0:wybe.int, 1:wybe.int, tmp$1#0:mytree.tree)
    foreign lpvm mutate(~tmp$11#0:mytree.tree, ?tmp$12#0:mytree.tree, 24:wybe.int, 8:wybe.int, 1:wybe.int, 1:wybe.int)
    foreign lpvm mutate(~tmp$12#0:mytree.tree, ?tmp$0#0:mytree.tree, 24:wybe.int, 16:wybe.int, 1:wybe.int, tmp$1#0:mytree.tree)
    alias_fork2.simpleMerge<0>(tmp$0#0:mytree.tree, ?tmp$3#0:mytree.tree) @alias_fork2:11:6
    foreign c print_string("expect t -  1 200:":wybe.string, ~#wybe.io$io#0:wybe.phantom, ?tmp$17#0:wybe.phantom) @wybe:92:41
    foreign c putchar('\n':wybe.char, ~tmp$17#0:wybe.phantom, ?#wybe.io$io#1:wybe.phantom) @wybe:78:28
    mytree.printTree<0>(tmp$3#0:mytree.tree, ~#wybe.io$io#1:wybe.phantom, ?#wybe.io$io#2:wybe.phantom) @alias_fork2:13:2
    foreign c print_string("":wybe.string, ~#wybe.io$io#2:wybe.phantom, ?tmp$20#0:wybe.phantom) @wybe:92:41
    foreign c putchar('\n':wybe.char, ~tmp$20#0:wybe.phantom, ?#wybe.io$io#3:wybe.phantom) @wybe:78:28
    foreign lpvm cast(tmp$0#0:mytree.tree, ?tmp$23#0:wybe.int)
    foreign llvm icmp ne(~tmp$23#0:wybe.int, 0:wybe.int, ?tmp$24#0:wybe.bool)
    case ~tmp$24#0:wybe.bool of
    0:
        alias_fork2.gen$1<0>(~tmp$3#0:mytree.tree, ~tmp$0#0:mytree.tree, ~tmp$0#0:mytree.tree, ~tmp$1#0:mytree.tree, ~tmp$1#0:mytree.tree, ~tmp$3#0:mytree.tree, ~wybe.io$io#3:wybe.phantom, ?wybe.io$io#4:wybe.phantom)

    1:
        foreign lpvm access(tmp$0#0:mytree.tree, 0:wybe.int, ?l#0:mytree.tree)
        foreign lpvm access(tmp$0#0:mytree.tree, 16:wybe.int, ?r#0:mytree.tree)
        foreign lpvm alloc(24:wybe.int, ?tmp$28#0:mytree.tree)
        foreign lpvm mutate(~tmp$28#0:mytree.tree, ?tmp$29#0:mytree.tree, 24:wybe.int, 0:wybe.int, 1:wybe.int, ~l#0:mytree.tree)
        foreign lpvm mutate(~tmp$29#0:mytree.tree, ?tmp$30#0:mytree.tree, 24:wybe.int, 8:wybe.int, 1:wybe.int, 1000:wybe.int)
        foreign lpvm mutate(~tmp$30#0:mytree.tree, ?tmp$5#0:mytree.tree, 24:wybe.int, 16:wybe.int, 1:wybe.int, ~r#0:mytree.tree)
        alias_fork2.gen$1<0>(~tmp$3#0:mytree.tree, ~tmp$5#0:mytree.tree, ~tmp$0#0:mytree.tree, ~tmp$1#0:mytree.tree, ~tmp$1#0:mytree.tree, ~tmp$3#0:mytree.tree, ~wybe.io$io#3:wybe.phantom, ?wybe.io$io#4:wybe.phantom)



gen$1 > (2 calls)
0: gen$1(t#0:mytree.tree, t1#0:mytree.tree, [tmp$0#0:mytree.tree], [tmp$1#0:mytree.tree], [tmp$2#0:mytree.tree], [tmp$3#0:mytree.tree], wybe.io$io#0:wybe.phantom, ?wybe.io$io#6:wybe.phantom): AliasPairs: []
    foreign c print_string("expect t1 - 1000:":wybe.string, ~#wybe.io$io#0:wybe.phantom, ?tmp$9#0:wybe.phantom) @wybe:92:41
    foreign c putchar('\n':wybe.char, ~tmp$9#0:wybe.phantom, ?#wybe.io$io#1:wybe.phantom) @wybe:78:28
    mytree.printTree<0>(~t1#0:mytree.tree, ~#wybe.io$io#1:wybe.phantom, ?#wybe.io$io#2:wybe.phantom) @alias_fork2:20:2
    foreign c print_string("":wybe.string, ~#wybe.io$io#2:wybe.phantom, ?tmp$12#0:wybe.phantom) @wybe:92:41
    foreign c putchar('\n':wybe.char, ~tmp$12#0:wybe.phantom, ?#wybe.io$io#3:wybe.phantom) @wybe:78:28
    foreign c print_string("expect t1 - 1 200:":wybe.string, ~#wybe.io$io#3:wybe.phantom, ?tmp$15#0:wybe.phantom) @wybe:92:41
    foreign c putchar('\n':wybe.char, ~tmp$15#0:wybe.phantom, ?#wybe.io$io#4:wybe.phantom) @wybe:78:28
    mytree.printTree<0>(~t#0:mytree.tree, ~#wybe.io$io#4:wybe.phantom, ?#wybe.io$io#5:wybe.phantom) @alias_fork2:23:2
    foreign c print_string("":wybe.string, ~#wybe.io$io#5:wybe.phantom, ?tmp$18#0:wybe.phantom) @wybe:92:41
    foreign c putchar('\n':wybe.char, ~tmp$18#0:wybe.phantom, ?#wybe.io$io#6:wybe.phantom) @wybe:78:28


simpleMerge > public (3 calls)
0: simpleMerge(tl#0:mytree.tree, ?$#0:mytree.tree): AliasPairs: []
    foreign lpvm cast(0:mytree.tree, ?tmp$1#0:mytree.tree)
    foreign lpvm alloc(24:wybe.int, ?tmp$5#0:mytree.tree)
    foreign lpvm mutate(~tmp$5#0:mytree.tree, ?tmp$6#0:mytree.tree, 24:wybe.int, 0:wybe.int, 1:wybe.int, ~tl#0:mytree.tree)
    foreign lpvm mutate(~tmp$6#0:mytree.tree, ?tmp$7#0:mytree.tree, 24:wybe.int, 8:wybe.int, 1:wybe.int, 200:wybe.int)
    foreign lpvm mutate(~tmp$7#0:mytree.tree, ?$#0:mytree.tree, 24:wybe.int, 16:wybe.int, 1:wybe.int, ~tmp$1#0:mytree.tree)
--------------------------------------------------
 Module mytree
  public submods  : 
  public types    : tree: (mytree.tree,"pointer")
  public resources: 
  public procs    : mytree.printTree<0>
                    mytree.tree.=<0>
                    mytree.tree.=<1>
                    mytree.tree.=<2>
                    mytree.tree.empty<0>
                    mytree.tree.key<0>
                    mytree.tree.key<1>
                    mytree.tree.left<0>
                    mytree.tree.left<1>
                    mytree.tree.node<0>
                    mytree.tree.node<1>
                    mytree.tree.right<0>
                    mytree.tree.right<1>
  imports         : public use mytree.tree
                    use wybe
  types           : tree/0 (pointer)  @mytree:1:8
  resources       : 
  procs           : 

printTree > public (2 calls)
0: printTree(t#0:mytree.tree, wybe.io$io#0:wybe.phantom, ?wybe.io$io#5:wybe.phantom): AliasPairs: []
    foreign lpvm cast(t#0:mytree.tree, ?tmp$4#0:wybe.int)
    foreign llvm icmp ne(~tmp$4#0:wybe.int, 0:wybe.int, ?tmp$5#0:wybe.bool)
    case ~tmp$5#0:wybe.bool of
    0:
        foreign llvm move(~wybe.io$io#0:wybe.phantom, ?wybe.io$io#5:wybe.phantom)

    1:
        foreign lpvm access(t#0:mytree.tree, 0:wybe.int, ?l#0:mytree.tree)
        foreign lpvm access(t#0:mytree.tree, 8:wybe.int, ?k#0:wybe.int)
        foreign lpvm access(~t#0:mytree.tree, 16:wybe.int, ?r#0:mytree.tree)
        mytree.printTree<0>(~l#0:mytree.tree, ~#wybe.io$io#0:wybe.phantom, ?#wybe.io$io#1:wybe.phantom) @mytree:5:6
        foreign c print_string(" ":wybe.string, ~#wybe.io$io#1:wybe.phantom, ?#wybe.io$io#2:wybe.phantom) @wybe:92:41
        foreign c print_int(~k#0:wybe.int, ~#wybe.io$io#2:wybe.phantom, ?#wybe.io$io#3:wybe.phantom) @wybe:80:38
        foreign c print_string(" ":wybe.string, ~#wybe.io$io#3:wybe.phantom, ?#wybe.io$io#4:wybe.phantom) @wybe:92:41
        mytree.printTree<0>(~r#0:mytree.tree, ~#wybe.io$io#4:wybe.phantom, ?#wybe.io$io#5:wybe.phantom) @mytree:9:6

  submodules      : mytree.tree
--------------------------------------------------
 Module mytree.tree([])
  public submods  : 
  public types    : 
  public resources: 
  public procs    : mytree.tree.=<0>
                    mytree.tree.=<1>
                    mytree.tree.=<2>
                    mytree.tree.empty<0>
                    mytree.tree.key<0>
                    mytree.tree.key<1>
                    mytree.tree.left<0>
                    mytree.tree.left<1>
                    mytree.tree.node<0>
                    mytree.tree.node<1>
                    mytree.tree.right<0>
                    mytree.tree.right<1>
  imports         : use mytree
                    use wybe
  types           : 
  resources       : 
  procs           : 

= > public inline (0 calls)
0: =(?out#0:mytree.tree, in#0:mytree.tree): AliasPairs: []
    foreign llvm move(~in#0:mytree.tree, ?out#0:mytree.tree)
= > public inline (0 calls)
1: =(in#0:mytree.tree, ?out#0:mytree.tree): AliasPairs: []
    foreign llvm move(~in#0:mytree.tree, ?out#0:mytree.tree)
= > public test (6 calls)
2: =($left#0:mytree.tree, $right#0:mytree.tree, ?$$#0:wybe.bool): AliasPairs: []
    foreign lpvm cast($left#0:mytree.tree, ?tmp$0#0:wybe.int)
    foreign llvm icmp eq(tmp$0#0:wybe.int, 0:wybe.int, ?tmp$1#0:wybe.bool)
    case ~tmp$1#0:wybe.bool of
    0:
        foreign llvm icmp ne(~tmp$0#0:wybe.int, 0:wybe.int, ?tmp$10#0:wybe.bool)
        case ~tmp$10#0:wybe.bool of
        0:
            foreign llvm move(0:wybe.bool, ?$$#0:wybe.bool)

        1:
            foreign lpvm access($left#0:mytree.tree, 0:wybe.int, ?$left$left#0:mytree.tree)
            foreign lpvm access($left#0:mytree.tree, 8:wybe.int, ?$left$key#0:wybe.int)
            foreign lpvm access(~$left#0:mytree.tree, 16:wybe.int, ?$left$right#0:mytree.tree)
            foreign lpvm cast($right#0:mytree.tree, ?tmp$12#0:wybe.int)
            foreign llvm icmp ne(~tmp$12#0:wybe.int, 0:wybe.int, ?tmp$13#0:wybe.bool)
            case ~tmp$13#0:wybe.bool of
            0:
                foreign llvm move(0:wybe.bool, ?$$#0:wybe.bool)

            1:
                foreign lpvm access($right#0:mytree.tree, 0:wybe.int, ?$right$left#0:mytree.tree)
                foreign lpvm access($right#0:mytree.tree, 8:wybe.int, ?$right$key#0:wybe.int)
                foreign lpvm access(~$right#0:mytree.tree, 16:wybe.int, ?$right$right#0:mytree.tree)
                mytree.tree.=<2>(~$left$left#0:mytree.tree, ~$right$left#0:mytree.tree, ?tmp$5#0:wybe.bool)
                case ~tmp$5#0:wybe.bool of
                0:
                    foreign llvm move(0:wybe.bool, ?$$#0:wybe.bool)

                1:
                    foreign llvm icmp eq(~$left$key#0:wybe.int, ~$right$key#0:wybe.int, ?tmp$6#0:wybe.bool) @wybe:28:40
                    case ~tmp$6#0:wybe.bool of
                    0:
                        foreign llvm move(0:wybe.bool, ?$$#0:wybe.bool)

                    1:
                        mytree.tree.=<2>(~$left$right#0:mytree.tree, ~$right$right#0:mytree.tree, ?$$#0:wybe.bool)





    1:
        foreign llvm icmp eq(~$left#0:wybe.int, ~$right#0:wybe.int, ?$$#0:wybe.bool)



empty > public inline (0 calls)
0: empty(?$#0:mytree.tree): AliasPairs: []
    foreign lpvm cast(0:mytree.tree, ?$#0:mytree.tree)


key > public inline test (0 calls)
0: key($rec#0:mytree.tree, ?$#0:wybe.int, ?$$#0:wybe.bool): AliasPairs: []
    foreign lpvm cast($rec#0:mytree.tree, ?tmp$0#0:wybe.int)
    foreign llvm icmp ne(~tmp$0#0:wybe.int, 0:wybe.int, ?tmp$1#0:wybe.bool)
    case ~tmp$1#0:wybe.bool of
    0:
        foreign llvm move(0:wybe.bool, ?$$#0:wybe.bool)

    1:
        foreign lpvm access(~$rec#0:mytree.tree, 8:wybe.int, ?$#0:wybe.int)
        foreign llvm move(1:wybe.bool, ?$$#0:wybe.bool)

key > public inline test (0 calls)
1: key($rec#0:mytree.tree, ?$rec#1:mytree.tree, $field#0:wybe.int, ?$$#0:wybe.bool): AliasPairs: []
    foreign lpvm cast($rec#0:mytree.tree, ?tmp$0#0:wybe.int)
    foreign llvm icmp ne(~tmp$0#0:wybe.int, 0:wybe.int, ?tmp$1#0:wybe.bool)
    case ~tmp$1#0:wybe.bool of
    0:
        foreign llvm move(0:wybe.bool, ?$$#0:wybe.bool)
        foreign llvm move(~$rec#0:mytree.tree, ?$rec#1:mytree.tree)

    1:
        foreign lpvm mutate(~%$rec#0:mytree.tree, ?%$rec#1:mytree.tree, 24:wybe.int, 8:wybe.int, 0:wybe.int, ~$field#0:wybe.int)
        foreign llvm move(1:wybe.bool, ?$$#0:wybe.bool)



left > public inline test (0 calls)
0: left($rec#0:mytree.tree, ?$#0:mytree.tree, ?$$#0:wybe.bool): AliasPairs: []
    foreign lpvm cast($rec#0:mytree.tree, ?tmp$0#0:wybe.int)
    foreign llvm icmp ne(~tmp$0#0:wybe.int, 0:wybe.int, ?tmp$1#0:wybe.bool)
    case ~tmp$1#0:wybe.bool of
    0:
        foreign llvm move(0:wybe.bool, ?$$#0:wybe.bool)

    1:
        foreign lpvm access(~$rec#0:mytree.tree, 0:wybe.int, ?$#0:mytree.tree)
        foreign llvm move(1:wybe.bool, ?$$#0:wybe.bool)

left > public inline test (0 calls)
1: left($rec#0:mytree.tree, ?$rec#1:mytree.tree, $field#0:mytree.tree, ?$$#0:wybe.bool): AliasPairs: []
    foreign lpvm cast($rec#0:mytree.tree, ?tmp$0#0:wybe.int)
    foreign llvm icmp ne(~tmp$0#0:wybe.int, 0:wybe.int, ?tmp$1#0:wybe.bool)
    case ~tmp$1#0:wybe.bool of
    0:
        foreign llvm move(0:wybe.bool, ?$$#0:wybe.bool)
        foreign llvm move(~$rec#0:mytree.tree, ?$rec#1:mytree.tree)

    1:
        foreign lpvm mutate(~%$rec#0:mytree.tree, ?%$rec#1:mytree.tree, 24:wybe.int, 0:wybe.int, 0:wybe.int, ~$field#0:mytree.tree)
        foreign llvm move(1:wybe.bool, ?$$#0:wybe.bool)



node > public inline (0 calls)
0: node(left#0:mytree.tree, key#0:wybe.int, right#0:mytree.tree, ?$#0:mytree.tree): AliasPairs: []
    foreign lpvm alloc(24:wybe.int, ?$rec#0:mytree.tree)
    foreign lpvm mutate(~%$rec#0:mytree.tree, ?%$rec#1:mytree.tree, 24:wybe.int, 0:wybe.int, 1:wybe.int, ~left#0:mytree.tree)
    foreign lpvm mutate(~%$rec#1:mytree.tree, ?%$rec#2:mytree.tree, 24:wybe.int, 8:wybe.int, 1:wybe.int, ~key#0:wybe.int)
    foreign lpvm mutate(~%$rec#2:mytree.tree, ?%$#0:mytree.tree, 24:wybe.int, 16:wybe.int, 1:wybe.int, ~right#0:mytree.tree)
node > public inline test (9 calls)
1: node(?left#0:mytree.tree, ?key#0:wybe.int, ?right#0:mytree.tree, $#0:mytree.tree, ?$$#0:wybe.bool): AliasPairs: []
    foreign lpvm cast($#0:mytree.tree, ?tmp$0#0:wybe.int)
    foreign llvm icmp ne(~tmp$0#0:wybe.int, 0:wybe.int, ?tmp$1#0:wybe.bool)
    case ~tmp$1#0:wybe.bool of
    0:
        foreign llvm move(0:wybe.bool, ?$$#0:wybe.bool)

    1:
        foreign lpvm access($#0:mytree.tree, 0:wybe.int, ?left#0:mytree.tree)
        foreign lpvm access($#0:mytree.tree, 8:wybe.int, ?key#0:wybe.int)
        foreign lpvm access(~$#0:mytree.tree, 16:wybe.int, ?right#0:mytree.tree)
        foreign llvm move(1:wybe.bool, ?$$#0:wybe.bool)



right > public inline test (0 calls)
0: right($rec#0:mytree.tree, ?$#0:mytree.tree, ?$$#0:wybe.bool): AliasPairs: []
    foreign lpvm cast($rec#0:mytree.tree, ?tmp$0#0:wybe.int)
    foreign llvm icmp ne(~tmp$0#0:wybe.int, 0:wybe.int, ?tmp$1#0:wybe.bool)
    case ~tmp$1#0:wybe.bool of
    0:
        foreign llvm move(0:wybe.bool, ?$$#0:wybe.bool)

    1:
        foreign lpvm access(~$rec#0:mytree.tree, 16:wybe.int, ?$#0:mytree.tree)
        foreign llvm move(1:wybe.bool, ?$$#0:wybe.bool)

right > public inline test (0 calls)
1: right($rec#0:mytree.tree, ?$rec#1:mytree.tree, $field#0:mytree.tree, ?$$#0:wybe.bool): AliasPairs: []
    foreign lpvm cast($rec#0:mytree.tree, ?tmp$0#0:wybe.int)
    foreign llvm icmp ne(~tmp$0#0:wybe.int, 0:wybe.int, ?tmp$1#0:wybe.bool)
    case ~tmp$1#0:wybe.bool of
    0:
        foreign llvm move(0:wybe.bool, ?$$#0:wybe.bool)
        foreign llvm move(~$rec#0:mytree.tree, ?$rec#1:mytree.tree)

    1:
        foreign lpvm mutate(~%$rec#0:mytree.tree, ?%$rec#1:mytree.tree, 24:wybe.int, 16:wybe.int, 0:wybe.int, ~$field#0:mytree.tree)
        foreign llvm move(1:wybe.bool, ?$$#0:wybe.bool)

