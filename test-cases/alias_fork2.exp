======================================================================
AFTER EVERYTHING:
 Module alias_fork2
  public submods  : 
  public types    : 
  public resources: 
  public procs    : alias_fork2.<0>
                    alias_fork2.simpleMerge<0>
  imports         : use mytree
                    use wybe
  types           : 
  resources       : 
  procs           : 

*main* > public (0 calls)
0: (argc#0:wybe.int, ?argc#1:wybe.int, argv#0:wybe.int, ?argv#1:wybe.int, exit_code#0:wybe.int, ?exit_code#1:wybe.int, io#0:wybe.phantom, ?io#4:wybe.phantom): AliasPairs: []
    foreign lpvm alloc(24:wybe.int, ?tmp$9#0:mytree.tree)
    foreign lpvm mutate(~tmp$9#0:mytree.tree, ?tmp$10#0:mytree.tree, 0:wybe.int, 1:wybe.int, 24:wybe.int, 0:wybe.int, 0:mytree.tree)
    foreign lpvm mutate(~tmp$10#0:mytree.tree, ?tmp$11#0:mytree.tree, 8:wybe.int, 1:wybe.int, 24:wybe.int, 0:wybe.int, 1:wybe.int)
    foreign lpvm mutate(~tmp$11#0:mytree.tree, ?tmp$0#0:mytree.tree, 16:wybe.int, 1:wybe.int, 24:wybe.int, 0:wybe.int, 0:mytree.tree)
    alias_fork2.simpleMerge<0>(tmp$0#0:mytree.tree, ?tmp$3#0:mytree.tree) @alias_fork2:11:6
    foreign c print_string("expect t -  1 200:":wybe.string, ~#io#0:wybe.phantom, ?tmp$14#0:wybe.phantom) @wybe:nn:nn
    foreign c putchar('\n':wybe.char, ~tmp$14#0:wybe.phantom, ?#io#1:wybe.phantom) @wybe:nn:nn
    mytree.printTree<0>(tmp$3#0:mytree.tree, ~#io#1:wybe.phantom, ?#io#2:wybe.phantom) @alias_fork2:13:2
    foreign c print_string("":wybe.string, ~#io#2:wybe.phantom, ?tmp$17#0:wybe.phantom) @wybe:nn:nn
    foreign c putchar('\n':wybe.char, ~tmp$17#0:wybe.phantom, ?#io#3:wybe.phantom) @wybe:nn:nn
    foreign llvm icmp ne(tmp$0#0:mytree.tree, 0:wybe.int, ?tmp$19#0:wybe.bool)
    case ~tmp$19#0:wybe.bool of
    0:
        foreign llvm move(argc#0:wybe.int, ?argc#1:wybe.int)
        foreign llvm move(argv#0:wybe.int, ?argv#1:wybe.int)
        foreign llvm move(exit_code#0:wybe.int, ?exit_code#1:wybe.int)
        alias_fork2.gen$1<0>(~argc#0:wybe.int, ~argv#0:wybe.int, ~exit_code#0:wybe.int, ~io#3:wybe.phantom, ~tmp$3#0:mytree.tree, ~tmp$0#0:mytree.tree, _:mytree.tree, _:mytree.tree, _:mytree.tree, _:mytree.tree, ?_:wybe.int, ?_:wybe.int, ?_:wybe.int, ?io#4:wybe.phantom)

    1:
        foreign lpvm access(tmp$0#0:mytree.tree, 0:wybe.int, ?l#0:mytree.tree)
        foreign llvm move(0:mytree.tree, ?r#0:mytree.tree)
        foreign lpvm alloc(24:wybe.int, ?tmp$23#0:mytree.tree)
        foreign lpvm mutate(~tmp$23#0:mytree.tree, ?tmp$24#0:mytree.tree, 0:wybe.int, 1:wybe.int, 24:wybe.int, 0:wybe.int, ~l#0:mytree.tree)
        foreign lpvm mutate(~tmp$24#0:mytree.tree, ?tmp$25#0:mytree.tree, 8:wybe.int, 1:wybe.int, 24:wybe.int, 0:wybe.int, 1000:wybe.int)
        foreign lpvm mutate(~tmp$25#0:mytree.tree, ?tmp$4#0:mytree.tree, 16:wybe.int, 1:wybe.int, 24:wybe.int, 0:wybe.int, ~r#0:mytree.tree)
        foreign llvm move(argc#0:wybe.int, ?argc#1:wybe.int)
        foreign llvm move(argv#0:wybe.int, ?argv#1:wybe.int)
        foreign llvm move(exit_code#0:wybe.int, ?exit_code#1:wybe.int)
        alias_fork2.gen$1<0>(~argc#0:wybe.int, ~argv#0:wybe.int, ~exit_code#0:wybe.int, ~io#3:wybe.phantom, ~tmp$3#0:mytree.tree, ~tmp$4#0:mytree.tree, _:mytree.tree, _:mytree.tree, _:mytree.tree, _:mytree.tree, ?_:wybe.int, ?_:wybe.int, ?_:wybe.int, ?io#4:wybe.phantom)



gen$1 > (2 calls)
0: gen$1(argc#0:wybe.int, argv#0:wybe.int, exit_code#0:wybe.int, io#0:wybe.phantom, t#0:mytree.tree, t1#0:mytree.tree, [tmp$0#0:mytree.tree], [tmp$1#0:mytree.tree], [tmp$2#0:mytree.tree], [tmp$3#0:mytree.tree], [?argc#0:wybe.int], [?argv#0:wybe.int], [?exit_code#0:wybe.int], ?io#6:wybe.phantom): AliasPairs: []
    foreign c print_string("expect t1 - 1000:":wybe.string, ~#io#0:wybe.phantom, ?tmp$8#0:wybe.phantom) @wybe:nn:nn
    foreign c putchar('\n':wybe.char, ~tmp$8#0:wybe.phantom, ?#io#1:wybe.phantom) @wybe:nn:nn
    mytree.printTree<0>(~t1#0:mytree.tree, ~#io#1:wybe.phantom, ?#io#2:wybe.phantom) @alias_fork2:19:2
    foreign c print_string("":wybe.string, ~#io#2:wybe.phantom, ?tmp$11#0:wybe.phantom) @wybe:nn:nn
    foreign c putchar('\n':wybe.char, ~tmp$11#0:wybe.phantom, ?#io#3:wybe.phantom) @wybe:nn:nn
    foreign c print_string("expect t1 - 1 200:":wybe.string, ~#io#3:wybe.phantom, ?tmp$14#0:wybe.phantom) @wybe:nn:nn
    foreign c putchar('\n':wybe.char, ~tmp$14#0:wybe.phantom, ?#io#4:wybe.phantom) @wybe:nn:nn
    mytree.printTree<0>(~t#0:mytree.tree, ~#io#4:wybe.phantom, ?#io#5:wybe.phantom) @alias_fork2:22:2
    foreign c print_string("":wybe.string, ~#io#5:wybe.phantom, ?tmp$17#0:wybe.phantom) @wybe:nn:nn
    foreign c putchar('\n':wybe.char, ~tmp$17#0:wybe.phantom, ?#io#6:wybe.phantom) @wybe:nn:nn


simpleMerge > public (3 calls)
0: simpleMerge(tl#0:mytree.tree, ?$#0:mytree.tree): AliasPairs: [($#0,tl#0)]
    foreign lpvm alloc(24:wybe.int, ?tmp$5#0:mytree.tree)
    foreign lpvm mutate(~tmp$5#0:mytree.tree, ?tmp$6#0:mytree.tree, 0:wybe.int, 1:wybe.int, 24:wybe.int, 0:wybe.int, ~tl#0:mytree.tree)
    foreign lpvm mutate(~tmp$6#0:mytree.tree, ?tmp$7#0:mytree.tree, 8:wybe.int, 1:wybe.int, 24:wybe.int, 0:wybe.int, 200:wybe.int)
    foreign lpvm mutate(~tmp$7#0:mytree.tree, ?$#0:mytree.tree, 16:wybe.int, 1:wybe.int, 24:wybe.int, 0:wybe.int, 0:mytree.tree)

  LLVM code       :

; ModuleID = 'alias_fork2'


 


declare external ccc  void @putchar(i8)    


declare external ccc  void @print_string(i64)    


declare external ccc  void @"mytree.printTree<0>"(i64)    


@alias_fork2.14 =    constant [1 x i8] c"\00"


@alias_fork2.12 =    constant [19 x i8] c"expect t -  1 200:\00"


@alias_fork2.42 =    constant [1 x i8] c"\00"


@alias_fork2.40 =    constant [19 x i8] c"expect t1 - 1 200:\00"


@alias_fork2.38 =    constant [1 x i8] c"\00"


@alias_fork2.36 =    constant [18 x i8] c"expect t1 - 1000:\00"


declare external ccc  i8* @wybe_malloc(i32)    


declare external ccc  void @llvm.memcpy.p0i8.p0i8.i32(i8*, i8*, i32, i32, i1)    


define external ccc  {i64, i64, i64} @"alias_fork2.<0>"(i64  %"argc#0", i64  %"argv#0", i64  %"exit_code#0")    {
entry:
  %1 = trunc i64 24 to i32  
  %2 = tail call ccc  i8*  @wybe_malloc(i32  %1)  
  %3 = ptrtoint i8* %2 to i64 
  %4 = inttoptr i64 %3 to i64* 
  %5 = getelementptr  i64, i64* %4, i64 0 
  store  i64 0, i64* %5 
  %6 = add   i64 %3, 8 
  %7 = inttoptr i64 %6 to i64* 
  %8 = getelementptr  i64, i64* %7, i64 0 
  store  i64 1, i64* %8 
  %9 = add   i64 %3, 16 
  %10 = inttoptr i64 %9 to i64* 
  %11 = getelementptr  i64, i64* %10, i64 0 
  store  i64 0, i64* %11 
  %"tmp$3#0" = tail call ccc  i64  @"alias_fork2.simpleMerge<0>"(i64  %3)  
  %13 = ptrtoint i8* getelementptr inbounds ([19 x i8], [19 x i8]* @alias_fork2.12, i32 0, i32 0) to i64 
  tail call ccc  void  @print_string(i64  %13)  
  tail call ccc  void  @putchar(i8  10)  
  tail call ccc  void  @"mytree.printTree<0>"(i64  %"tmp$3#0")  
  %15 = ptrtoint i8* getelementptr inbounds ([1 x i8], [1 x i8]* @alias_fork2.14, i32 0, i32 0) to i64 
  tail call ccc  void  @print_string(i64  %15)  
  tail call ccc  void  @putchar(i8  10)  
  %"tmp$19#0" = icmp ne i64 %3, 0 
  br i1 %"tmp$19#0", label %if.then, label %if.else 
if.then:
  %16 = inttoptr i64 %3 to i64* 
  %17 = getelementptr  i64, i64* %16, i64 0 
  %18 = load  i64, i64* %17 
  %19 = trunc i64 24 to i32  
  %20 = tail call ccc  i8*  @wybe_malloc(i32  %19)  
  %21 = ptrtoint i8* %20 to i64 
  %22 = inttoptr i64 %21 to i64* 
  %23 = getelementptr  i64, i64* %22, i64 0 
  store  i64 %18, i64* %23 
  %24 = add   i64 %21, 8 
  %25 = inttoptr i64 %24 to i64* 
  %26 = getelementptr  i64, i64* %25, i64 0 
  store  i64 1000, i64* %26 
  %27 = add   i64 %21, 16 
  %28 = inttoptr i64 %27 to i64* 
  %29 = getelementptr  i64, i64* %28, i64 0 
  store  i64 0, i64* %29 
  tail call ccc  void  @"alias_fork2.gen$1<0>"(i64  %"argc#0", i64  %"argv#0", i64  %"exit_code#0", i64  %"tmp$3#0", i64  %21)  
  %30 = insertvalue {i64, i64, i64} undef, i64 %"argc#0", 0 
  %31 = insertvalue {i64, i64, i64} %30, i64 %"argv#0", 1 
  %32 = insertvalue {i64, i64, i64} %31, i64 %"exit_code#0", 2 
  ret {i64, i64, i64} %32 
if.else:
  tail call ccc  void  @"alias_fork2.gen$1<0>"(i64  %"argc#0", i64  %"argv#0", i64  %"exit_code#0", i64  %"tmp$3#0", i64  %3)  
  %33 = insertvalue {i64, i64, i64} undef, i64 %"argc#0", 0 
  %34 = insertvalue {i64, i64, i64} %33, i64 %"argv#0", 1 
  %35 = insertvalue {i64, i64, i64} %34, i64 %"exit_code#0", 2 
  ret {i64, i64, i64} %35 
}


define external ccc  void @"alias_fork2.gen$1<0>"(i64  %"argc#0", i64  %"argv#0", i64  %"exit_code#0", i64  %"t#0", i64  %"t1#0")    {
entry:
  %37 = ptrtoint i8* getelementptr inbounds ([18 x i8], [18 x i8]* @alias_fork2.36, i32 0, i32 0) to i64 
  tail call ccc  void  @print_string(i64  %37)  
  tail call ccc  void  @putchar(i8  10)  
  tail call ccc  void  @"mytree.printTree<0>"(i64  %"t1#0")  
  %39 = ptrtoint i8* getelementptr inbounds ([1 x i8], [1 x i8]* @alias_fork2.38, i32 0, i32 0) to i64 
  tail call ccc  void  @print_string(i64  %39)  
  tail call ccc  void  @putchar(i8  10)  
  %41 = ptrtoint i8* getelementptr inbounds ([19 x i8], [19 x i8]* @alias_fork2.40, i32 0, i32 0) to i64 
  tail call ccc  void  @print_string(i64  %41)  
  tail call ccc  void  @putchar(i8  10)  
  tail call ccc  void  @"mytree.printTree<0>"(i64  %"t#0")  
  %43 = ptrtoint i8* getelementptr inbounds ([1 x i8], [1 x i8]* @alias_fork2.42, i32 0, i32 0) to i64 
  tail call ccc  void  @print_string(i64  %43)  
  tail call ccc  void  @putchar(i8  10)  
  ret void 
}


define external ccc  i64 @"alias_fork2.simpleMerge<0>"(i64  %"tl#0")    {
entry:
  %44 = trunc i64 24 to i32  
  %45 = tail call ccc  i8*  @wybe_malloc(i32  %44)  
  %46 = ptrtoint i8* %45 to i64 
  %47 = inttoptr i64 %46 to i64* 
  %48 = getelementptr  i64, i64* %47, i64 0 
  store  i64 %"tl#0", i64* %48 
  %49 = add   i64 %46, 8 
  %50 = inttoptr i64 %49 to i64* 
  %51 = getelementptr  i64, i64* %50, i64 0 
  store  i64 200, i64* %51 
  %52 = add   i64 %46, 16 
  %53 = inttoptr i64 %52 to i64* 
  %54 = getelementptr  i64, i64* %53, i64 0 
  store  i64 0, i64* %54 
  ret i64 %46 
}
--------------------------------------------------
 Module mytree
  public submods  : 
  public types    : tree: (mytree.tree,Just "address")
  public resources: 
  public procs    : mytree.printTree<0>
                    mytree.tree./=<0>
                    mytree.tree.=<0>
                    mytree.tree.empty<0>
                    mytree.tree.key<0>
                    mytree.tree.key<1>
                    mytree.tree.left<0>
                    mytree.tree.left<1>
                    mytree.tree.node<0>
                    mytree.tree.node<1>
                    mytree.tree.right<0>
                    mytree.tree.right<1>
  imports         : public use mytree.tree
                    use wybe
  types           : tree/public  is address { empty() @mytree:1:21 | node(left:tree, key:int, right:tree) @mytree:1:29  }  @mytree:1:5
  resources       : 
  submodules      : mytree.tree
  procs           : 

printTree > public (2 calls)
0: printTree(t#0:mytree.tree, io#0:wybe.phantom, ?io#5:wybe.phantom): AliasPairs: []
    foreign llvm icmp ne(t#0:mytree.tree, 0:wybe.int, ?tmp$2#0:wybe.bool)
    case ~tmp$2#0:wybe.bool of
    0:
        foreign llvm move(~io#0:wybe.phantom, ?io#5:wybe.phantom)

    1:
        foreign lpvm access(t#0:mytree.tree, 0:wybe.int, ?l#0:mytree.tree)
        foreign lpvm access(t#0:mytree.tree, 8:wybe.int, ?k#0:wybe.int)
        foreign lpvm access(~t#0:mytree.tree, 16:wybe.int, ?r#0:mytree.tree)
        mytree.printTree<0>(~l#0:mytree.tree, ~#io#0:wybe.phantom, ?#io#1:wybe.phantom) @mytree:5:13
        foreign c print_string(" ":wybe.string, ~#io#1:wybe.phantom, ?#io#2:wybe.phantom) @wybe:nn:nn
        foreign c print_int(~k#0:wybe.int, ~#io#2:wybe.phantom, ?#io#3:wybe.phantom) @wybe:nn:nn
        foreign c print_string(" ":wybe.string, ~#io#3:wybe.phantom, ?#io#4:wybe.phantom) @wybe:nn:nn
        mytree.printTree<0>(~r#0:mytree.tree, ~#io#4:wybe.phantom, ?#io#5:wybe.phantom) @mytree:9:13


  LLVM code       :

; ModuleID = 'mytree'


 


declare external ccc  void @print_string(i64)    


declare external ccc  void @print_int(i64)    


@mytree.14 =    constant [2 x i8] c" \00"


@mytree.12 =    constant [2 x i8] c" \00"


declare external ccc  i8* @wybe_malloc(i32)    


declare external ccc  void @llvm.memcpy.p0i8.p0i8.i32(i8*, i8*, i32, i32, i1)    


define external ccc  void @"mytree.printTree<0>"(i64  %"t#0")    {
entry:
  %"tmp$2#0" = icmp ne i64 %"t#0", 0 
  br i1 %"tmp$2#0", label %if.then, label %if.else 
if.then:
  %1 = inttoptr i64 %"t#0" to i64* 
  %2 = getelementptr  i64, i64* %1, i64 0 
  %3 = load  i64, i64* %2 
  %4 = add   i64 %"t#0", 8 
  %5 = inttoptr i64 %4 to i64* 
  %6 = getelementptr  i64, i64* %5, i64 0 
  %7 = load  i64, i64* %6 
  %8 = add   i64 %"t#0", 16 
  %9 = inttoptr i64 %8 to i64* 
  %10 = getelementptr  i64, i64* %9, i64 0 
  %11 = load  i64, i64* %10 
  tail call ccc  void  @"mytree.printTree<0>"(i64  %3)  
  %13 = ptrtoint i8* getelementptr inbounds ([2 x i8], [2 x i8]* @mytree.12, i32 0, i32 0) to i64 
  tail call ccc  void  @print_string(i64  %13)  
  tail call ccc  void  @print_int(i64  %7)  
  %15 = ptrtoint i8* getelementptr inbounds ([2 x i8], [2 x i8]* @mytree.14, i32 0, i32 0) to i64 
  tail call ccc  void  @print_string(i64  %15)  
  tail call ccc  void  @"mytree.printTree<0>"(i64  %11)  
  ret void 
if.else:
  ret void 
}
--------------------------------------------------
 Module mytree.tree
  public submods  : 
  public types    : 
  public resources: 
  public procs    : mytree.tree./=<0>
                    mytree.tree.=<0>
                    mytree.tree.empty<0>
                    mytree.tree.key<0>
                    mytree.tree.key<1>
                    mytree.tree.left<0>
                    mytree.tree.left<1>
                    mytree.tree.node<0>
                    mytree.tree.node<1>
                    mytree.tree.right<0>
                    mytree.tree.right<1>
  imports         : use mytree
                    use wybe
  types           : 
  resources       : 
  procs           : 

/= > public inline test (0 calls)
0: /=($left#0:mytree.tree, $right#0:mytree.tree, ?$$#0:wybe.bool): AliasPairs: []
    mytree.tree.=<0>(~$left#0:mytree.tree, ~$right#0:mytree.tree, ?tmp$1#0:wybe.bool)
    case ~tmp$1#0:wybe.bool of
    0:
        foreign llvm move(1:wybe.bool, ?$$#0:wybe.bool)

    1:
        foreign llvm move(0:wybe.bool, ?$$#0:wybe.bool)



= > public test (9 calls)
0: =($left#0:mytree.tree, $right#0:mytree.tree, ?$$#0:wybe.bool): AliasPairs: []
    foreign lpvm cast($left#0:mytree.tree, ?tmp$0#0:wybe.int)
    foreign llvm icmp eq(~tmp$0#0:wybe.int, 0:wybe.int, ?tmp$1#0:wybe.bool)
    case ~tmp$1#0:wybe.bool of
    0:
        foreign llvm icmp ne($left#0:mytree.tree, 0:wybe.int, ?tmp$9#0:wybe.bool)
        case ~tmp$9#0:wybe.bool of
        0:
            foreign llvm move(0:wybe.bool, ?$$#0:wybe.bool)

        1:
            foreign lpvm access($left#0:mytree.tree, 0:wybe.int, ?$left$left#0:mytree.tree)
            foreign lpvm access($left#0:mytree.tree, 8:wybe.int, ?$left$key#0:wybe.int)
            foreign lpvm access(~$left#0:mytree.tree, 16:wybe.int, ?$left$right#0:mytree.tree)
            foreign llvm icmp ne($right#0:mytree.tree, 0:wybe.int, ?tmp$11#0:wybe.bool)
            case ~tmp$11#0:wybe.bool of
            0:
                foreign llvm move(0:wybe.bool, ?$$#0:wybe.bool)

            1:
                foreign lpvm access($right#0:mytree.tree, 0:wybe.int, ?$right$left#0:mytree.tree)
                foreign lpvm access($right#0:mytree.tree, 8:wybe.int, ?$right$key#0:wybe.int)
                foreign lpvm access(~$right#0:mytree.tree, 16:wybe.int, ?$right$right#0:mytree.tree)
                mytree.tree.=<0>(~$left$left#0:mytree.tree, ~$right$left#0:mytree.tree, ?tmp$5#0:wybe.bool)
                case ~tmp$5#0:wybe.bool of
                0:
                    foreign llvm move(0:wybe.bool, ?$$#0:wybe.bool)

                1:
                    foreign llvm icmp eq(~$left$key#0:wybe.int, ~$right$key#0:wybe.int, ?tmp$6#0:wybe.bool) @wybe:nn:nn
                    case ~tmp$6#0:wybe.bool of
                    0:
                        foreign llvm move(0:wybe.bool, ?$$#0:wybe.bool)

                    1:
                        mytree.tree.=<0>(~$left$right#0:mytree.tree, ~$right$right#0:mytree.tree, ?$$#0:wybe.bool)





    1:
        foreign llvm icmp eq(~$left#0:wybe.int, ~$right#0:wybe.int, ?$$#0:wybe.bool)



empty > public inline (0 calls)
0: empty(?$#0:mytree.tree): AliasPairs: []
    foreign llvm move(0:mytree.tree, ?$#0:mytree.tree)


key > public inline test (0 calls)
0: key($rec#0:mytree.tree, ?$#0:wybe.int, ?$$#0:wybe.bool): AliasPairs: []
    foreign llvm icmp ne($rec#0:mytree.tree, 0:wybe.int, ?tmp$0#0:wybe.bool)
    case ~tmp$0#0:wybe.bool of
    0:
        foreign llvm move(0:wybe.bool, ?$$#0:wybe.bool)

    1:
        foreign lpvm access(~$rec#0:mytree.tree, 8:wybe.int, ?$#0:wybe.int)
        foreign llvm move(1:wybe.bool, ?$$#0:wybe.bool)

key > public inline test (0 calls)
1: key($rec#0:mytree.tree, ?$rec#1:mytree.tree, $field#0:wybe.int, ?$$#0:wybe.bool): AliasPairs: []
    foreign llvm icmp ne($rec#0:mytree.tree, 0:wybe.int, ?tmp$0#0:wybe.bool)
    case ~tmp$0#0:wybe.bool of
    0:
        foreign llvm move(0:wybe.bool, ?$$#0:wybe.bool)
        foreign llvm move(~$rec#0:mytree.tree, ?$rec#1:mytree.tree)

    1:
        foreign lpvm mutate(~%$rec#0:mytree.tree, ?%$rec#1:mytree.tree, 8:wybe.int, 0:wybe.int, 24:wybe.int, 0:wybe.int, ~$field#0:wybe.int)
        foreign llvm move(1:wybe.bool, ?$$#0:wybe.bool)



left > public inline test (0 calls)
0: left($rec#0:mytree.tree, ?$#0:mytree.tree, ?$$#0:wybe.bool): AliasPairs: []
    foreign llvm icmp ne($rec#0:mytree.tree, 0:wybe.int, ?tmp$0#0:wybe.bool)
    case ~tmp$0#0:wybe.bool of
    0:
        foreign llvm move(0:wybe.bool, ?$$#0:wybe.bool)

    1:
        foreign lpvm access(~$rec#0:mytree.tree, 0:wybe.int, ?$#0:mytree.tree)
        foreign llvm move(1:wybe.bool, ?$$#0:wybe.bool)

left > public inline test (0 calls)
1: left($rec#0:mytree.tree, ?$rec#1:mytree.tree, $field#0:mytree.tree, ?$$#0:wybe.bool): AliasPairs: []
    foreign llvm icmp ne($rec#0:mytree.tree, 0:wybe.int, ?tmp$0#0:wybe.bool)
    case ~tmp$0#0:wybe.bool of
    0:
        foreign llvm move(0:wybe.bool, ?$$#0:wybe.bool)
        foreign llvm move(~$rec#0:mytree.tree, ?$rec#1:mytree.tree)

    1:
        foreign lpvm mutate(~%$rec#0:mytree.tree, ?%$rec#1:mytree.tree, 0:wybe.int, 0:wybe.int, 24:wybe.int, 0:wybe.int, ~$field#0:mytree.tree)
        foreign llvm move(1:wybe.bool, ?$$#0:wybe.bool)



node > public inline (0 calls)
0: node(left#0:mytree.tree, key#0:wybe.int, right#0:mytree.tree, ?$#0:mytree.tree): AliasPairs: []
    foreign lpvm alloc(24:wybe.int, ?$rec#0:mytree.tree)
    foreign lpvm mutate(~%$rec#0:mytree.tree, ?%$rec#1:mytree.tree, 0:wybe.int, 1:wybe.int, 24:wybe.int, 0:wybe.int, ~left#0:mytree.tree)
    foreign lpvm mutate(~%$rec#1:mytree.tree, ?%$rec#2:mytree.tree, 8:wybe.int, 1:wybe.int, 24:wybe.int, 0:wybe.int, ~key#0:wybe.int)
    foreign lpvm mutate(~%$rec#2:mytree.tree, ?%$#0:mytree.tree, 16:wybe.int, 1:wybe.int, 24:wybe.int, 0:wybe.int, ~right#0:mytree.tree)
node > public inline test (9 calls)
1: node(?left#0:mytree.tree, ?key#0:wybe.int, ?right#0:mytree.tree, $#0:mytree.tree, ?$$#0:wybe.bool): AliasPairs: []
    foreign llvm icmp ne($#0:mytree.tree, 0:wybe.int, ?tmp$0#0:wybe.bool)
    case ~tmp$0#0:wybe.bool of
    0:
        foreign llvm move(0:wybe.bool, ?$$#0:wybe.bool)

    1:
        foreign lpvm access($#0:mytree.tree, 0:wybe.int, ?left#0:mytree.tree)
        foreign lpvm access($#0:mytree.tree, 8:wybe.int, ?key#0:wybe.int)
        foreign lpvm access(~$#0:mytree.tree, 16:wybe.int, ?right#0:mytree.tree)
        foreign llvm move(1:wybe.bool, ?$$#0:wybe.bool)



right > public inline test (0 calls)
0: right($rec#0:mytree.tree, ?$#0:mytree.tree, ?$$#0:wybe.bool): AliasPairs: []
    foreign llvm icmp ne($rec#0:mytree.tree, 0:wybe.int, ?tmp$0#0:wybe.bool)
    case ~tmp$0#0:wybe.bool of
    0:
        foreign llvm move(0:wybe.bool, ?$$#0:wybe.bool)

    1:
        foreign lpvm access(~$rec#0:mytree.tree, 16:wybe.int, ?$#0:mytree.tree)
        foreign llvm move(1:wybe.bool, ?$$#0:wybe.bool)

right > public inline test (0 calls)
1: right($rec#0:mytree.tree, ?$rec#1:mytree.tree, $field#0:mytree.tree, ?$$#0:wybe.bool): AliasPairs: []
    foreign llvm icmp ne($rec#0:mytree.tree, 0:wybe.int, ?tmp$0#0:wybe.bool)
    case ~tmp$0#0:wybe.bool of
    0:
        foreign llvm move(0:wybe.bool, ?$$#0:wybe.bool)
        foreign llvm move(~$rec#0:mytree.tree, ?$rec#1:mytree.tree)

    1:
        foreign lpvm mutate(~%$rec#0:mytree.tree, ?%$rec#1:mytree.tree, 16:wybe.int, 0:wybe.int, 24:wybe.int, 0:wybe.int, ~$field#0:mytree.tree)
        foreign llvm move(1:wybe.bool, ?$$#0:wybe.bool)


  LLVM code       :

; ModuleID = 'mytree.tree'


 


declare external ccc  i8* @wybe_malloc(i32)    


declare external ccc  void @llvm.memcpy.p0i8.p0i8.i32(i8*, i8*, i32, i32, i1)    


define external ccc  i1 @"mytree.tree./=<0>"(i64  %"$left#0", i64  %"$right#0")    {
entry:
  %"tmp$1#0" = tail call ccc  i1  @"mytree.tree.=<0>"(i64  %"$left#0", i64  %"$right#0")  
  br i1 %"tmp$1#0", label %if.then, label %if.else 
if.then:
  ret i1 0 
if.else:
  ret i1 1 
}


define external ccc  i1 @"mytree.tree.=<0>"(i64  %"$left#0", i64  %"$right#0")    {
entry:
  %1 = bitcast i64 %"$left#0" to i64 
  %"tmp$1#0" = icmp eq i64 %1, 0 
  br i1 %"tmp$1#0", label %if.then, label %if.else 
if.then:
  %"$$#0" = icmp eq i64 %"$left#0", %"$right#0" 
  ret i1 %"$$#0" 
if.else:
  %"tmp$9#0" = icmp ne i64 %"$left#0", 0 
  br i1 %"tmp$9#0", label %if.then1, label %if.else1 
if.then1:
  %2 = inttoptr i64 %"$left#0" to i64* 
  %3 = getelementptr  i64, i64* %2, i64 0 
  %4 = load  i64, i64* %3 
  %5 = add   i64 %"$left#0", 8 
  %6 = inttoptr i64 %5 to i64* 
  %7 = getelementptr  i64, i64* %6, i64 0 
  %8 = load  i64, i64* %7 
  %9 = add   i64 %"$left#0", 16 
  %10 = inttoptr i64 %9 to i64* 
  %11 = getelementptr  i64, i64* %10, i64 0 
  %12 = load  i64, i64* %11 
  %"tmp$11#0" = icmp ne i64 %"$right#0", 0 
  br i1 %"tmp$11#0", label %if.then2, label %if.else2 
if.else1:
  ret i1 0 
if.then2:
  %13 = inttoptr i64 %"$right#0" to i64* 
  %14 = getelementptr  i64, i64* %13, i64 0 
  %15 = load  i64, i64* %14 
  %16 = add   i64 %"$right#0", 8 
  %17 = inttoptr i64 %16 to i64* 
  %18 = getelementptr  i64, i64* %17, i64 0 
  %19 = load  i64, i64* %18 
  %20 = add   i64 %"$right#0", 16 
  %21 = inttoptr i64 %20 to i64* 
  %22 = getelementptr  i64, i64* %21, i64 0 
  %23 = load  i64, i64* %22 
  %"tmp$5#0" = tail call ccc  i1  @"mytree.tree.=<0>"(i64  %4, i64  %15)  
  br i1 %"tmp$5#0", label %if.then3, label %if.else3 
if.else2:
  ret i1 0 
if.then3:
  %"tmp$6#0" = icmp eq i64 %8, %19 
  br i1 %"tmp$6#0", label %if.then4, label %if.else4 
if.else3:
  ret i1 0 
if.then4:
  %"$$#0" = tail call ccc  i1  @"mytree.tree.=<0>"(i64  %12, i64  %23)  
  ret i1 %"$$#0" 
if.else4:
  ret i1 0 
}


define external ccc  i64 @"mytree.tree.empty<0>"()    {
entry:
  ret i64 0 
}


define external ccc  {i64, i1} @"mytree.tree.key<0>"(i64  %"$rec#0")    {
entry:
  %"tmp$0#0" = icmp ne i64 %"$rec#0", 0 
  br i1 %"tmp$0#0", label %if.then, label %if.else 
if.then:
  %24 = add   i64 %"$rec#0", 8 
  %25 = inttoptr i64 %24 to i64* 
  %26 = getelementptr  i64, i64* %25, i64 0 
  %27 = load  i64, i64* %26 
  %28 = insertvalue {i64, i1} undef, i64 %27, 0 
  %29 = insertvalue {i64, i1} %28, i1 1, 1 
  ret {i64, i1} %29 
if.else:
  %30 = insertvalue {i64, i1} undef, i64 undef, 0 
  %31 = insertvalue {i64, i1} %30, i1 0, 1 
  ret {i64, i1} %31 
}


define external ccc  {i64, i1} @"mytree.tree.key<1>"(i64  %"$rec#0", i64  %"$field#0")    {
entry:
  %"tmp$0#0" = icmp ne i64 %"$rec#0", 0 
  br i1 %"tmp$0#0", label %if.then, label %if.else 
if.then:
  %32 = trunc i64 24 to i32  
  %33 = tail call ccc  i8*  @wybe_malloc(i32  %32)  
  %34 = ptrtoint i8* %33 to i64 
  %35 = inttoptr i64 %34 to i8* 
  %36 = inttoptr i64 %"$rec#0" to i8* 
  %37 = trunc i64 24 to i32  
  tail call ccc  void  @llvm.memcpy.p0i8.p0i8.i32(i8*  %35, i8*  %36, i32  %37, i32  8, i1  0)  
  %38 = add   i64 %34, 8 
  %39 = inttoptr i64 %38 to i64* 
  %40 = getelementptr  i64, i64* %39, i64 0 
  store  i64 %"$field#0", i64* %40 
  %41 = insertvalue {i64, i1} undef, i64 %34, 0 
  %42 = insertvalue {i64, i1} %41, i1 1, 1 
  ret {i64, i1} %42 
if.else:
  %43 = insertvalue {i64, i1} undef, i64 %"$rec#0", 0 
  %44 = insertvalue {i64, i1} %43, i1 0, 1 
  ret {i64, i1} %44 
}


define external ccc  {i64, i1} @"mytree.tree.left<0>"(i64  %"$rec#0")    {
entry:
  %"tmp$0#0" = icmp ne i64 %"$rec#0", 0 
  br i1 %"tmp$0#0", label %if.then, label %if.else 
if.then:
  %45 = inttoptr i64 %"$rec#0" to i64* 
  %46 = getelementptr  i64, i64* %45, i64 0 
  %47 = load  i64, i64* %46 
  %48 = insertvalue {i64, i1} undef, i64 %47, 0 
  %49 = insertvalue {i64, i1} %48, i1 1, 1 
  ret {i64, i1} %49 
if.else:
  %50 = insertvalue {i64, i1} undef, i64 undef, 0 
  %51 = insertvalue {i64, i1} %50, i1 0, 1 
  ret {i64, i1} %51 
}


define external ccc  {i64, i1} @"mytree.tree.left<1>"(i64  %"$rec#0", i64  %"$field#0")    {
entry:
  %"tmp$0#0" = icmp ne i64 %"$rec#0", 0 
  br i1 %"tmp$0#0", label %if.then, label %if.else 
if.then:
  %52 = trunc i64 24 to i32  
  %53 = tail call ccc  i8*  @wybe_malloc(i32  %52)  
  %54 = ptrtoint i8* %53 to i64 
  %55 = inttoptr i64 %54 to i8* 
  %56 = inttoptr i64 %"$rec#0" to i8* 
  %57 = trunc i64 24 to i32  
  tail call ccc  void  @llvm.memcpy.p0i8.p0i8.i32(i8*  %55, i8*  %56, i32  %57, i32  8, i1  0)  
  %58 = inttoptr i64 %54 to i64* 
  %59 = getelementptr  i64, i64* %58, i64 0 
  store  i64 %"$field#0", i64* %59 
  %60 = insertvalue {i64, i1} undef, i64 %54, 0 
  %61 = insertvalue {i64, i1} %60, i1 1, 1 
  ret {i64, i1} %61 
if.else:
  %62 = insertvalue {i64, i1} undef, i64 %"$rec#0", 0 
  %63 = insertvalue {i64, i1} %62, i1 0, 1 
  ret {i64, i1} %63 
}


define external ccc  i64 @"mytree.tree.node<0>"(i64  %"left#0", i64  %"key#0", i64  %"right#0")    {
entry:
  %64 = trunc i64 24 to i32  
  %65 = tail call ccc  i8*  @wybe_malloc(i32  %64)  
  %66 = ptrtoint i8* %65 to i64 
  %67 = inttoptr i64 %66 to i64* 
  %68 = getelementptr  i64, i64* %67, i64 0 
  store  i64 %"left#0", i64* %68 
  %69 = add   i64 %66, 8 
  %70 = inttoptr i64 %69 to i64* 
  %71 = getelementptr  i64, i64* %70, i64 0 
  store  i64 %"key#0", i64* %71 
  %72 = add   i64 %66, 16 
  %73 = inttoptr i64 %72 to i64* 
  %74 = getelementptr  i64, i64* %73, i64 0 
  store  i64 %"right#0", i64* %74 
  ret i64 %66 
}


define external ccc  {i64, i64, i64, i1} @"mytree.tree.node<1>"(i64  %"$#0")    {
entry:
  %"tmp$0#0" = icmp ne i64 %"$#0", 0 
  br i1 %"tmp$0#0", label %if.then, label %if.else 
if.then:
  %75 = inttoptr i64 %"$#0" to i64* 
  %76 = getelementptr  i64, i64* %75, i64 0 
  %77 = load  i64, i64* %76 
  %78 = add   i64 %"$#0", 8 
  %79 = inttoptr i64 %78 to i64* 
  %80 = getelementptr  i64, i64* %79, i64 0 
  %81 = load  i64, i64* %80 
  %82 = add   i64 %"$#0", 16 
  %83 = inttoptr i64 %82 to i64* 
  %84 = getelementptr  i64, i64* %83, i64 0 
  %85 = load  i64, i64* %84 
  %86 = insertvalue {i64, i64, i64, i1} undef, i64 %77, 0 
  %87 = insertvalue {i64, i64, i64, i1} %86, i64 %81, 1 
  %88 = insertvalue {i64, i64, i64, i1} %87, i64 %85, 2 
  %89 = insertvalue {i64, i64, i64, i1} %88, i1 1, 3 
  ret {i64, i64, i64, i1} %89 
if.else:
  %90 = insertvalue {i64, i64, i64, i1} undef, i64 undef, 0 
  %91 = insertvalue {i64, i64, i64, i1} %90, i64 undef, 1 
  %92 = insertvalue {i64, i64, i64, i1} %91, i64 undef, 2 
  %93 = insertvalue {i64, i64, i64, i1} %92, i1 0, 3 
  ret {i64, i64, i64, i1} %93 
}


define external ccc  {i64, i1} @"mytree.tree.right<0>"(i64  %"$rec#0")    {
entry:
  %"tmp$0#0" = icmp ne i64 %"$rec#0", 0 
  br i1 %"tmp$0#0", label %if.then, label %if.else 
if.then:
  %94 = add   i64 %"$rec#0", 16 
  %95 = inttoptr i64 %94 to i64* 
  %96 = getelementptr  i64, i64* %95, i64 0 
  %97 = load  i64, i64* %96 
  %98 = insertvalue {i64, i1} undef, i64 %97, 0 
  %99 = insertvalue {i64, i1} %98, i1 1, 1 
  ret {i64, i1} %99 
if.else:
  %100 = insertvalue {i64, i1} undef, i64 undef, 0 
  %101 = insertvalue {i64, i1} %100, i1 0, 1 
  ret {i64, i1} %101 
}


define external ccc  {i64, i1} @"mytree.tree.right<1>"(i64  %"$rec#0", i64  %"$field#0")    {
entry:
  %"tmp$0#0" = icmp ne i64 %"$rec#0", 0 
  br i1 %"tmp$0#0", label %if.then, label %if.else 
if.then:
  %102 = trunc i64 24 to i32  
  %103 = tail call ccc  i8*  @wybe_malloc(i32  %102)  
  %104 = ptrtoint i8* %103 to i64 
  %105 = inttoptr i64 %104 to i8* 
  %106 = inttoptr i64 %"$rec#0" to i8* 
  %107 = trunc i64 24 to i32  
  tail call ccc  void  @llvm.memcpy.p0i8.p0i8.i32(i8*  %105, i8*  %106, i32  %107, i32  8, i1  0)  
  %108 = add   i64 %104, 16 
  %109 = inttoptr i64 %108 to i64* 
  %110 = getelementptr  i64, i64* %109, i64 0 
  store  i64 %"$field#0", i64* %110 
  %111 = insertvalue {i64, i1} undef, i64 %104, 0 
  %112 = insertvalue {i64, i1} %111, i1 1, 1 
  ret {i64, i1} %112 
if.else:
  %113 = insertvalue {i64, i1} undef, i64 %"$rec#0", 0 
  %114 = insertvalue {i64, i1} %113, i1 0, 1 
  ret {i64, i1} %114 
}
