Public type int is {type-int:1:8}
  Public func +(x:int,y:int):int {type-int:2:12} = foreign llvm add(32 {type-int:2:57}, x {type-int:2:58}, y {type-int:2:60}) {type-int:2:38}
  Public proc +(?x:int, y:int, z:int) {type-int:3:12}[=(?x {type-int:3:39}, foreign llvm sub(32 {type-int:3:63}, z {type-int:3:64}, y {type-int:3:66}) {type-int:3:44}) {type-int:3:39}]
  Public proc +(x:int, ?y:int, z:int) {type-int:4:12}[=(?y {type-int:4:39}, foreign llvm sub(32 {type-int:4:63}, z {type-int:4:64}, x {type-int:4:66}) {type-int:4:44}) {type-int:4:39}]
  Public func -(x:int,y:int):int {type-int:5:12} = foreign llvm sub(32 {type-int:5:57}, x {type-int:5:58}, y {type-int:5:60}) {type-int:5:38}
  Public proc -(?x:int, y:int, z:int) {type-int:6:12}[=(?x {type-int:6:39}, foreign llvm add(32 {type-int:6:63}, z {type-int:6:64}, y {type-int:6:66}) {type-int:6:44}) {type-int:6:39}]
  Public proc -(x:int, ?y:int, z:int) {type-int:7:12}[=(?y {type-int:7:39}, foreign llvm sub(32 {type-int:7:63}, z {type-int:7:64}, x {type-int:7:66}) {type-int:7:44}) {type-int:7:39}]
  Public func *(x:int,y:int):int {type-int:8:12} = foreign llvm mul(32 {type-int:8:57}, x {type-int:8:58}, y {type-int:8:60}) {type-int:8:38}
  Public func /(x:int,y:int):int {type-int:9:12} = foreign llvm sdiv(32 {type-int:9:58}, x {type-int:9:59}, y {type-int:9:61}) {type-int:9:38}
  Public func ==(x:int,y:int):bool {type-int:10:12} = foreign llvm icmp(eq {type-int:10:58}, 32 {type-int:10:63}, x {type-int:10:64}, y {type-int:10:66}) {type-int:10:40}
  Public func /=(x:int,y:int):bool {type-int:11:12} = foreign llvm icmp(ne {type-int:11:58}, 32 {type-int:11:63}, x {type-int:11:64}, y {type-int:11:66}) {type-int:11:40}
  Public func <(x:int,y:int):bool {type-int:12:12} = foreign llvm icmp(slt {type-int:12:57}, 32 {type-int:12:63}, x {type-int:12:64}, y {type-int:12:66}) {type-int:12:39}
  Public func <=(x:int,y:int):bool {type-int:13:12} = foreign llvm icmp(sle {type-int:13:58}, 32 {type-int:13:64}, x {type-int:13:65}, y {type-int:13:67}) {type-int:13:40}
  Public func >(x:int,y:int):bool {type-int:14:12} = foreign llvm icmp(sgt {type-int:14:57}, 32 {type-int:14:63}, x {type-int:14:64}, y {type-int:14:66}) {type-int:14:39}
  Public func >=(x:int,y:int):bool {type-int:15:12} = foreign llvm icmp(sge {type-int:15:58}, 32 {type-int:15:64}, x {type-int:15:65}, y {type-int:15:67}) {type-int:15:40}
end


 Module type-int
  public submods  : int {type-int:1:8}
  public types    : 
  public resources: 
  public procs    : 
  imports         : 
  types           : 
  resources       : 
  procs           : 

Submodules of type-int:
int: 
 Module type-int.int([])
  public submods  : 
  public types    : int/0 {type-int:1:8}
  public resources: 
  public procs    : *(x:0:int, y:0:int, ?$:-1:int) <0> {type-int:8:12}
                    +(x:0:int, ?y:-1:int, z:0:int) <2> {type-int:4:12}
                    +(?x:-1:int, y:0:int, z:0:int) <1> {type-int:3:12}
                    +(x:0:int, y:0:int, ?$:-1:int) <0> {type-int:2:12}
                    -(x:0:int, ?y:-1:int, z:0:int) <2> {type-int:7:12}
                    -(?x:-1:int, y:0:int, z:0:int) <1> {type-int:6:12}
                    -(x:0:int, y:0:int, ?$:-1:int) <0> {type-int:5:12}
                    /(x:0:int, y:0:int, ?$:-1:int) <0> {type-int:9:12}
                    /=(x:0:int, y:0:int, ?$:-1:bool) <0> {type-int:11:12}
                    <(x:0:int, y:0:int, ?$:-1:bool) <0> {type-int:12:12}
                    <=(x:0:int, y:0:int, ?$:-1:bool) <0> {type-int:13:12}
                    ==(x:0:int, y:0:int, ?$:-1:bool) <0> {type-int:10:12}
                    >(x:0:int, y:0:int, ?$:-1:bool) <0> {type-int:14:12}
                    >=(x:0:int, y:0:int, ?$:-1:bool) <0> {type-int:15:12}
  imports         : 
  types           : int/0 {type-int:1:8}
  resources       : 
  procs           : *:
proc *(x:0:int, y:0:int, ?$:-1:int) (id 0):  {type-int:8:12}
    foreign llvm mul(32, x:0, y:0, ?$tmp0:0) {type-int:8:38}
    =(?$:0, $tmp0:0) {?}
                    +:
proc +(x:0:int, y:0:int, ?$:-1:int) (id 0):  {type-int:2:12}
    foreign llvm add(32, x:0, y:0, ?$tmp0:0) {type-int:2:38}
    =(?$:0, $tmp0:0) {?}
proc +(?x:-1:int, y:0:int, z:0:int) (id 1):  {type-int:3:12}
    foreign llvm sub(32, z:0, y:0, ?$tmp0:0) {type-int:3:44}
    =(?x:0, $tmp0:0) {type-int:3:39}
proc +(x:0:int, ?y:-1:int, z:0:int) (id 2):  {type-int:4:12}
    foreign llvm sub(32, z:0, x:0, ?$tmp0:0) {type-int:4:44}
    =(?y:0, $tmp0:0) {type-int:4:39}
                    -:
proc -(x:0:int, y:0:int, ?$:-1:int) (id 0):  {type-int:5:12}
    foreign llvm sub(32, x:0, y:0, ?$tmp0:0) {type-int:5:38}
    =(?$:0, $tmp0:0) {?}
proc -(?x:-1:int, y:0:int, z:0:int) (id 1):  {type-int:6:12}
    foreign llvm add(32, z:0, y:0, ?$tmp0:0) {type-int:6:44}
    =(?x:0, $tmp0:0) {type-int:6:39}
proc -(x:0:int, ?y:-1:int, z:0:int) (id 2):  {type-int:7:12}
    foreign llvm sub(32, z:0, x:0, ?$tmp0:0) {type-int:7:44}
    =(?y:0, $tmp0:0) {type-int:7:39}
                    /:
proc /(x:0:int, y:0:int, ?$:-1:int) (id 0):  {type-int:9:12}
    foreign llvm sdiv(32, x:0, y:0, ?$tmp0:0) {type-int:9:38}
    =(?$:0, $tmp0:0) {?}
                    /=:
proc /=(x:0:int, y:0:int, ?$:-1:bool) (id 0):  {type-int:11:12}
    foreign llvm icmp(ne:0, 32, x:0, y:0, ?$tmp0:0) {type-int:11:40}
    =(?$:0, $tmp0:0) {?}
                    <:
proc <(x:0:int, y:0:int, ?$:-1:bool) (id 0):  {type-int:12:12}
    foreign llvm icmp(slt:0, 32, x:0, y:0, ?$tmp0:0) {type-int:12:39}
    =(?$:0, $tmp0:0) {?}
                    <=:
proc <=(x:0:int, y:0:int, ?$:-1:bool) (id 0):  {type-int:13:12}
    foreign llvm icmp(sle:0, 32, x:0, y:0, ?$tmp0:0) {type-int:13:40}
    =(?$:0, $tmp0:0) {?}
                    ==:
proc ==(x:0:int, y:0:int, ?$:-1:bool) (id 0):  {type-int:10:12}
    foreign llvm icmp(eq:0, 32, x:0, y:0, ?$tmp0:0) {type-int:10:40}
    =(?$:0, $tmp0:0) {?}
                    >:
proc >(x:0:int, y:0:int, ?$:-1:bool) (id 0):  {type-int:14:12}
    foreign llvm icmp(sgt:0, 32, x:0, y:0, ?$tmp0:0) {type-int:14:39}
    =(?$:0, $tmp0:0) {?}
                    >=:
proc >=(x:0:int, y:0:int, ?$:-1:bool) (id 0):  {type-int:15:12}
    foreign llvm icmp(sge:0, 32, x:0, y:0, ?$tmp0:0) {type-int:15:40}
    =(?$:0, $tmp0:0) {?}

Submodules of type-int.int:

uninitialised variable $tmp0
uninitialised variable $tmp0
uninitialised variable $tmp0
uninitialised variable $tmp0
uninitialised variable $tmp0
uninitialised variable $tmp0
uninitialised variable $tmp0
uninitialised variable $tmp0
uninitialised variable eq
uninitialised variable $tmp0
uninitialised variable ne
uninitialised variable $tmp0
uninitialised variable slt
uninitialised variable $tmp0
uninitialised variable sle
uninitialised variable $tmp0
uninitialised variable sgt
uninitialised variable $tmp0
uninitialised variable sge
uninitialised variable $tmp0