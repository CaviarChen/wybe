======================================================================
AFTER EVERYTHING:
 Module type_list
  public submods  : 
  public types    : intlist: (type_list.intlist,"pointer")
  public resources: 
  public procs    : type_list.++<0>
                    type_list.intlist.=<0>
                    type_list.intlist.=<1>
                    type_list.intlist.=<2>
                    type_list.intlist.[]<0>
                    type_list.intlist.[|]<0>
                    type_list.intlist.[|]<1>
                    type_list.intlist.head<0>
                    type_list.intlist.head<1>
                    type_list.intlist.tail<0>
                    type_list.intlist.tail<1>
  imports         : public use type_list.intlist
                    use wybe
  types           : intlist/0 (pointer)  @type_list:1:8
  resources       : 
  procs           : 

++ > public (1 calls) (inline)
0: ++(x#0:type_list.intlist, y#0:type_list.intlist, ?$#0:type_list.intlist):
    type_list.gen$1<0>(~x#0:type_list.intlist, ~y#0:type_list.intlist, ?tmp$0#0:type_list.intlist, ?x#1:type_list.intlist, ?y#1:type_list.intlist) @type_list:6:5
    foreign llvm move(~tmp$0#0:type_list.intlist, ?$#0:type_list.intlist)


gen$1 > (1 calls)
0: gen$1(x#0:type_list.intlist, y#0:type_list.intlist, ?tmp$0#0:type_list.intlist, [?x#0:type_list.intlist], [?y#0:type_list.intlist]):
    foreign lpvm cast(0:bool, ?tmp$9#0:wybe.bool)
    case ~tmp$9#0:wybe.bool of
    0:
        foreign lpvm access(x#0:type_list.intlist, 0:wybe.int, ?tmp$11#0:wybe.int)
        foreign lpvm access(x#0:type_list.intlist, 8:wybe.int, ?tmp$13#0:type_list.intlist)
        type_list.gen$1<0>(~tmp$13#0:type_list.intlist, y#0:type_list.intlist, ?tmp$16#0:type_list.intlist, ?tmp$17#0:type_list.intlist, ?tmp$18#0:type_list.intlist) @type_list:6:5
        type_list.intlist.[|]<0>(~tmp$11#0:wybe.int, ~tmp$16#0:type_list.intlist, ?tmp$3#0:type_list.intlist) @type_list:8:10
        foreign llvm move(~tmp$3#0:type_list.intlist, ?tmp$0#0:type_list.intlist)

    1:
        foreign llvm move(y#0:type_list.intlist, ?tmp$0#0:type_list.intlist)

  submodules      : type_list.intlist
--------------------------------------------------
 Module type_list.intlist([])
  public submods  : 
  public types    : 
  public resources: 
  public procs    : type_list.intlist.=<0>
                    type_list.intlist.=<1>
                    type_list.intlist.=<2>
                    type_list.intlist.[]<0>
                    type_list.intlist.[|]<0>
                    type_list.intlist.[|]<1>
                    type_list.intlist.head<0>
                    type_list.intlist.head<1>
                    type_list.intlist.tail<0>
                    type_list.intlist.tail<1>
  imports         : use wybe
  types           : 
  resources       : 
  procs           : 

= > public (3 calls) (inline)
0: =(?x#0:type_list.intlist, y#0:type_list.intlist):
    foreign llvm move(~y#0:type_list.intlist, ?x#0:type_list.intlist)
= > public (0 calls) (inline)
1: =(y#0:type_list.intlist, ?x#0:type_list.intlist):
    foreign llvm move(~y#0:type_list.intlist, ?x#0:type_list.intlist)
= > public (0 calls) (inline)
2: =([x#0:type_list.intlist], [y#0:type_list.intlist], ?$#0:wybe.bool):
    foreign lpvm cast(0:bool, ?tmp$0#0:wybe.bool)
    foreign llvm move(~tmp$0#0:wybe.bool, ?$#0:wybe.bool)


[] > public (0 calls) (inline)
0: [](?$#0:type_list.intlist):
    foreign lpvm cast(0:intlist, ?$#0:type_list.intlist)


[|] > public (0 calls)
0: [|](head#0:wybe.int, tail#0:type_list.intlist, ?$#0:type_list.intlist):
    foreign lpvm alloc(16:wybe.int, ?$rec#0:intlist)
    foreign lpvm mutate(~%$rec#0:intlist, ?%$rec#1:intlist, 0:wybe.int, ~head#0:wybe.int)
    foreign lpvm mutate(~%$rec#1:intlist, ?%$rec#2:intlist, 8:wybe.int, ~tail#0:type_list.intlist)
    foreign llvm move(~$rec#2:intlist, ?$#0:type_list.intlist)
[|] > public (0 calls) (inline)
1: [|](?head#0:wybe.int, ?tail#0:type_list.intlist, $#0:type_list.intlist):
    foreign lpvm access($#0:type_list.intlist, 0:wybe.int, ?head#0:wybe.int)
    foreign lpvm access(~$#0:type_list.intlist, 8:wybe.int, ?tail#0:type_list.intlist)


head > public (0 calls) (inline)
0: head($rec#0:type_list.intlist, ?$#0:wybe.int):
    foreign lpvm access(~$rec#0:type_list.intlist, 0:wybe.int, ?tmp$0#0:wybe.int)
    foreign llvm move(~tmp$0#0:wybe.int, ?$#0:wybe.int)
head > public (0 calls) (inline)
1: head($rec#0:type_list.intlist, ?$rec#1:type_list.intlist, $field#0:wybe.int):
    foreign lpvm mutate(~$rec#0:type_list.intlist, 0:wybe.int, ~$field#0:wybe.int, ?$rec#1:type_list.intlist)


tail > public (0 calls) (inline)
0: tail($rec#0:type_list.intlist, ?$#0:type_list.intlist):
    foreign lpvm access(~$rec#0:type_list.intlist, 8:wybe.int, ?tmp$0#0:type_list.intlist)
    foreign llvm move(~tmp$0#0:type_list.intlist, ?$#0:type_list.intlist)
tail > public (0 calls) (inline)
1: tail($rec#0:type_list.intlist, ?$rec#1:type_list.intlist, $field#0:type_list.intlist):
    foreign lpvm mutate(~$rec#0:type_list.intlist, 8:wybe.int, ~$field#0:type_list.intlist, ?$rec#1:type_list.intlist)
type_list, type_list.intlist
======================================================================
AFTER LLVM IR:

; ModuleID = 'type_list'

declare i8* @wybe_malloc(i32)

define i64* @"type_list.++<0>"(i64* %"x#0", i64* %"y#0") {
entry:
  %"tmp$0#0" = tail call i64* @"type_list.gen$1<0>"(i64* %"x#0", i64* %"y#0")
  ret i64* %"tmp$0#0"
}

define i64* @"type_list.gen$1<0>"(i64* %"x#0", i64* %"y#0") {
entry:
  %0 = alloca i64
  store i64 0, i64* %0
  %1 = load i64* %0
  %2 = trunc i64 %1 to i1
  br i1 %2, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  ret i64* %"y#0"

if.else:                                          ; preds = %entry
  %3 = getelementptr i64* %"x#0", i64 0
  %4 = load i64* %3
  %5 = getelementptr i64* %"x#0", i64 1
  %6 = load i64* %5
  %7 = inttoptr i64 %6 to i64*
  %"tmp$16#0" = tail call i64* @"type_list.gen$1<0>"(i64* %7, i64* %"y#0")
  %"tmp$3#0" = tail call i64* @"type_list.intlist.[|]<0>"(i64 %4, i64* %"tmp$16#0")
  ret i64* %"tmp$3#0"
}

define i64* @"type_list.intlist.=<0>"(i64* %"y#0") {
entry:
  ret i64* %"y#0"
}

define i64* @"type_list.intlist.=<1>"(i64* %"y#0") {
entry:
  ret i64* %"y#0"
}

define i1 @"type_list.intlist.=<1>1"() {
entry:
  %0 = alloca i64
  store i64 0, i64* %0
  %1 = load i64* %0
  %2 = trunc i64 %1 to i1
  ret i1 %2
}

define i64* @"type_list.intlist.[]<0>"() {
entry:
  ret i64* null
}

define i64* @"type_list.intlist.[|]<0>"(i64 %"head#0", i64* %"tail#0") {
entry:
  %0 = tail call i8* @wybe_malloc(i32 16)
  %1 = bitcast i8* %0 to i64*
  %2 = getelementptr i64* %1, i64 0
  store i64 %"head#0", i64* %2
  %3 = getelementptr i64* %1, i64 1
  %4 = ptrtoint i64* %"tail#0" to i64
  store i64 %4, i64* %3
  ret i64* %1
}

define { i64, i64* } @"type_list.intlist.[|]<1>"(i64* %"$#0") {
entry:
  %0 = getelementptr i64* %"$#0", i64 0
  %1 = load i64* %0
  %2 = getelementptr i64* %"$#0", i64 1
  %3 = load i64* %2
  %4 = inttoptr i64 %3 to i64*
  %5 = insertvalue { i64, i64* } undef, i64 %1, 0
  %6 = insertvalue { i64, i64* } %5, i64* %4, 1
  ret { i64, i64* } %6
}

define i64 @"type_list.intlist.head<0>"(i64* %"$rec#0") {
entry:
  %0 = getelementptr i64* %"$rec#0", i64 0
  %1 = load i64* %0
  ret i64 %1
}

define i64* @"type_list.intlist.head<1>"(i64* %"$rec#0", i64 %"$field#0") {
entry:
  %0 = getelementptr i64* %"$rec#0", i64 0
  store i64 %"$field#0", i64* %0
  ret i64* %"$rec#0"
}

define i64* @"type_list.intlist.tail<0>"(i64* %"$rec#0") {
entry:
  %0 = getelementptr i64* %"$rec#0", i64 1
  %1 = load i64* %0
  %2 = inttoptr i64 %1 to i64*
  ret i64* %2
}

define i64* @"type_list.intlist.tail<1>"(i64* %"$rec#0", i64* %"$field#0") {
entry:
  %0 = getelementptr i64* %"$rec#0", i64 1
  %1 = ptrtoint i64* %"$field#0" to i64
  store i64 %1, i64* %0
  ret i64* %"$rec#0"
}

--------------------------------------------------
; ModuleID = 'type_list.intlist'

declare i8* @wybe_malloc(i32)

define i64* @"type_list.intlist.=<0>"(i64* %"y#0") {
entry:
  ret i64* %"y#0"
}

define i64* @"type_list.intlist.=<1>"(i64* %"y#0") {
entry:
  ret i64* %"y#0"
}

define i1 @"type_list.intlist.=<1>1"() {
entry:
  %0 = alloca i64
  store i64 0, i64* %0
  %1 = load i64* %0
  %2 = trunc i64 %1 to i1
  ret i1 %2
}

define i64* @"type_list.intlist.[]<0>"() {
entry:
  ret i64* null
}

define i64* @"type_list.intlist.[|]<0>"(i64 %"head#0", i64* %"tail#0") {
entry:
  %0 = tail call i8* @wybe_malloc(i32 16)
  %1 = bitcast i8* %0 to i64*
  %2 = getelementptr i64* %1, i64 0
  store i64 %"head#0", i64* %2
  %3 = getelementptr i64* %1, i64 1
  %4 = ptrtoint i64* %"tail#0" to i64
  store i64 %4, i64* %3
  ret i64* %1
}

define { i64, i64* } @"type_list.intlist.[|]<1>"(i64* %"$#0") {
entry:
  %0 = getelementptr i64* %"$#0", i64 0
  %1 = load i64* %0
  %2 = getelementptr i64* %"$#0", i64 1
  %3 = load i64* %2
  %4 = inttoptr i64 %3 to i64*
  %5 = insertvalue { i64, i64* } undef, i64 %1, 0
  %6 = insertvalue { i64, i64* } %5, i64* %4, 1
  ret { i64, i64* } %6
}

define i64 @"type_list.intlist.head<0>"(i64* %"$rec#0") {
entry:
  %0 = getelementptr i64* %"$rec#0", i64 0
  %1 = load i64* %0
  ret i64 %1
}

define i64* @"type_list.intlist.head<1>"(i64* %"$rec#0", i64 %"$field#0") {
entry:
  %0 = getelementptr i64* %"$rec#0", i64 0
  store i64 %"$field#0", i64* %0
  ret i64* %"$rec#0"
}

define i64* @"type_list.intlist.tail<0>"(i64* %"$rec#0") {
entry:
  %0 = getelementptr i64* %"$rec#0", i64 1
  %1 = load i64* %0
  %2 = inttoptr i64 %1 to i64*
  ret i64* %2
}

define i64* @"type_list.intlist.tail<1>"(i64* %"$rec#0", i64* %"$field#0") {
entry:
  %0 = getelementptr i64* %"$rec#0", i64 1
  %1 = ptrtoint i64* %"$field#0" to i64
  store i64 %1, i64* %0
  ret i64* %"$rec#0"
}

