======================================================================
AFTER EVERYTHING:
 Module type_list
  public submods  : 
  public types    : intlist: (type_list.intlist,Just address)
  public resources: 
  public procs    : type_list.<0>
                    type_list.++<0>
                    type_list.length<0>
                    type_list.intlist./=<0>
                    type_list.intlist.=<0>
                    type_list.intlist.[]<0>
                    type_list.intlist.[|]<0>
                    type_list.intlist.[|]<1>
                    type_list.intlist.head<0>
                    type_list.intlist.head<1>
                    type_list.intlist.tail<0>
                    type_list.intlist.tail<1>
  imports         : public use type_list.intlist
                    use wybe
  types           : intlist/public  is address { []() @type_list:1:24 | [|](head:int, tail:intlist) @type_list:1:29  }  @type_list:1:5
  resources       : 
  submodules      : type_list.intlist
  procs           : 

*main* > public (0 calls)
0: (argc#0:wybe.int, [?argc#0:wybe.int], argv#0:wybe.int, [?argv#0:wybe.int], exit_code#0:wybe.int, [?exit_code#0:wybe.int], io#0:wybe.phantom, ?io#1:wybe.phantom): AliasPairs: []
    foreign lpvm alloc(16:wybe.int, ?tmp$11#0:type_list.intlist)
    foreign lpvm mutate(~tmp$11#0:type_list.intlist, ?tmp$12#0:type_list.intlist, 0:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, 3:wybe.int)
    foreign lpvm mutate(~tmp$12#0:type_list.intlist, ?tmp$13#0:type_list.intlist, 8:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, 0:type_list.intlist)
    foreign lpvm alloc(16:wybe.int, ?tmp$16#0:type_list.intlist)
    foreign lpvm mutate(~tmp$16#0:type_list.intlist, ?tmp$17#0:type_list.intlist, 0:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, 2:wybe.int)
    foreign lpvm mutate(~tmp$17#0:type_list.intlist, ?tmp$18#0:type_list.intlist, 8:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, ~tmp$13#0:type_list.intlist)
    foreign lpvm alloc(16:wybe.int, ?tmp$21#0:type_list.intlist)
    foreign lpvm mutate(~tmp$21#0:type_list.intlist, ?tmp$22#0:type_list.intlist, 0:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, 1:wybe.int)
    foreign lpvm mutate(~tmp$22#0:type_list.intlist, ?tmp$23#0:type_list.intlist, 8:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, ~tmp$18#0:type_list.intlist)
    foreign lpvm alloc(16:wybe.int, ?tmp$26#0:type_list.intlist)
    foreign lpvm mutate(~tmp$26#0:type_list.intlist, ?tmp$27#0:type_list.intlist, 0:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, 200:wybe.int)
    foreign lpvm mutate(~tmp$27#0:type_list.intlist, ?tmp$28#0:type_list.intlist, 8:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, 0:type_list.intlist)
    foreign lpvm alloc(16:wybe.int, ?tmp$31#0:type_list.intlist)
    foreign lpvm mutate(~tmp$31#0:type_list.intlist, ?tmp$32#0:type_list.intlist, 0:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, 100:wybe.int)
    foreign lpvm mutate(~tmp$32#0:type_list.intlist, ?tmp$33#0:type_list.intlist, 8:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, ~tmp$28#0:type_list.intlist)
    type_list.++<0>(~tmp$23#0:type_list.intlist, ~tmp$33#0:type_list.intlist, ?tmp$8#0:type_list.intlist) @type_list:14:15
    type_list.length<0>(~tmp$8#0:type_list.intlist, ?tmp$7#0:wybe.int) @type_list:14:8
    foreign c print_int(~tmp$7#0:wybe.int, ~#io#0:wybe.phantom, ?#io#1:wybe.phantom) @wybe:nn:nn


++ > public (2 calls)
0: ++(x#0:type_list.intlist, y#0:type_list.intlist, ?$#0:type_list.intlist): AliasPairs: [($#0,y#0)]
    foreign llvm icmp ne(x#0:type_list.intlist, 0:wybe.int, ?tmp$5#0:wybe.bool)
    case ~tmp$5#0:wybe.bool of
    0:
        foreign llvm move(~y#0:type_list.intlist, ?$#0:type_list.intlist) @type_list:3:5

    1:
        foreign lpvm access(x#0:type_list.intlist, 0:wybe.int, ?h#0:wybe.int)
        foreign lpvm access(~x#0:type_list.intlist, 8:wybe.int, ?t#0:type_list.intlist)
        type_list.++<0>(~t#0:type_list.intlist, ~y#0:type_list.intlist, ?tmp$2#0:type_list.intlist) @type_list:5:13
        foreign lpvm alloc(16:wybe.int, ?tmp$8#0:type_list.intlist)
        foreign lpvm mutate(~tmp$8#0:type_list.intlist, ?tmp$9#0:type_list.intlist, 0:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, ~h#0:wybe.int)
        foreign lpvm mutate(~tmp$9#0:type_list.intlist, ?$#0:type_list.intlist, 8:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, ~tmp$2#0:type_list.intlist)



length > public (2 calls)
0: length(x#0:type_list.intlist, ?$#0:wybe.int): AliasPairs: []
    foreign llvm icmp ne(x#0:type_list.intlist, 0:wybe.int, ?tmp$5#0:wybe.bool)
    case ~tmp$5#0:wybe.bool of
    0:
        foreign llvm move(0:wybe.int, ?$#0:wybe.int) @type_list:8:5

    1:
        foreign lpvm access(~x#0:type_list.intlist, 8:wybe.int, ?t#0:type_list.intlist)
        type_list.length<0>(~t#0:type_list.intlist, ?tmp$2#0:wybe.int) @type_list:9:32
        foreign llvm add(~tmp$2#0:wybe.int, 1:wybe.int, ?$#0:wybe.int) @wybe:nn:nn


  LLVM code       :

; ModuleID = 'type_list'


 


declare external ccc  void @print_int(i64)    


declare external ccc  i8* @wybe_malloc(i32)    


declare external ccc  void @llvm.memcpy.p0i8.p0i8.i32(i8*, i8*, i32, i32, i1)    


define external ccc  void @"type_list.<0>"(i64  %"argc#0", i64  %"argv#0", i64  %"exit_code#0")    {
entry:
  %1 = trunc i64 16 to i32  
  %2 = tail call ccc  i8*  @wybe_malloc(i32  %1)  
  %3 = ptrtoint i8* %2 to i64 
  %4 = inttoptr i64 %3 to i64* 
  %5 = getelementptr  i64, i64* %4, i64 0 
  store  i64 3, i64* %5 
  %6 = add   i64 %3, 8 
  %7 = inttoptr i64 %6 to i64* 
  %8 = getelementptr  i64, i64* %7, i64 0 
  store  i64 0, i64* %8 
  %9 = trunc i64 16 to i32  
  %10 = tail call ccc  i8*  @wybe_malloc(i32  %9)  
  %11 = ptrtoint i8* %10 to i64 
  %12 = inttoptr i64 %11 to i64* 
  %13 = getelementptr  i64, i64* %12, i64 0 
  store  i64 2, i64* %13 
  %14 = add   i64 %11, 8 
  %15 = inttoptr i64 %14 to i64* 
  %16 = getelementptr  i64, i64* %15, i64 0 
  store  i64 %3, i64* %16 
  %17 = trunc i64 16 to i32  
  %18 = tail call ccc  i8*  @wybe_malloc(i32  %17)  
  %19 = ptrtoint i8* %18 to i64 
  %20 = inttoptr i64 %19 to i64* 
  %21 = getelementptr  i64, i64* %20, i64 0 
  store  i64 1, i64* %21 
  %22 = add   i64 %19, 8 
  %23 = inttoptr i64 %22 to i64* 
  %24 = getelementptr  i64, i64* %23, i64 0 
  store  i64 %11, i64* %24 
  %25 = trunc i64 16 to i32  
  %26 = tail call ccc  i8*  @wybe_malloc(i32  %25)  
  %27 = ptrtoint i8* %26 to i64 
  %28 = inttoptr i64 %27 to i64* 
  %29 = getelementptr  i64, i64* %28, i64 0 
  store  i64 200, i64* %29 
  %30 = add   i64 %27, 8 
  %31 = inttoptr i64 %30 to i64* 
  %32 = getelementptr  i64, i64* %31, i64 0 
  store  i64 0, i64* %32 
  %33 = trunc i64 16 to i32  
  %34 = tail call ccc  i8*  @wybe_malloc(i32  %33)  
  %35 = ptrtoint i8* %34 to i64 
  %36 = inttoptr i64 %35 to i64* 
  %37 = getelementptr  i64, i64* %36, i64 0 
  store  i64 100, i64* %37 
  %38 = add   i64 %35, 8 
  %39 = inttoptr i64 %38 to i64* 
  %40 = getelementptr  i64, i64* %39, i64 0 
  store  i64 %27, i64* %40 
  %"tmp$8#0" = tail call ccc  i64  @"type_list.++<0>"(i64  %19, i64  %35)  
  %"tmp$7#0" = tail call ccc  i64  @"type_list.length<0>"(i64  %"tmp$8#0")  
  tail call ccc  void  @print_int(i64  %"tmp$7#0")  
  ret void 
}


define external ccc  i64 @"type_list.++<0>"(i64  %"x#0", i64  %"y#0")    {
entry:
  %"tmp$5#0" = icmp ne i64 %"x#0", 0 
  br i1 %"tmp$5#0", label %if.then, label %if.else 
if.then:
  %41 = inttoptr i64 %"x#0" to i64* 
  %42 = getelementptr  i64, i64* %41, i64 0 
  %43 = load  i64, i64* %42 
  %44 = add   i64 %"x#0", 8 
  %45 = inttoptr i64 %44 to i64* 
  %46 = getelementptr  i64, i64* %45, i64 0 
  %47 = load  i64, i64* %46 
  %"tmp$2#0" = tail call ccc  i64  @"type_list.++<0>"(i64  %47, i64  %"y#0")  
  %48 = trunc i64 16 to i32  
  %49 = tail call ccc  i8*  @wybe_malloc(i32  %48)  
  %50 = ptrtoint i8* %49 to i64 
  %51 = inttoptr i64 %50 to i64* 
  %52 = getelementptr  i64, i64* %51, i64 0 
  store  i64 %43, i64* %52 
  %53 = add   i64 %50, 8 
  %54 = inttoptr i64 %53 to i64* 
  %55 = getelementptr  i64, i64* %54, i64 0 
  store  i64 %"tmp$2#0", i64* %55 
  ret i64 %50 
if.else:
  ret i64 %"y#0" 
}


define external ccc  i64 @"type_list.length<0>"(i64  %"x#0")    {
entry:
  %"tmp$5#0" = icmp ne i64 %"x#0", 0 
  br i1 %"tmp$5#0", label %if.then, label %if.else 
if.then:
  %56 = add   i64 %"x#0", 8 
  %57 = inttoptr i64 %56 to i64* 
  %58 = getelementptr  i64, i64* %57, i64 0 
  %59 = load  i64, i64* %58 
  %"tmp$2#0" = tail call ccc  i64  @"type_list.length<0>"(i64  %59)  
  %"$#0" = add   i64 %"tmp$2#0", 1 
  ret i64 %"$#0" 
if.else:
  ret i64 0 
}
--------------------------------------------------
 Module type_list.intlist
  public submods  : 
  public types    : 
  public resources: 
  public procs    : type_list.intlist./=<0>
                    type_list.intlist.=<0>
                    type_list.intlist.[]<0>
                    type_list.intlist.[|]<0>
                    type_list.intlist.[|]<1>
                    type_list.intlist.head<0>
                    type_list.intlist.head<1>
                    type_list.intlist.tail<0>
                    type_list.intlist.tail<1>
  imports         : use type_list
                    use wybe
  types           : 
  resources       : 
  procs           : 

/= > public inline test (0 calls)
0: /=($left#0:type_list.intlist, $right#0:type_list.intlist, ?$$#0:wybe.bool): AliasPairs: []
    type_list.intlist.=<0>(~$left#0:type_list.intlist, ~$right#0:type_list.intlist, ?tmp$1#0:wybe.bool)
    case ~tmp$1#0:wybe.bool of
    0:
        foreign llvm move(1:wybe.bool, ?$$#0:wybe.bool)

    1:
        foreign llvm move(0:wybe.bool, ?$$#0:wybe.bool)



= > public test (6 calls)
0: =($left#0:type_list.intlist, $right#0:type_list.intlist, ?$$#0:wybe.bool): AliasPairs: []
    foreign lpvm cast($left#0:type_list.intlist, ?tmp$0#0:!wybe.int)
    foreign llvm icmp eq(~tmp$0#0:!wybe.int, 0:wybe.int, ?tmp$1#0:wybe.bool)
    case ~tmp$1#0:wybe.bool of
    0:
        foreign llvm icmp ne($left#0:type_list.intlist, 0:wybe.int, ?tmp$8#0:wybe.bool)
        case ~tmp$8#0:wybe.bool of
        0:
            foreign llvm move(0:wybe.bool, ?$$#0:wybe.bool)

        1:
            foreign lpvm access($left#0:type_list.intlist, 0:wybe.int, ?$left$head#0:wybe.int)
            foreign lpvm access(~$left#0:type_list.intlist, 8:wybe.int, ?$left$tail#0:type_list.intlist)
            foreign llvm icmp ne($right#0:type_list.intlist, 0:wybe.int, ?tmp$10#0:wybe.bool)
            case ~tmp$10#0:wybe.bool of
            0:
                foreign llvm move(0:wybe.bool, ?$$#0:wybe.bool)

            1:
                foreign lpvm access($right#0:type_list.intlist, 0:wybe.int, ?$right$head#0:wybe.int)
                foreign lpvm access(~$right#0:type_list.intlist, 8:wybe.int, ?$right$tail#0:type_list.intlist)
                foreign llvm icmp eq(~$left$head#0:wybe.int, ~$right$head#0:wybe.int, ?tmp$5#0:wybe.bool) @wybe:nn:nn
                case ~tmp$5#0:wybe.bool of
                0:
                    foreign llvm move(0:wybe.bool, ?$$#0:wybe.bool)

                1:
                    type_list.intlist.=<0>(~$left$tail#0:type_list.intlist, ~$right$tail#0:type_list.intlist, ?$$#0:wybe.bool)




    1:
        foreign llvm icmp eq(~$left#0:type_list.intlist, ~$right#0:type_list.intlist, ?$$#0:wybe.bool)



[] > public inline (0 calls)
0: [](?$#0:type_list.intlist): AliasPairs: []
    foreign llvm move(0:type_list.intlist, ?$#0:type_list.intlist)


[|] > public inline (0 calls)
0: [|](head#0:wybe.int, tail#0:type_list.intlist, ?$#0:type_list.intlist): AliasPairs: []
    foreign lpvm alloc(16:wybe.int, ?$rec#0:!type_list.intlist)
    foreign lpvm mutate(~%$rec#0:type_list.intlist, ?%$rec#1:type_list.intlist, 0:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, ~head#0:wybe.int)
    foreign lpvm mutate(~%$rec#1:type_list.intlist, ?%$#0:type_list.intlist, 8:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, ~tail#0:type_list.intlist)
[|] > public inline test (7 calls)
1: [|](?head#0:wybe.int, ?tail#0:type_list.intlist, $#0:type_list.intlist, ?$$#0:wybe.bool): AliasPairs: []
    foreign llvm icmp ne($#0:type_list.intlist, 0:wybe.int, ?tmp$0#0:wybe.bool)
    case ~tmp$0#0:wybe.bool of
    0:
        foreign llvm move(0:wybe.bool, ?$$#0:wybe.bool)

    1:
        foreign lpvm access($#0:type_list.intlist, 0:wybe.int, ?head#0:wybe.int)
        foreign lpvm access(~$#0:type_list.intlist, 8:wybe.int, ?tail#0:type_list.intlist)
        foreign llvm move(1:wybe.bool, ?$$#0:wybe.bool)



head > public inline test (0 calls)
0: head($rec#0:type_list.intlist, ?$#0:wybe.int, ?$$#0:wybe.bool): AliasPairs: []
    foreign llvm icmp ne($rec#0:type_list.intlist, 0:wybe.int, ?tmp$0#0:wybe.bool)
    case ~tmp$0#0:wybe.bool of
    0:
        foreign llvm move(0:wybe.bool, ?$$#0:wybe.bool)

    1:
        foreign lpvm access(~$rec#0:type_list.intlist, 0:wybe.int, ?$#0:wybe.int)
        foreign llvm move(1:wybe.bool, ?$$#0:wybe.bool)

head > public inline test (0 calls)
1: head($rec#0:type_list.intlist, ?$rec#1:type_list.intlist, $field#0:wybe.int, ?$$#0:wybe.bool): AliasPairs: []
    foreign llvm icmp ne($rec#0:type_list.intlist, 0:wybe.int, ?tmp$0#0:wybe.bool)
    case ~tmp$0#0:wybe.bool of
    0:
        foreign llvm move(0:wybe.bool, ?$$#0:wybe.bool)
        foreign llvm move(~$rec#0:type_list.intlist, ?$rec#1:type_list.intlist)

    1:
        foreign lpvm mutate(~%$rec#0:type_list.intlist, ?%$rec#1:type_list.intlist, 0:wybe.int, 0:wybe.int, 16:wybe.int, 0:wybe.int, ~$field#0:wybe.int)
        foreign llvm move(1:wybe.bool, ?$$#0:wybe.bool)



tail > public inline test (0 calls)
0: tail($rec#0:type_list.intlist, ?$#0:type_list.intlist, ?$$#0:wybe.bool): AliasPairs: []
    foreign llvm icmp ne($rec#0:type_list.intlist, 0:wybe.int, ?tmp$0#0:wybe.bool)
    case ~tmp$0#0:wybe.bool of
    0:
        foreign llvm move(0:wybe.bool, ?$$#0:wybe.bool)

    1:
        foreign lpvm access(~$rec#0:type_list.intlist, 8:wybe.int, ?$#0:type_list.intlist)
        foreign llvm move(1:wybe.bool, ?$$#0:wybe.bool)

tail > public inline test (0 calls)
1: tail($rec#0:type_list.intlist, ?$rec#1:type_list.intlist, $field#0:type_list.intlist, ?$$#0:wybe.bool): AliasPairs: []
    foreign llvm icmp ne($rec#0:type_list.intlist, 0:wybe.int, ?tmp$0#0:wybe.bool)
    case ~tmp$0#0:wybe.bool of
    0:
        foreign llvm move(0:wybe.bool, ?$$#0:wybe.bool)
        foreign llvm move(~$rec#0:type_list.intlist, ?$rec#1:type_list.intlist)

    1:
        foreign lpvm mutate noalias(~%$rec#0:type_list.intlist, ?%$rec#1:type_list.intlist, 8:wybe.int, 0:wybe.int, 16:wybe.int, 0:wybe.int, ~$field#0:type_list.intlist)
        foreign llvm move(1:wybe.bool, ?$$#0:wybe.bool)


  LLVM code       :

; ModuleID = 'type_list.intlist'


 


declare external ccc  i8* @wybe_malloc(i32)    


declare external ccc  void @llvm.memcpy.p0i8.p0i8.i32(i8*, i8*, i32, i32, i1)    


define external ccc  i1 @"type_list.intlist./=<0>"(i64  %"$left#0", i64  %"$right#0")    {
entry:
  %"tmp$1#0" = tail call ccc  i1  @"type_list.intlist.=<0>"(i64  %"$left#0", i64  %"$right#0")  
  br i1 %"tmp$1#0", label %if.then, label %if.else 
if.then:
  ret i1 0 
if.else:
  ret i1 1 
}


define external ccc  i1 @"type_list.intlist.=<0>"(i64  %"$left#0", i64  %"$right#0")    {
entry:
  %1 = bitcast i64 %"$left#0" to i64 
  %"tmp$1#0" = icmp eq i64 %1, 0 
  br i1 %"tmp$1#0", label %if.then, label %if.else 
if.then:
  %"$$#0" = icmp eq i64 %"$left#0", %"$right#0" 
  ret i1 %"$$#0" 
if.else:
  %"tmp$8#0" = icmp ne i64 %"$left#0", 0 
  br i1 %"tmp$8#0", label %if.then1, label %if.else1 
if.then1:
  %2 = inttoptr i64 %"$left#0" to i64* 
  %3 = getelementptr  i64, i64* %2, i64 0 
  %4 = load  i64, i64* %3 
  %5 = add   i64 %"$left#0", 8 
  %6 = inttoptr i64 %5 to i64* 
  %7 = getelementptr  i64, i64* %6, i64 0 
  %8 = load  i64, i64* %7 
  %"tmp$10#0" = icmp ne i64 %"$right#0", 0 
  br i1 %"tmp$10#0", label %if.then2, label %if.else2 
if.else1:
  ret i1 0 
if.then2:
  %9 = inttoptr i64 %"$right#0" to i64* 
  %10 = getelementptr  i64, i64* %9, i64 0 
  %11 = load  i64, i64* %10 
  %12 = add   i64 %"$right#0", 8 
  %13 = inttoptr i64 %12 to i64* 
  %14 = getelementptr  i64, i64* %13, i64 0 
  %15 = load  i64, i64* %14 
  %"tmp$5#0" = icmp eq i64 %4, %11 
  br i1 %"tmp$5#0", label %if.then3, label %if.else3 
if.else2:
  ret i1 0 
if.then3:
  %"$$#0" = tail call ccc  i1  @"type_list.intlist.=<0>"(i64  %8, i64  %15)  
  ret i1 %"$$#0" 
if.else3:
  ret i1 0 
}


define external ccc  i64 @"type_list.intlist.[]<0>"()    {
entry:
  ret i64 0 
}


define external ccc  i64 @"type_list.intlist.[|]<0>"(i64  %"head#0", i64  %"tail#0")    {
entry:
  %16 = trunc i64 16 to i32  
  %17 = tail call ccc  i8*  @wybe_malloc(i32  %16)  
  %18 = ptrtoint i8* %17 to i64 
  %19 = inttoptr i64 %18 to i64* 
  %20 = getelementptr  i64, i64* %19, i64 0 
  store  i64 %"head#0", i64* %20 
  %21 = add   i64 %18, 8 
  %22 = inttoptr i64 %21 to i64* 
  %23 = getelementptr  i64, i64* %22, i64 0 
  store  i64 %"tail#0", i64* %23 
  ret i64 %18 
}


define external ccc  {i64, i64, i1} @"type_list.intlist.[|]<1>"(i64  %"$#0")    {
entry:
  %"tmp$0#0" = icmp ne i64 %"$#0", 0 
  br i1 %"tmp$0#0", label %if.then, label %if.else 
if.then:
  %24 = inttoptr i64 %"$#0" to i64* 
  %25 = getelementptr  i64, i64* %24, i64 0 
  %26 = load  i64, i64* %25 
  %27 = add   i64 %"$#0", 8 
  %28 = inttoptr i64 %27 to i64* 
  %29 = getelementptr  i64, i64* %28, i64 0 
  %30 = load  i64, i64* %29 
  %31 = insertvalue {i64, i64, i1} undef, i64 %26, 0 
  %32 = insertvalue {i64, i64, i1} %31, i64 %30, 1 
  %33 = insertvalue {i64, i64, i1} %32, i1 1, 2 
  ret {i64, i64, i1} %33 
if.else:
  %34 = insertvalue {i64, i64, i1} undef, i64 undef, 0 
  %35 = insertvalue {i64, i64, i1} %34, i64 undef, 1 
  %36 = insertvalue {i64, i64, i1} %35, i1 0, 2 
  ret {i64, i64, i1} %36 
}


define external ccc  {i64, i1} @"type_list.intlist.head<0>"(i64  %"$rec#0")    {
entry:
  %"tmp$0#0" = icmp ne i64 %"$rec#0", 0 
  br i1 %"tmp$0#0", label %if.then, label %if.else 
if.then:
  %37 = inttoptr i64 %"$rec#0" to i64* 
  %38 = getelementptr  i64, i64* %37, i64 0 
  %39 = load  i64, i64* %38 
  %40 = insertvalue {i64, i1} undef, i64 %39, 0 
  %41 = insertvalue {i64, i1} %40, i1 1, 1 
  ret {i64, i1} %41 
if.else:
  %42 = insertvalue {i64, i1} undef, i64 undef, 0 
  %43 = insertvalue {i64, i1} %42, i1 0, 1 
  ret {i64, i1} %43 
}


define external ccc  {i64, i1} @"type_list.intlist.head<1>"(i64  %"$rec#0", i64  %"$field#0")    {
entry:
  %"tmp$0#0" = icmp ne i64 %"$rec#0", 0 
  br i1 %"tmp$0#0", label %if.then, label %if.else 
if.then:
  %44 = trunc i64 16 to i32  
  %45 = tail call ccc  i8*  @wybe_malloc(i32  %44)  
  %46 = ptrtoint i8* %45 to i64 
  %47 = inttoptr i64 %46 to i8* 
  %48 = inttoptr i64 %"$rec#0" to i8* 
  %49 = trunc i64 16 to i32  
  tail call ccc  void  @llvm.memcpy.p0i8.p0i8.i32(i8*  %47, i8*  %48, i32  %49, i32  8, i1  0)  
  %50 = inttoptr i64 %46 to i64* 
  %51 = getelementptr  i64, i64* %50, i64 0 
  store  i64 %"$field#0", i64* %51 
  %52 = insertvalue {i64, i1} undef, i64 %46, 0 
  %53 = insertvalue {i64, i1} %52, i1 1, 1 
  ret {i64, i1} %53 
if.else:
  %54 = insertvalue {i64, i1} undef, i64 %"$rec#0", 0 
  %55 = insertvalue {i64, i1} %54, i1 0, 1 
  ret {i64, i1} %55 
}


define external ccc  {i64, i1} @"type_list.intlist.tail<0>"(i64  %"$rec#0")    {
entry:
  %"tmp$0#0" = icmp ne i64 %"$rec#0", 0 
  br i1 %"tmp$0#0", label %if.then, label %if.else 
if.then:
  %56 = add   i64 %"$rec#0", 8 
  %57 = inttoptr i64 %56 to i64* 
  %58 = getelementptr  i64, i64* %57, i64 0 
  %59 = load  i64, i64* %58 
  %60 = insertvalue {i64, i1} undef, i64 %59, 0 
  %61 = insertvalue {i64, i1} %60, i1 1, 1 
  ret {i64, i1} %61 
if.else:
  %62 = insertvalue {i64, i1} undef, i64 undef, 0 
  %63 = insertvalue {i64, i1} %62, i1 0, 1 
  ret {i64, i1} %63 
}


define external ccc  {i64, i1} @"type_list.intlist.tail<1>"(i64  %"$rec#0", i64  %"$field#0")    {
entry:
  %"tmp$0#0" = icmp ne i64 %"$rec#0", 0 
  br i1 %"tmp$0#0", label %if.then, label %if.else 
if.then:
  %64 = trunc i64 16 to i32  
  %65 = tail call ccc  i8*  @wybe_malloc(i32  %64)  
  %66 = ptrtoint i8* %65 to i64 
  %67 = inttoptr i64 %66 to i8* 
  %68 = inttoptr i64 %"$rec#0" to i8* 
  %69 = trunc i64 16 to i32  
  tail call ccc  void  @llvm.memcpy.p0i8.p0i8.i32(i8*  %67, i8*  %68, i32  %69, i32  8, i1  0)  
  %70 = add   i64 %66, 8 
  %71 = inttoptr i64 %70 to i64* 
  %72 = getelementptr  i64, i64* %71, i64 0 
  store  i64 %"$field#0", i64* %72 
  %73 = insertvalue {i64, i1} undef, i64 %66, 0 
  %74 = insertvalue {i64, i1} %73, i1 1, 1 
  ret {i64, i1} %74 
if.else:
  %75 = insertvalue {i64, i1} undef, i64 %"$rec#0", 0 
  %76 = insertvalue {i64, i1} %75, i1 0, 1 
  ret {i64, i1} %76 
}
