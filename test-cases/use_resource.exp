======================================================================
AFTER EVERYTHING:
 Module use_resource
  public submods  : 
  public types    : 
  public resources: 
  public procs    : use_resource.<0>
  imports         : use wybe
  types           : 
  resources       : count: fromList [(use_resource.count,Just wybe.int @use_resource:1:1)] @use_resource:1:1
  procs           : 

*main* > public (0 calls)
0: (wybe.io$io#0:wybe.phantom, ?wybe.io$io#1:wybe.phantom):
    foreign c print_string("Inner count: ":wybe.string, ~#wybe.io$io#0:wybe.phantom, ?tmp$1#0:wybe.phantom) @wybe:92:41
    foreign c print_int(4:wybe.int, ~tmp$1#0:wybe.phantom, ?tmp$2#0:wybe.phantom) @wybe:80:38
    foreign c putchar('\n':wybe.char, ~tmp$2#0:wybe.phantom, ?tmp$3#0:wybe.phantom) @wybe:78:28
    foreign c print_string("Outer count: ":wybe.string, ~tmp$3#0:wybe.phantom, ?tmp$4#0:wybe.phantom) @wybe:92:41
    foreign c print_int(1:wybe.int, ~tmp$4#0:wybe.phantom, ?tmp$5#0:wybe.phantom) @wybe:80:38
    foreign c putchar('\n':wybe.char, ~tmp$5#0:wybe.phantom, ?#wybe.io$io#1:wybe.phantom) @wybe:78:28


inc_count > inline (4 calls)
0: inc_count(count#0:wybe.int, ?count#1:wybe.int):
    foreign llvm add(~count#0:wybe.int, 1:wybe.int, ?count#1:wybe.int) @wybe:13:38


use_test > inline (1 calls)
0: use_test(wybe.io$io#0:wybe.phantom, ?wybe.io$io#4:wybe.phantom):
    foreign c print_string("Inner count: ":wybe.string, ~#wybe.io$io#0:wybe.phantom, ?#wybe.io$io#1:wybe.phantom) @wybe:92:41
    foreign c print_int(4:wybe.int, ~#wybe.io$io#1:wybe.phantom, ?tmp$10#0:wybe.phantom) @wybe:80:38
    foreign c putchar('\n':wybe.char, ~tmp$10#0:wybe.phantom, ?#wybe.io$io#2:wybe.phantom) @wybe:78:28
    foreign c print_string("Outer count: ":wybe.string, ~#wybe.io$io#2:wybe.phantom, ?#wybe.io$io#3:wybe.phantom) @wybe:92:41
    foreign c print_int(1:wybe.int, ~#wybe.io$io#3:wybe.phantom, ?tmp$15#0:wybe.phantom) @wybe:80:38
    foreign c putchar('\n':wybe.char, ~tmp$15#0:wybe.phantom, ?#wybe.io$io#4:wybe.phantom) @wybe:78:28
  LLVM code       :

; ModuleID = 'use_resource'


declare external ccc void @putchar(i8)

declare external ccc void @print_int(i64)

declare external ccc void @print_string(i8*)

@use_resource.2 = constant [14 x i8] c"Outer count: \00"

@use_resource.1 = constant [14 x i8] c"Inner count: \00"

@use_resource.5 = constant [14 x i8] c"Outer count: \00"

@use_resource.4 = constant [14 x i8] c"Inner count: \00"

declare external ccc i8* @wybe_malloc(i32)

define external ccc i32 @use_resource.main(){
entry:
  tail call ccc void @print_string(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @use_resource.1, i32 0, i32 0))
  tail call ccc void @print_int(i64 4)
  tail call ccc void @putchar(i8 10)
  tail call ccc void @print_string(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @use_resource.2, i32 0, i32 0))
  tail call ccc void @print_int(i64 1)
  tail call ccc void @putchar(i8 10)
  %3 = alloca i32
  store i32 0, i32* %3
  ret i32 0
}

define external ccc i64 @"use_resource.inc_count<0>"(i64 %"count#0"){
entry:
  %"count#1" = add i64 %"count#0", 1
  ret i64 %"count#1"
}

define external ccc void @"use_resource.use_test<0>"(){
entry:
  tail call ccc void @print_string(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @use_resource.4, i32 0, i32 0))
  tail call ccc void @print_int(i64 4)
  tail call ccc void @putchar(i8 10)
  tail call ccc void @print_string(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @use_resource.5, i32 0, i32 0))
  tail call ccc void @print_int(i64 1)
  tail call ccc void @putchar(i8 10)
  ret void
}
