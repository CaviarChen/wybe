======================================================================
AFTER EVERYTHING:
 Module use_resource
  public submods  : 
  public types    : 
  public resources: 
  public procs    : use_resource.<0>
  imports         : use wybe
  types           : 
  resources       : count: fromList [(use_resource.count,Just wybe.int = 0 @use_resource:1:23 @use_resource:1:1)] @use_resource:1:1
  procs           : 

*main* > public (0 calls)
0: (?count#1:wybe.int, argc#0:wybe.int, [?argc#0:wybe.int], argv#0:wybe.int, [?argv#0:wybe.int], exit_code#0:wybe.int, [?exit_code#0:wybe.int], io#0:phantom, ?io#1:phantom):
    foreign c print_string("Inner count (4): ":wybe.string, ~#io#0:phantom, ?tmp$6#0:phantom) @wybe:nn:nn
    foreign c print_int(4:wybe.int, ~tmp$6#0:phantom, ?tmp$7#0:phantom) @wybe:nn:nn
    foreign c putchar('\n':wybe.char, ~tmp$7#0:phantom, ?tmp$8#0:phantom) @wybe:nn:nn
    foreign llvm move(1:wybe.int, ?#count#1:wybe.int)
    foreign c print_string("Outer count (1): ":wybe.string, ~tmp$8#0:phantom, ?tmp$9#0:phantom) @wybe:nn:nn
    foreign c print_int(1:wybe.int, ~tmp$9#0:phantom, ?tmp$10#0:phantom) @wybe:nn:nn
    foreign c putchar('\n':wybe.char, ~tmp$10#0:phantom, ?#io#1:phantom) @wybe:nn:nn


inc_count > inline (4 calls)
0: inc_count(count#0:wybe.int, ?count#1:wybe.int):
    foreign llvm add(~count#0:wybe.int, 1:wybe.int, ?count#1:wybe.int) @wybe:nn:nn


use_test > inline (1 calls)
0: use_test(count#0:wybe.int, ?count#5:wybe.int, io#0:phantom, ?io#4:phantom):
    foreign llvm add(~#count#0:wybe.int, 1:wybe.int, ?#count#1:wybe.int) @wybe:nn:nn
    foreign llvm add(#count#1:wybe.int, 1:wybe.int, ?#count#2:wybe.int) @wybe:nn:nn
    foreign llvm add(~#count#2:wybe.int, 1:wybe.int, ?#count#3:wybe.int) @wybe:nn:nn
    foreign llvm add(~#count#3:wybe.int, 1:wybe.int, ?#count#4:wybe.int) @wybe:nn:nn
    foreign c print_string("Inner count (4): ":wybe.string, ~#io#0:phantom, ?#io#1:phantom) @wybe:nn:nn
    foreign c print_int(~count#4:wybe.int, ~#io#1:phantom, ?tmp$9#0:phantom) @wybe:nn:nn
    foreign c putchar('\n':wybe.char, ~tmp$9#0:phantom, ?#io#2:phantom) @wybe:nn:nn
    foreign llvm move(count#1, ?count#5)
    foreign c print_string("Outer count (1): ":wybe.string, ~#io#2:phantom, ?#io#3:phantom) @wybe:nn:nn
    foreign c print_int(~count#1, ~#io#3:phantom, ?tmp$14#0:phantom) @wybe:nn:nn
    foreign c putchar('\n':wybe.char, ~tmp$14#0:phantom, ?#io#4:phantom) @wybe:nn:nn

  LLVM code       :

; ModuleID = 'use_resource'


declare external ccc void @putchar(i8)

declare external ccc void @print_int(i64)

declare external ccc void @print_string(i8*)

@use_resource.2 = constant [18 x i8] c"Outer count (1): \00"

@use_resource.1 = constant [18 x i8] c"Inner count (4): \00"

@use_resource.4 = constant [18 x i8] c"Outer count (1): \00"

@use_resource.3 = constant [18 x i8] c"Inner count (4): \00"

declare external ccc i8* @wybe_malloc(i32)

define external ccc i64 @"use_resource.<0>"(i64 %"argc#0", i64 %"argv#0", i64 %"exit_code#0"){
entry:
  tail call ccc void @print_string(i8* getelementptr inbounds ([18 x i8], [18 x i8]* @use_resource.1, i32 0, i32 0))
  tail call ccc void @print_int(i64 4)
  tail call ccc void @putchar(i8 10)
  tail call ccc void @print_string(i8* getelementptr inbounds ([18 x i8], [18 x i8]* @use_resource.2, i32 0, i32 0))
  tail call ccc void @print_int(i64 1)
  tail call ccc void @putchar(i8 10)
  ret i64 1
}

define external ccc i64 @"use_resource.inc_count<0>"(i64 %"count#0"){
entry:
  %"count#1" = add i64 %"count#0", 1
  ret i64 %"count#1"
}

define external ccc i64 @"use_resource.use_test<0>"(i64 %"count#0"){
entry:
  %"count#1" = add i64 %"count#0", 1
  %"count#2" = add i64 %"count#1", 1
  %"count#3" = add i64 %"count#2", 1
  %"count#4" = add i64 %"count#3", 1
  tail call ccc void @print_string(i8* getelementptr inbounds ([18 x i8], [18 x i8]* @use_resource.3, i32 0, i32 0))
  tail call ccc void @print_int(i64 %"count#4")
  tail call ccc void @putchar(i8 10)
  tail call ccc void @print_string(i8* getelementptr inbounds ([18 x i8], [18 x i8]* @use_resource.4, i32 0, i32 0))
  tail call ccc void @print_int(i64 %"count#1")
  tail call ccc void @putchar(i8 10)
  ret i64 %"count#1"
}
