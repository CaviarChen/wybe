======================================================================
AFTER EVERYTHING:
 Module func_quadruple
  public submods  : 
  public types    : 
  public resources: 
  public procs    : func_quadruple.double<0>
                    func_quadruple.quadruple<0>
  imports         : use wybe
  types           : 
  resources       : 
  procs           : 

double > public (2 calls) (inline)
0: double(a#0:wybe.int, ?$#0:wybe.int):
    foreign llvm add(~a#0:wybe.int, ~a#0:wybe.int, ?tmp$3#0:wybe.int) @wybe:4:38
    foreign llvm move(~tmp$3#0:wybe.int, ?$#0:wybe.int)


quadruple > public (0 calls) (inline)
0: quadruple(a#0:wybe.int, ?$#0:wybe.int):
    foreign llvm add(~a#0:wybe.int, ~a#0:wybe.int, ?tmp$3#0:wybe.int) @wybe:4:38
    foreign llvm add(~tmp$3#0:wybe.int, ~tmp$3#0:wybe.int, ?tmp$5#0:wybe.int) @wybe:4:38
    foreign llvm move(~tmp$5#0:wybe.int, ?$#0:wybe.int)
func_quadruple
======================================================================
AFTER LLVM IR:

; ModuleID = 'func_quadruple'

define i32 @func_quadruple.double(i32 %"a#0") {
entry:
  %"tmp$3#0" = add i32 %"a#0", %"a#0"
  ret i32 %"tmp$3#0"
}

define i32 @func_quadruple.quadruple(i32 %"a#0") {
entry:
  %"tmp$3#0" = add i32 %"a#0", %"a#0"
  %"tmp$5#0" = add i32 %"tmp$3#0", %"tmp$3#0"
  ret i32 %"tmp$5#0"
}

