======================================================================
AFTER EVERYTHING:
 Module func_factorial
  public submods  : 
  public types    : 
  public resources: 
  public procs    : func_factorial.<0>
                    func_factorial.factorial<0>
  imports         : use wybe
  types           : 
  resources       : 
  procs           : 

*main* > public (0 calls)
0: (wybe.io$io#0:wybe.phantom, ?wybe.io$io#1:wybe.phantom):
    func_factorial.gen$1<0>(5:wybe.int, ?tmp$2#0:wybe.int, ?tmp$3#0:wybe.int) @func_factorial:2:8
    foreign c print_int(~tmp$3#0:wybe.int, ~#wybe.io$io#0:wybe.phantom, ?#wybe.io$io#1:wybe.phantom) @wybe:110:38


factorial > public (2 calls) (inline)
0: factorial(n#0:wybe.int, ?$#0:wybe.int):
    func_factorial.gen$1<0>(~n#0:wybe.int, ?n#1:wybe.int, ?tmp$0#0:wybe.int) @func_factorial:2:8
    foreign llvm move(~tmp$0#0:wybe.int, ?$#0:wybe.int)


gen$1 > (1 calls)
0: gen$1(n#0:wybe.int, [?n#0:wybe.int], ?tmp$0#0:wybe.int):
    foreign llvm icmp sle(n#0:wybe.int, 0:wybe.int, ?tmp$7#0:wybe.bool) @wybe:16:40
    case ~tmp$7#0:wybe.bool of
    0:
        foreign llvm sub(n#0:wybe.int, 1:wybe.int, ?tmp$10#0:wybe.int) @wybe:7:38
        func_factorial.gen$1<0>(~tmp$10#0:wybe.int, ?tmp$12#0:wybe.int, ?tmp$13#0:wybe.int) @func_factorial:2:8
        foreign llvm mul(n#0:wybe.int, ~tmp$13#0:wybe.int, ?tmp$16#0:wybe.int) @wybe:12:38
        foreign llvm move(~tmp$16#0:wybe.int, ?tmp$0#0:wybe.int)

    1:
        foreign llvm move(1:wybe.int, ?tmp$0#0:wybe.int)

func_factorial
======================================================================
AFTER LLVM IR:

; ModuleID = 'func_factorial'

declare void @print_int(i32)

define i32 @func_factorial.main() {
entry:
  %"tmp$2#0" = tail call i32 @"func_factorial.gen$1"(i32 5)
  tail call void @print_int(i32 %"tmp$2#0")
  %0 = alloca i32
  store i32 0, i32* %0
  ret i32 0
}

define i32 @func_factorial.factorial(i32 %"n#0") {
entry:
  %"n#1" = tail call i32 @"func_factorial.gen$1"(i32 %"n#0")
  ret i32 %"n#1"
}

define i32 @"func_factorial.gen$1"(i32 %"n#0") {
entry:
  %"tmp$7#0" = icmp sle i32 %"n#0", 0
  br i1 %"tmp$7#0", label %if.then, label %if.else

if.then:                                          ; preds = %entry
  ret i32 1

if.else:                                          ; preds = %entry
  %"tmp$10#0" = sub i32 %"n#0", 1
  %"tmp$12#0" = tail call i32 @"func_factorial.gen$1"(i32 %"tmp$10#0")
  %"tmp$16#0" = mul i32 %"n#0", %"tmp$12#0"
  ret i32 %"tmp$16#0"
}

