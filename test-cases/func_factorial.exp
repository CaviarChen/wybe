======================================================================
AFTER EVERYTHING:
 Module func_factorial
  public submods  : 
  public types    : 
  public resources: 
  public procs    : func_factorial.<0>
                    func_factorial.factorial<0>
  imports         : use wybe
  types           : 
  resources       : 
  procs           : 

*main* > public (0 calls)
0: (wybe.io$io#0:wybe.phantom, ?wybe.io$io#1:wybe.phantom):
    func_factorial.factorial<0>(5:wybe.int, ?tmp$0#0:wybe.int) @func_factorial:4:9
    foreign c print_int(~tmp$0#0:wybe.int, ~#wybe.io$io#0:wybe.phantom, ?tmp$3#0:wybe.phantom) @wybe:76:38
    foreign c putchar('\n':wybe.char, ~tmp$3#0:wybe.phantom, ?#wybe.io$io#1:wybe.phantom) @wybe:74:28


factorial > public (2 calls)
0: factorial(n#0:wybe.int, ?$#0:wybe.int):
    foreign llvm icmp sle(n#0:wybe.int, 0:wybe.int, ?tmp$7#0:wybe.bool) @wybe:25:40
    case ~tmp$7#0:wybe.bool of
    0:
        foreign llvm sub(n#0:wybe.int, 1:wybe.int, ?tmp$10#0:wybe.int) @wybe:16:38
        func_factorial.factorial<0>(~tmp$10#0:wybe.int, ?tmp$2#0:wybe.int) @func_factorial:2:34
        foreign llvm mul(~n#0:wybe.int, ~tmp$2#0:wybe.int, ?tmp$13#0:wybe.int) @wybe:21:38
        foreign llvm move(~tmp$13#0:wybe.int, ?$#0:wybe.int) @func_factorial:1:8

    1:
        foreign llvm move(1:wybe.int, ?$#0:wybe.int) @func_factorial:1:8

func_factorial
======================================================================
AFTER LLVM IR:

; ModuleID = 'func_factorial'
source_filename = "test-cases/func_factorial.wybe"

declare void @putchar(i8) local_unnamed_addr

declare void @print_int(i64) local_unnamed_addr

define i32 @func_factorial.main() local_unnamed_addr {
entry:
  %"tmp$0#0" = tail call i64 @"func_factorial.factorial<0>"(i64 5)
  tail call void @print_int(i64 %"tmp$0#0")
  tail call void @putchar(i8 10)
  ret i32 0
}

; Function Attrs: nounwind readnone
define i64 @"func_factorial.factorial<0>"(i64 %"n#0") local_unnamed_addr #0 {
entry:
  %"tmp$7#01" = icmp slt i64 %"n#0", 1
  br i1 %"tmp$7#01", label %if.then, label %if.else.preheader

if.else.preheader:                                ; preds = %entry
  br label %if.else

if.then:                                          ; preds = %if.else, %entry
  %accumulator.tr.lcssa = phi i64 [ 1, %entry ], [ %"tmp$13#0", %if.else ]
  ret i64 %accumulator.tr.lcssa

if.else:                                          ; preds = %if.else.preheader, %if.else
  %"n#0.tr3" = phi i64 [ %"tmp$10#0", %if.else ], [ %"n#0", %if.else.preheader ]
  %accumulator.tr2 = phi i64 [ %"tmp$13#0", %if.else ], [ 1, %if.else.preheader ]
  %"tmp$10#0" = add nsw i64 %"n#0.tr3", -1
  %"tmp$13#0" = mul i64 %"n#0.tr3", %accumulator.tr2
  %"tmp$7#0" = icmp slt i64 %"n#0.tr3", 2
  br i1 %"tmp$7#0", label %if.then, label %if.else
}

attributes #0 = { nounwind readnone }

