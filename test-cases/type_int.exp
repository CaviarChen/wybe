======================================================================
AFTER EVERYTHING:
 Module type_int
  public submods  : 
  public types    : myint: (type_int.myint,"i64")
  public resources: 
  public procs    : type_int.myint.*<0>
                    type_int.myint.+<0>
                    type_int.myint.+<1>
                    type_int.myint.+<2>
                    type_int.myint.-<0>
                    type_int.myint.-<1>
                    type_int.myint.-<2>
                    type_int.myint./<0>
                    type_int.myint./=<0>
                    type_int.myint.<<0>
                    type_int.myint.<=<0>
                    type_int.myint.=<0>
                    type_int.myint.=<1>
                    type_int.myint.==<0>
                    type_int.myint.><0>
                    type_int.myint.>=<0>
  imports         : public use type_int.myint
                    use wybe
  types           : myint/0 (i64)  @type_int:1:8
  resources       : 
  procs           : 

  submodules      : type_int.myint
--------------------------------------------------
 Module type_int.myint([])
  public submods  : 
  public types    : 
  public resources: 
  public procs    : type_int.myint.*<0>
                    type_int.myint.+<0>
                    type_int.myint.+<1>
                    type_int.myint.+<2>
                    type_int.myint.-<0>
                    type_int.myint.-<1>
                    type_int.myint.-<2>
                    type_int.myint./<0>
                    type_int.myint./=<0>
                    type_int.myint.<<0>
                    type_int.myint.<=<0>
                    type_int.myint.=<0>
                    type_int.myint.=<1>
                    type_int.myint.==<0>
                    type_int.myint.><0>
                    type_int.myint.>=<0>
  imports         : use wybe
  types           : 
  resources       : 
  procs           : 

* > public inline (0 calls)
0: *(x#0:type_int.myint, y#0:type_int.myint, ?$#0:type_int.myint):
    foreign llvm mul(~x#0:type_int.myint, ~y#0:type_int.myint, ?tmp$0#0:myint) @type_int:8:44
    foreign llvm move(~tmp$0#0:myint, ?$#0:type_int.myint) @type_int:8:12


+ > public inline (0 calls)
0: +(x#0:type_int.myint, y#0:type_int.myint, ?$#0:type_int.myint):
    foreign llvm add(~x#0:type_int.myint, ~y#0:type_int.myint, ?tmp$0#0:myint) @type_int:2:44
    foreign llvm move(~tmp$0#0:myint, ?$#0:type_int.myint) @type_int:2:12
+ > public inline (0 calls)
1: +(?x#0:type_int.myint, y#0:type_int.myint, z#0:type_int.myint):
    foreign llvm sub(~z#0:type_int.myint, ~y#0:type_int.myint, ?tmp$0#0:type_int.myint) @type_int:3:50
    foreign llvm move(~tmp$0#0:type_int.myint, ?x#0:type_int.myint)
+ > public inline (0 calls)
2: +(x#0:type_int.myint, ?y#0:type_int.myint, z#0:type_int.myint):
    foreign llvm sub(~z#0:type_int.myint, ~x#0:type_int.myint, ?tmp$0#0:type_int.myint) @type_int:4:50
    foreign llvm move(~tmp$0#0:type_int.myint, ?y#0:type_int.myint)


- > public inline (0 calls)
0: -(x#0:type_int.myint, y#0:type_int.myint, ?$#0:type_int.myint):
    foreign llvm sub(~x#0:type_int.myint, ~y#0:type_int.myint, ?tmp$0#0:myint) @type_int:5:44
    foreign llvm move(~tmp$0#0:myint, ?$#0:type_int.myint) @type_int:5:12
- > public inline (0 calls)
1: -(?x#0:type_int.myint, y#0:type_int.myint, z#0:type_int.myint):
    foreign llvm add(~z#0:type_int.myint, ~y#0:type_int.myint, ?tmp$0#0:type_int.myint) @type_int:6:50
    foreign llvm move(~tmp$0#0:type_int.myint, ?x#0:type_int.myint)
- > public inline (0 calls)
2: -(x#0:type_int.myint, ?y#0:type_int.myint, z#0:type_int.myint):
    foreign llvm sub(~z#0:type_int.myint, ~x#0:type_int.myint, ?tmp$0#0:type_int.myint) @type_int:7:50
    foreign llvm move(~tmp$0#0:type_int.myint, ?y#0:type_int.myint)


/ > public inline (0 calls)
0: /(x#0:type_int.myint, y#0:type_int.myint, ?$#0:type_int.myint):
    foreign llvm sdiv(~x#0:type_int.myint, ~y#0:type_int.myint, ?tmp$0#0:myint) @type_int:9:44
    foreign llvm move(~tmp$0#0:myint, ?$#0:type_int.myint) @type_int:9:12


/= > public inline (0 calls)
0: /=(x#0:type_int.myint, y#0:type_int.myint, ?$#0:wybe.bool):
    foreign llvm icmp ne(~x#0:type_int.myint, ~y#0:type_int.myint, ?tmp$0#0:bool) @type_int:11:44
    foreign llvm move(~tmp$0#0:bool, ?$#0:wybe.bool) @type_int:11:12


< > public inline (0 calls)
0: <(x#0:type_int.myint, y#0:type_int.myint, ?$#0:wybe.bool):
    foreign llvm icmp slt(~x#0:type_int.myint, ~y#0:type_int.myint, ?tmp$0#0:bool) @type_int:12:43
    foreign llvm move(~tmp$0#0:bool, ?$#0:wybe.bool) @type_int:12:12


<= > public inline (0 calls)
0: <=(x#0:type_int.myint, y#0:type_int.myint, ?$#0:wybe.bool):
    foreign llvm icmp sle(~x#0:type_int.myint, ~y#0:type_int.myint, ?tmp$0#0:bool) @type_int:13:44
    foreign llvm move(~tmp$0#0:bool, ?$#0:wybe.bool) @type_int:13:12


= > public inline (4 calls)
0: =(?out#0:type_int.myint, in#0:type_int.myint):
    foreign llvm move(~in#0:type_int.myint, ?out#0:type_int.myint)
= > public inline (0 calls)
1: =(in#0:type_int.myint, ?out#0:type_int.myint):
    foreign llvm move(~in#0:type_int.myint, ?out#0:type_int.myint)


== > public inline (0 calls)
0: ==(x#0:type_int.myint, y#0:type_int.myint, ?$#0:wybe.bool):
    foreign llvm icmp eq(~x#0:type_int.myint, ~y#0:type_int.myint, ?tmp$0#0:bool) @type_int:10:44
    foreign llvm move(~tmp$0#0:bool, ?$#0:wybe.bool) @type_int:10:12


> > public inline (0 calls)
0: >(x#0:type_int.myint, y#0:type_int.myint, ?$#0:wybe.bool):
    foreign llvm icmp sgt(~x#0:type_int.myint, ~y#0:type_int.myint, ?tmp$0#0:bool) @type_int:14:43
    foreign llvm move(~tmp$0#0:bool, ?$#0:wybe.bool) @type_int:14:12


>= > public inline (0 calls)
0: >=(x#0:type_int.myint, y#0:type_int.myint, ?$#0:wybe.bool):
    foreign llvm icmp sge(~x#0:type_int.myint, ~y#0:type_int.myint, ?tmp$0#0:bool) @type_int:15:44
    foreign llvm move(~tmp$0#0:bool, ?$#0:wybe.bool) @type_int:15:12
type_int, type_int.myint
======================================================================
AFTER LLVM IR:

; ModuleID = 'type_int'

; Function Attrs: nounwind readnone
define i64 @"type_int.myint.*<0>"(i64 %"x#0", i64 %"y#0") #0 {
entry:
  %"tmp$0#0" = mul i64 %"y#0", %"x#0"
  ret i64 %"tmp$0#0"
}

; Function Attrs: nounwind readnone
define i64 @"type_int.myint.+<0>"(i64 %"x#0", i64 %"y#0") #0 {
entry:
  %"tmp$0#0" = add i64 %"y#0", %"x#0"
  ret i64 %"tmp$0#0"
}

; Function Attrs: nounwind readnone
define i64 @"type_int.myint.+<1>"(i64 %"y#0", i64 %"z#0") #0 {
entry:
  %"tmp$0#0" = sub i64 %"z#0", %"y#0"
  ret i64 %"tmp$0#0"
}

; Function Attrs: nounwind readnone
define i64 @"type_int.myint.+<1>1"(i64 %"x#0", i64 %"z#0") #0 {
entry:
  %"tmp$0#0" = sub i64 %"z#0", %"x#0"
  ret i64 %"tmp$0#0"
}

; Function Attrs: nounwind readnone
define i64 @"type_int.myint.-<0>"(i64 %"x#0", i64 %"y#0") #0 {
entry:
  %"tmp$0#0" = sub i64 %"x#0", %"y#0"
  ret i64 %"tmp$0#0"
}

; Function Attrs: nounwind readnone
define i64 @"type_int.myint.-<1>"(i64 %"y#0", i64 %"z#0") #0 {
entry:
  %"tmp$0#0" = add i64 %"z#0", %"y#0"
  ret i64 %"tmp$0#0"
}

; Function Attrs: nounwind readnone
define i64 @"type_int.myint.-<1>2"(i64 %"x#0", i64 %"z#0") #0 {
entry:
  %"tmp$0#0" = sub i64 %"z#0", %"x#0"
  ret i64 %"tmp$0#0"
}

; Function Attrs: nounwind readnone
define i64 @"type_int.myint./<0>"(i64 %"x#0", i64 %"y#0") #0 {
entry:
  %"tmp$0#0" = sdiv exact i64 %"x#0", %"y#0"
  ret i64 %"tmp$0#0"
}

; Function Attrs: nounwind readnone
define i1 @"type_int.myint./=<0>"(i64 %"x#0", i64 %"y#0") #0 {
entry:
  %"tmp$0#0" = icmp ne i64 %"x#0", %"y#0"
  ret i1 %"tmp$0#0"
}

; Function Attrs: nounwind readnone
define i1 @"type_int.myint.<<0>"(i64 %"x#0", i64 %"y#0") #0 {
entry:
  %"tmp$0#0" = icmp slt i64 %"x#0", %"y#0"
  ret i1 %"tmp$0#0"
}

; Function Attrs: nounwind readnone
define i1 @"type_int.myint.<=<0>"(i64 %"x#0", i64 %"y#0") #0 {
entry:
  %"tmp$0#0" = icmp sle i64 %"x#0", %"y#0"
  ret i1 %"tmp$0#0"
}

; Function Attrs: nounwind readnone
define i64 @"type_int.myint.=<0>"(i64 %"in#0") #0 {
entry:
  ret i64 %"in#0"
}

; Function Attrs: nounwind readnone
define i64 @"type_int.myint.=<1>"(i64 %"in#0") #0 {
entry:
  ret i64 %"in#0"
}

; Function Attrs: nounwind readnone
define i1 @"type_int.myint.==<0>"(i64 %"x#0", i64 %"y#0") #0 {
entry:
  %"tmp$0#0" = icmp eq i64 %"x#0", %"y#0"
  ret i1 %"tmp$0#0"
}

; Function Attrs: nounwind readnone
define i1 @"type_int.myint.><0>"(i64 %"x#0", i64 %"y#0") #0 {
entry:
  %"tmp$0#0" = icmp sgt i64 %"x#0", %"y#0"
  ret i1 %"tmp$0#0"
}

; Function Attrs: nounwind readnone
define i1 @"type_int.myint.>=<0>"(i64 %"x#0", i64 %"y#0") #0 {
entry:
  %"tmp$0#0" = icmp sge i64 %"x#0", %"y#0"
  ret i1 %"tmp$0#0"
}

attributes #0 = { nounwind readnone }

--------------------------------------------------
; ModuleID = 'type_int.myint'

; Function Attrs: nounwind readnone
define i64 @"type_int.myint.*<0>"(i64 %"x#0", i64 %"y#0") #0 {
entry:
  %"tmp$0#0" = mul i64 %"y#0", %"x#0"
  ret i64 %"tmp$0#0"
}

; Function Attrs: nounwind readnone
define i64 @"type_int.myint.+<0>"(i64 %"x#0", i64 %"y#0") #0 {
entry:
  %"tmp$0#0" = add i64 %"y#0", %"x#0"
  ret i64 %"tmp$0#0"
}

; Function Attrs: nounwind readnone
define i64 @"type_int.myint.+<1>"(i64 %"y#0", i64 %"z#0") #0 {
entry:
  %"tmp$0#0" = sub i64 %"z#0", %"y#0"
  ret i64 %"tmp$0#0"
}

; Function Attrs: nounwind readnone
define i64 @"type_int.myint.+<1>1"(i64 %"x#0", i64 %"z#0") #0 {
entry:
  %"tmp$0#0" = sub i64 %"z#0", %"x#0"
  ret i64 %"tmp$0#0"
}

; Function Attrs: nounwind readnone
define i64 @"type_int.myint.-<0>"(i64 %"x#0", i64 %"y#0") #0 {
entry:
  %"tmp$0#0" = sub i64 %"x#0", %"y#0"
  ret i64 %"tmp$0#0"
}

; Function Attrs: nounwind readnone
define i64 @"type_int.myint.-<1>"(i64 %"y#0", i64 %"z#0") #0 {
entry:
  %"tmp$0#0" = add i64 %"z#0", %"y#0"
  ret i64 %"tmp$0#0"
}

; Function Attrs: nounwind readnone
define i64 @"type_int.myint.-<1>2"(i64 %"x#0", i64 %"z#0") #0 {
entry:
  %"tmp$0#0" = sub i64 %"z#0", %"x#0"
  ret i64 %"tmp$0#0"
}

; Function Attrs: nounwind readnone
define i64 @"type_int.myint./<0>"(i64 %"x#0", i64 %"y#0") #0 {
entry:
  %"tmp$0#0" = sdiv exact i64 %"x#0", %"y#0"
  ret i64 %"tmp$0#0"
}

; Function Attrs: nounwind readnone
define i1 @"type_int.myint./=<0>"(i64 %"x#0", i64 %"y#0") #0 {
entry:
  %"tmp$0#0" = icmp ne i64 %"x#0", %"y#0"
  ret i1 %"tmp$0#0"
}

; Function Attrs: nounwind readnone
define i1 @"type_int.myint.<<0>"(i64 %"x#0", i64 %"y#0") #0 {
entry:
  %"tmp$0#0" = icmp slt i64 %"x#0", %"y#0"
  ret i1 %"tmp$0#0"
}

; Function Attrs: nounwind readnone
define i1 @"type_int.myint.<=<0>"(i64 %"x#0", i64 %"y#0") #0 {
entry:
  %"tmp$0#0" = icmp sle i64 %"x#0", %"y#0"
  ret i1 %"tmp$0#0"
}

; Function Attrs: nounwind readnone
define i64 @"type_int.myint.=<0>"(i64 %"in#0") #0 {
entry:
  ret i64 %"in#0"
}

; Function Attrs: nounwind readnone
define i64 @"type_int.myint.=<1>"(i64 %"in#0") #0 {
entry:
  ret i64 %"in#0"
}

; Function Attrs: nounwind readnone
define i1 @"type_int.myint.==<0>"(i64 %"x#0", i64 %"y#0") #0 {
entry:
  %"tmp$0#0" = icmp eq i64 %"x#0", %"y#0"
  ret i1 %"tmp$0#0"
}

; Function Attrs: nounwind readnone
define i1 @"type_int.myint.><0>"(i64 %"x#0", i64 %"y#0") #0 {
entry:
  %"tmp$0#0" = icmp sgt i64 %"x#0", %"y#0"
  ret i1 %"tmp$0#0"
}

; Function Attrs: nounwind readnone
define i1 @"type_int.myint.>=<0>"(i64 %"x#0", i64 %"y#0") #0 {
entry:
  %"tmp$0#0" = icmp sge i64 %"x#0", %"y#0"
  ret i1 %"tmp$0#0"
}

attributes #0 = { nounwind readnone }

