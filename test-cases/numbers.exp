======================================================================
AFTER EVERYTHING:
 Module numbers
  public submods  : 
  public types    : 
  public resources: 
  public procs    : numbers.factorial<0>
                    numbers.toCelsius<0>
  imports         : use wybe
  types           : 
  resources       : 
  procs           : 

factorial > public (1 calls) (inline)
0: factorial(n#0:wybe.int, ?$#0:wybe.int):
    numbers.gen$1<0>(~n#0:wybe.int, ?n#1:wybe.int, ?tmp$0#0:wybe.int) @numbers:4:8
    foreign llvm move(~tmp$0#0:wybe.int, ?$#0:wybe.int)


gen$1 > (1 calls)
0: gen$1(n#0:wybe.int, [?n#0:wybe.int], ?tmp$0#0:wybe.int):
    foreign llvm icmp sle(n#0:wybe.int, 0:wybe.int, ?tmp$7#0:wybe.bool) @wybe:16:40
    case ~tmp$7#0:wybe.bool of
    0:
        foreign llvm sub(n#0:wybe.int, 1:wybe.int, ?tmp$10#0:wybe.int) @wybe:7:38
        numbers.gen$1<0>(~tmp$10#0:wybe.int, ?tmp$12#0:wybe.int, ?tmp$13#0:wybe.int) @numbers:4:8
        foreign llvm mul(n#0:wybe.int, ~tmp$13#0:wybe.int, ?tmp$16#0:wybe.int) @wybe:12:38
        foreign llvm move(~tmp$16#0:wybe.int, ?tmp$0#0:wybe.int)

    1:
        foreign llvm move(1:wybe.int, ?tmp$0#0:wybe.int)



toCelsius > public (0 calls) (inline)
0: toCelsius(f#0:wybe.float, ?$#0:wybe.float):
    foreign llvm fsub(~f#0:wybe.float, 32.0:wybe.float, ?tmp$4#0:wybe.float) @wybe:31:44
    foreign llvm fdiv(~tmp$4#0:wybe.float, 1.8:wybe.float, ?tmp$7#0:wybe.float) @wybe:37:44
    foreign llvm move(~tmp$7#0:wybe.float, ?$#0:wybe.float)
numbers
======================================================================
AFTER LLVM IR:

; ModuleID = 'numbers'

define i32 @numbers.factorial(i32 %"n#0") {
entry:
  %"n#1" = tail call i32 @"numbers.gen$1"(i32 %"n#0")
  ret i32 %"n#1"
}

define i32 @"numbers.gen$1"(i32 %"n#0") {
entry:
  %"tmp$7#0" = icmp sle i32 %"n#0", 0
  br i1 %"tmp$7#0", label %if.then, label %if.else

if.then:                                          ; preds = %entry
  ret i32 1

if.else:                                          ; preds = %entry
  %"tmp$10#0" = sub i32 %"n#0", 1
  %"tmp$12#0" = tail call i32 @"numbers.gen$1"(i32 %"tmp$10#0")
  %"tmp$16#0" = mul i32 %"n#0", %"tmp$12#0"
  ret i32 %"tmp$16#0"
}

define double @numbers.toCelsius(double %"f#0") {
entry:
  %"tmp$4#0" = fsub double %"f#0", 3.200000e+01
  %"tmp$7#0" = fdiv double %"tmp$4#0", 1.800000e+00
  ret double %"tmp$7#0"
}

