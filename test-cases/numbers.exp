======================================================================
AFTER EVERYTHING:
 Module numbers
  public submods  : 
  public types    : 
  public resources: 
  public procs    : numbers.<0>
                    numbers.factorial<0>
                    numbers.toCelsius<0>
  imports         : use wybe
  types           : 
  resources       : 
  procs           : 

*main* > public inline (0 calls)
0: (wybe.io$io#0:wybe.phantom, ?wybe.io$io#1:wybe.phantom):
    foreign c print_string("Numbers has been initialised.":wybe.string, ~#wybe.io$io#0:wybe.phantom, ?tmp$2#0:wybe.phantom) @wybe:116:41
    foreign c putchar('\n':wybe.char, ~tmp$2#0:wybe.phantom, ?#wybe.io$io#1:wybe.phantom) @wybe:102:28


factorial > public (1 calls)
0: factorial(n#0:wybe.int, ?$#0:wybe.int):
    foreign llvm icmp sle(n#0:wybe.int, 0:wybe.int, ?tmp$7#0:bool) @wybe:16:40
    case ~tmp$7#0:bool of
    0:
        foreign llvm sub(n#0:wybe.int, 1:wybe.int, ?tmp$10#0:int) @wybe:7:38
        numbers.factorial<0>(~tmp$10#0:int, ?tmp$3#0:wybe.int) @numbers:4:34
        foreign llvm mul(~n#0:wybe.int, ~tmp$3#0:wybe.int, ?tmp$13#0:int) @wybe:12:38
        foreign llvm move(~tmp$13#0:int, ?$#0:wybe.int) @numbers:3:8

    1:
        foreign llvm move(1:wybe.int, ?$#0:wybe.int) @numbers:3:8



gen$1 > inline (2 calls)
0: gen$1([n#0:wybe.int], tmp$0#0:wybe.int, [tmp$1#0:wybe.bool], ?$#0:wybe.int):
    foreign llvm move(~tmp$0#0:wybe.int, ?$#0:wybe.int) @numbers:3:8


toCelsius > public inline (0 calls)
0: toCelsius(f#0:wybe.float, ?$#0:wybe.float):
    foreign llvm fsub(~f#0:wybe.float, 32.0:wybe.float, ?tmp$4#0:float) @wybe:31:44
    foreign llvm fdiv(~tmp$4#0:float, 1.8:wybe.float, ?tmp$7#0:float) @wybe:37:44
    foreign llvm move(~tmp$7#0:float, ?$#0:wybe.float) @numbers:1:8
numbers
======================================================================
AFTER LLVM IR:

; ModuleID = 'numbers'

@0 = constant [30 x i8] c"Numbers has been initialised.\00"

declare void @putchar(i8)

declare void @print_string(i8*)

declare i8* @wybe_malloc(i32)

define i32 @numbers.main() {
entry:
  tail call void @print_string(i8* getelementptr inbounds ([30 x i8]* @0, i32 0, i32 0))
  tail call void @putchar(i8 10)
  %0 = alloca i32
  store i32 0, i32* %0
  ret i32 0
}

define i64 @"numbers.factorial<0>"(i64 %"n#0") {
entry:
  %"tmp$7#0" = icmp sle i64 %"n#0", 0
  br i1 %"tmp$7#0", label %if.then, label %if.else

if.then:                                          ; preds = %entry
  ret i64 1

if.else:                                          ; preds = %entry
  %"tmp$10#0" = sub i64 %"n#0", 1
  %"tmp$3#0" = tail call i64 @"numbers.factorial<0>"(i64 %"tmp$10#0")
  %"tmp$13#0" = mul i64 %"n#0", %"tmp$3#0"
  ret i64 %"tmp$13#0"
}

define i64 @"numbers.gen$1<0>"(i64 %"tmp$0#0") {
entry:
  ret i64 %"tmp$0#0"
}

define double @"numbers.toCelsius<0>"(double %"f#0") {
entry:
  %"tmp$4#0" = fsub double %"f#0", 3.200000e+01
  %"tmp$7#0" = fdiv double %"tmp$4#0", 1.800000e+00
  ret double %"tmp$7#0"
}

