======================================================================
AFTER EVERYTHING:
 Module bar
  public submods  : 
  public types    : 
  public resources: 
  public procs    : bar.<0>
  imports         : use numbers
                    use wybe
  types           : 
  resources       : 
  procs           : 

*main* > public (0 calls)
0: (io#0:phantom, ?io#2:phantom):
    numbers.factorial<0>(4:wybe.int, ?tmp$0#0:wybe.int) @bar:3:10
    foreign c print_int(~tmp$0#0:wybe.int, ~#io#0:phantom, ?tmp$4#0:phantom) @wybe:nn:nn
    foreign c putchar('\n':wybe.char, ~tmp$4#0:phantom, ?#io#1:phantom) @wybe:nn:nn
    foreign c print_float(35.0:wybe.float, ~#io#1:phantom, ?tmp$9#0:phantom) @wybe:nn:nn
    foreign c putchar('\n':wybe.char, ~tmp$9#0:phantom, ?#io#2:phantom) @wybe:nn:nn

  LLVM code       :

; ModuleID = 'bar'


declare external ccc void @putchar(i8)

declare external ccc void @print_float(double)

declare external ccc void @print_int(i64)

declare external ccc i64 @"numbers.factorial<0>"(i64)

declare external ccc i8* @wybe_malloc(i32)

define external ccc void @"bar.<0>"(){
entry:
  %"tmp$0#0" = tail call ccc i64 @"numbers.factorial<0>"(i64 4)
  tail call ccc void @print_int(i64 %"tmp$0#0")
  tail call ccc void @putchar(i8 10)
  tail call ccc void @print_float(double 3.500000e1)
  tail call ccc void @putchar(i8 10)
  ret void
}
--------------------------------------------------
 Module numbers
  public submods  : 
  public types    : 
  public resources: 
  public procs    : numbers.<0>
                    numbers.factorial<0>
                    numbers.toCelsius<0>
  imports         : use wybe
  types           : 
  resources       : 
  procs           : 

*main* > public inline (0 calls)
0: (io#0:phantom, ?io#1:phantom):
    foreign c print_string("Numbers has been initialised.":wybe.string, ~#io#0:phantom, ?tmp$2#0:phantom) @wybe:nn:nn
    foreign c putchar('\n':wybe.char, ~tmp$2#0:phantom, ?#io#1:phantom) @wybe:nn:nn


factorial > public (1 calls)
0: factorial(n#0:wybe.int, ?$#0:wybe.int):
    foreign llvm icmp sle(n#0:wybe.int, 0:wybe.int, ?tmp$4#0:wybe.bool) @wybe:nn:nn
    case ~tmp$4#0:wybe.bool of
    0:
        foreign llvm sub(n#0:wybe.int, 1:wybe.int, ?tmp$3#0:wybe.int) @wybe:nn:nn
        numbers.factorial<0>(~tmp$3#0:wybe.int, ?tmp$2#0:wybe.int) @numbers:4:34
        foreign llvm mul(~n#0:wybe.int, ~tmp$2#0:wybe.int, ?$#0:wybe.int) @wybe:nn:nn

    1:
        foreign llvm move(1:wybe.int, ?$#0:wybe.int) @numbers:3:8



toCelsius > public inline (0 calls)
0: toCelsius(f#0:wybe.float, ?$#0:wybe.float):
    foreign llvm fsub(~f#0:wybe.float, 32.0:wybe.float, ?tmp$1#0:wybe.float) @wybe:nn:nn
    foreign llvm fdiv(~tmp$1#0:wybe.float, 1.8:wybe.float, ?$#0:wybe.float) @wybe:nn:nn

  LLVM code       :

; ModuleID = 'numbers'


declare external ccc void @putchar(i8)

declare external ccc void @print_string(i8*)

@numbers.1 = constant [30 x i8] c"Numbers has been initialised.\00"

declare external ccc i8* @wybe_malloc(i32)

define external ccc void @"numbers.<0>"(){
entry:
  tail call ccc void @print_string(i8* getelementptr inbounds ([30 x i8], [30 x i8]* @numbers.1, i32 0, i32 0))
  tail call ccc void @putchar(i8 10)
  ret void
}

define external ccc i64 @"numbers.factorial<0>"(i64 %"n#0"){
entry:
  %"tmp$4#0" = icmp sle i64 %"n#0", 0
  br i1 %"tmp$4#0", label %if.then, label %if.else
if.then:
  ret i64 1
if.else:
  %"tmp$3#0" = sub i64 %"n#0", 1
  %"tmp$2#0" = tail call ccc i64 @"numbers.factorial<0>"(i64 %"tmp$3#0")
  %"$#0" = mul i64 %"n#0", %"tmp$2#0"
  ret i64 %"$#0"
}

define external ccc double @"numbers.toCelsius<0>"(double %"f#0"){
entry:
  %"tmp$1#0" = fsub double %"f#0", 3.200000e1
  %"$#0" = fdiv double %"tmp$1#0", 1.800000e0
  ret double %"$#0"
}
