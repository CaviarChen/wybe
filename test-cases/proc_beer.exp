======================================================================
AFTER EVERYTHING:
 Module proc_beer
  public submods  : 
  public types    : 
  public resources: 
  public procs    : proc_beer.beer99<0>
  imports         : use wybe
  types           : 
  resources       : 
  procs           : 

beer99 > public (0 calls) (inline)
0: beer99(wybe.io$io#0:wybe.phantom, ?wybe.io$io#1:wybe.phantom):
    proc_beer.gen$3<0>(99:wybe.int, ~wybe.io$io#0:wybe.phantom, ?count#1:wybe.int, ?wybe.io$io#1:wybe.phantom) @proc_beer:5:9


gen$1 > (0 calls) (inline)
0: gen$1(count#0:wybe.int, tmp$0#0:wybe.bool, wybe.io$io#0:wybe.phantom, [?count#0:wybe.int], [?tmp$0#0:wybe.bool], [?wybe.io$io#0:wybe.phantom]):


gen$2 > (2 calls) (inline)
0: gen$2(count#0:wybe.int, wybe.io$io#0:wybe.phantom, ?count#1:wybe.int, ?tmp$0#0:wybe.bool, ?wybe.io$io#1:wybe.phantom):
    proc_beer.gen$3<0>(~count#0:wybe.int, ~wybe.io$io#0:wybe.phantom, ?count#1:wybe.int, ?wybe.io$io#1:wybe.phantom) @proc_beer:5:9


gen$3 > (1 calls)
0: gen$3(count#0:wybe.int, wybe.io$io#0:wybe.phantom, ?count#1:wybe.int, ?wybe.io$io#1:wybe.phantom):
    foreign llvm icmp sge(count#0:wybe.int, 0:wybe.int, ?tmp$4#0:wybe.bool) @wybe:18:40
    case ~tmp$4#0:wybe.bool of
    0:
        foreign llvm move(~count#0:wybe.int, ?count#1:wybe.int)
        foreign llvm move(~wybe.io$io#0:wybe.phantom, ?wybe.io$io#1:wybe.phantom)

    1:
        foreign c print_int(count#0:wybe.int, ~wybe.io$io#0:wybe.phantom, ?tmp$7#0:wybe.phantom) @wybe:110:38
        foreign c print_string(" bottles of beer on the wall":wybe.string, ~tmp$7#0:wybe.phantom, ?tmp$8#0:wybe.phantom) @wybe:122:41
        foreign c putchar('\n':wybe.char, ~tmp$8#0:wybe.phantom, ?tmp$9#0:wybe.phantom) @wybe:108:28
        foreign llvm sub(~count#0:wybe.int, 1:wybe.int, ?tmp$10#0:wybe.int) @wybe:7:38
        proc_beer.gen$3<0>(~tmp$10#0:wybe.int, ~tmp$9#0:wybe.phantom, ?count#1:wybe.int, ?wybe.io$io#1:wybe.phantom) @proc_beer:5:9



gen$4 > (1 calls) (inline)
0: gen$4(count#0:wybe.int, wybe.io$io#0:wybe.phantom, ?count#2:wybe.int, ?wybe.io$io#3:wybe.phantom):
    foreign c print_int(count#0:wybe.int, ~#wybe.io$io#0:wybe.phantom, ?#wybe.io$io#1:wybe.phantom) @wybe:110:38
    foreign c print_string(" bottles of beer on the wall":wybe.string, ~#wybe.io$io#1:wybe.phantom, ?tmp$6#0:wybe.phantom) @wybe:122:41
    foreign c putchar('\n':wybe.char, ~tmp$6#0:wybe.phantom, ?#wybe.io$io#2:wybe.phantom) @wybe:108:28
    foreign llvm sub(~count#0:wybe.int, 1:wybe.int, ?tmp$9#0:wybe.int) @wybe:7:38
    proc_beer.gen$3<0>(~tmp$9#0:wybe.int, ~wybe.io$io#2:wybe.phantom, ?count#2:wybe.int, ?wybe.io$io#3:wybe.phantom) @proc_beer:5:9
proc_beer
======================================================================
AFTER LLVM IR:

; ModuleID = 'proc_beer'

@0 = constant [29 x i8] c" bottles of beer on the wall\00"

declare void @putchar(i8)

declare void @print_string(i8*)

declare void @print_int(i32)

define void @proc_beer.beer99() {
entry:
  %"count#1" = tail call i32 @"proc_beer.gen$3"(i32 99)
  ret void
}

define i32 @"proc_beer.gen$2"(i32 %"count#0") {
entry:
  %"count#1" = tail call i32 @"proc_beer.gen$3"(i32 %"count#0")
  ret i32 %"count#1"
}

define i32 @"proc_beer.gen$3"(i32 %"count#0") {
entry:
  %"tmp$4#0" = icmp sge i32 %"count#0", 0
  br i1 %"tmp$4#0", label %if.then, label %if.else

if.then:                                          ; preds = %entry
  tail call void @print_int(i32 %"count#0")
  tail call void @print_string(i8* getelementptr inbounds ([29 x i8]* @0, i32 0, i32 0))
  tail call void @putchar(i8 10)
  %"tmp$10#0" = sub i32 %"count#0", 1
  %"count#1" = tail call i32 @"proc_beer.gen$3"(i32 %"tmp$10#0")
  ret i32 %"count#1"

if.else:                                          ; preds = %entry
  ret i32 %"count#0"
}

define i32 @"proc_beer.gen$4"(i32 %"count#0") {
entry:
  tail call void @print_int(i32 %"count#0")
  tail call void @print_string(i8* getelementptr inbounds ([29 x i8]* @0, i32 0, i32 0))
  tail call void @putchar(i8 10)
  %"tmp$9#0" = sub i32 %"count#0", 1
  %"count#2" = tail call i32 @"proc_beer.gen$3"(i32 %"tmp$9#0")
  ret i32 %"count#2"
}

