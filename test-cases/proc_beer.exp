======================================================================
AFTER EVERYTHING:
 Module proc_beer
  public submods  : 
  public types    : 
  public resources: 
  public procs    : proc_beer.<0>
                    proc_beer.beer99<0>
  imports         : use wybe
  types           : 
  resources       : 
  procs           : 

*main* > public inline (0 calls)
0: (io#0:phantom, ?io#1:phantom):
    proc_beer.gen$1<0>(99:wybe.int, ~#io#0:phantom, ?#io#1:phantom) @proc_beer:5:5


beer99 > public inline (1 calls)
0: beer99(io#0:phantom, ?io#1:phantom):
    proc_beer.gen$1<0>(99:wybe.int, ~io#0:phantom, ?io#1:phantom) @proc_beer:5:5


gen$1 > (2 calls)
0: gen$1(count#0:wybe.int, io#0:phantom, ?io#3:phantom):
    foreign llvm icmp sge(count#0:wybe.int, 0:wybe.int, ?tmp$1#0:wybe.bool) @wybe:nn:nn
    case ~tmp$1#0:wybe.bool of
    0:
        foreign llvm move(~io#0:phantom, ?io#3:phantom)

    1:
        foreign c print_int(count#0:wybe.int, ~#io#0:phantom, ?#io#1:phantom) @wybe:nn:nn
        foreign c print_string(" bottles of beer on the wall":wybe.string, ~#io#1:phantom, ?tmp$8#0:phantom) @wybe:nn:nn
        foreign c putchar('\n':wybe.char, ~tmp$8#0:phantom, ?#io#2:phantom) @wybe:nn:nn
        foreign llvm sub(~%count#0:wybe.int, 1:wybe.int, ?%count#1:wybe.int) @wybe:nn:nn
        proc_beer.gen$1<0>(~count#1:wybe.int, ~io#2:phantom, ?io#3:phantom) @proc_beer:5:5



gen$2 > inline (1 calls)
0: gen$2([count#0:wybe.int], io#0:phantom, [?io#0:phantom]):

  LLVM code       :

; ModuleID = 'proc_beer'


declare external ccc void @putchar(i8)

declare external ccc void @print_string(i8*)

declare external ccc void @print_int(i64)

@proc_beer.2 = constant [29 x i8] c" bottles of beer on the wall\00"

declare external ccc i8* @wybe_malloc(i32)

define external ccc i32 @proc_beer.main(){
entry:
  tail call ccc void @"proc_beer.gen$1<0>"(i64 99)
  %1 = alloca i32
  store i32 0, i32* %1
  ret i32 0
}

define external ccc void @"proc_beer.beer99<0>"(){
entry:
  tail call ccc void @"proc_beer.gen$1<0>"(i64 99)
  ret void
}

define external ccc void @"proc_beer.gen$1<0>"(i64 %"count#0"){
entry:
  %"tmp$1#0" = icmp sge i64 %"count#0", 0
  br i1 %"tmp$1#0", label %if.then, label %if.else
if.then:
  tail call ccc void @print_int(i64 %"count#0")
  tail call ccc void @print_string(i8* getelementptr inbounds ([29 x i8], [29 x i8]* @proc_beer.2, i32 0, i32 0))
  tail call ccc void @putchar(i8 10)
  %"count#1" = sub i64 %"count#0", 1
  tail call ccc void @"proc_beer.gen$1<0>"(i64 %"count#1")
  ret void
if.else:
  ret void
}
