======================================================================
AFTER EVERYTHING:
 Module coordinate
  public submods  : 
  public types    : Coordinate: (coordinate.Coordinate,"pointer")
  public resources: 
  public procs    : coordinate.<0>
                    coordinate.fcopy<0>
                    coordinate.Coordinate.=<0>
                    coordinate.Coordinate.Coordinate<0>
                    coordinate.Coordinate.Coordinate<1>
                    coordinate.Coordinate.x<0>
                    coordinate.Coordinate.x<1>
                    coordinate.Coordinate.y<0>
                    coordinate.Coordinate.y<1>
                    coordinate.Coordinate.z<0>
                    coordinate.Coordinate.z<1>
  imports         : public use coordinate.Coordinate
                    use wybe
  types           : Coordinate/0 (pointer)  @coordinate:1:5
  resources       : 
  submodules      : coordinate.Coordinate
  procs           : 

*main* > public (0 calls)
0: (argc#0:wybe.int, [?argc#0:wybe.int], argv#0:wybe.int, [?argv#0:wybe.int], exit_code#0:wybe.int, [?exit_code#0:wybe.int], io#0:phantom, ?io#4:phantom): AliasPairs: []
    foreign lpvm alloc(24:wybe.int, ?tmp$7#0:coordinate.Coordinate)
    foreign lpvm mutate(~tmp$7#0:coordinate.Coordinate, ?tmp$8#0:coordinate.Coordinate, 0:wybe.int, 1:wybe.int, 24:wybe.int, 0:wybe.int, 1000:wybe.int)
    foreign lpvm mutate(~tmp$8#0:coordinate.Coordinate, ?tmp$9#0:coordinate.Coordinate, 8:wybe.int, 1:wybe.int, 24:wybe.int, 0:wybe.int, 1000:wybe.int)
    foreign lpvm mutate(~tmp$9#0:coordinate.Coordinate, ?tmp$10#0:coordinate.Coordinate, 16:wybe.int, 1:wybe.int, 24:wybe.int, 0:wybe.int, 1000:wybe.int)
    foreign lpvm mutate noalias(tmp$10#0:coordinate.Coordinate, ?%crd1#1:coordinate.Coordinate, 16:wybe.int, 0:wybe.int, 24:wybe.int, 0:wybe.int, 8000:wybe.int)
    foreign c print_string("expect crd1.z=8000: ":wybe.string, ~#io#0:phantom, ?#io#1:phantom) @wybe:nn:nn
    foreign lpvm access(~crd1#1:coordinate.Coordinate, 16:wybe.int, ?tmp$2#0:wybe.int)
    foreign c print_int(~tmp$2#0:wybe.int, ~#io#1:phantom, ?tmp$19#0:phantom) @wybe:nn:nn
    foreign c putchar('\n':wybe.char, ~tmp$19#0:phantom, ?#io#2:phantom) @wybe:nn:nn
    foreign c print_string("expect crd2.z=1000: ":wybe.string, ~#io#2:phantom, ?#io#3:phantom) @wybe:nn:nn
    foreign lpvm access(~tmp$10#0:coordinate.Coordinate, 16:wybe.int, ?tmp$3#0:wybe.int)
    foreign c print_int(~tmp$3#0:wybe.int, ~#io#3:phantom, ?tmp$25#0:phantom) @wybe:nn:nn
    foreign c putchar('\n':wybe.char, ~tmp$25#0:phantom, ?#io#4:phantom) @wybe:nn:nn


fcopy > public inline (1 calls)
0: fcopy(crd1#0:coordinate.Coordinate, ?$#0:coordinate.Coordinate): AliasPairs: []
    foreign llvm move(~crd1#0:coordinate.Coordinate, ?$#0:coordinate.Coordinate) @coordinate:6:5

  LLVM code       :

; ModuleID = 'coordinate'


 


declare external ccc  void @putchar(i8)    


declare external ccc  void @print_int(i64)    


declare external ccc  void @print_string(i64)    


@coordinate.27 =    constant [21 x i8] c"expect crd2.z=1000: \00"


@coordinate.21 =    constant [21 x i8] c"expect crd1.z=8000: \00"


declare external ccc  i8* @wybe_malloc(i32)    


declare external ccc  void @llvm.memcpy.p0i8.p0i8.i32(i8*, i8*, i32, i32, i1)    


define external ccc  void @"coordinate.<0>"(i64  %"argc#0", i64  %"argv#0", i64  %"exit_code#0")    {
entry:
  %1 = trunc i64 24 to i32  
  %2 = tail call ccc  i8*  @wybe_malloc(i32  %1)  
  %3 = ptrtoint i8* %2 to i64 
  %4 = inttoptr i64 %3 to i64* 
  %5 = getelementptr  i64, i64* %4, i64 0 
  store  i64 1000, i64* %5 
  %6 = add   i64 %3, 8 
  %7 = inttoptr i64 %6 to i64* 
  %8 = getelementptr  i64, i64* %7, i64 0 
  store  i64 1000, i64* %8 
  %9 = add   i64 %3, 16 
  %10 = inttoptr i64 %9 to i64* 
  %11 = getelementptr  i64, i64* %10, i64 0 
  store  i64 1000, i64* %11 
  %12 = trunc i64 24 to i32  
  %13 = tail call ccc  i8*  @wybe_malloc(i32  %12)  
  %14 = ptrtoint i8* %13 to i64 
  %15 = inttoptr i64 %14 to i8* 
  %16 = inttoptr i64 %3 to i8* 
  %17 = trunc i64 24 to i32  
  tail call ccc  void  @llvm.memcpy.p0i8.p0i8.i32(i8*  %15, i8*  %16, i32  %17, i32  8, i1  0)  
  %18 = add   i64 %14, 16 
  %19 = inttoptr i64 %18 to i64* 
  %20 = getelementptr  i64, i64* %19, i64 0 
  store  i64 8000, i64* %20 
  %22 = ptrtoint i8* getelementptr inbounds ([21 x i8], [21 x i8]* @coordinate.21, i32 0, i32 0) to i64 
  tail call ccc  void  @print_string(i64  %22)  
  %23 = add   i64 %14, 16 
  %24 = inttoptr i64 %23 to i64* 
  %25 = getelementptr  i64, i64* %24, i64 0 
  %26 = load  i64, i64* %25 
  tail call ccc  void  @print_int(i64  %26)  
  tail call ccc  void  @putchar(i8  10)  
  %28 = ptrtoint i8* getelementptr inbounds ([21 x i8], [21 x i8]* @coordinate.27, i32 0, i32 0) to i64 
  tail call ccc  void  @print_string(i64  %28)  
  %29 = add   i64 %14, 16 
  %30 = inttoptr i64 %29 to i64* 
  %31 = getelementptr  i64, i64* %30, i64 0 
  %32 = load  i64, i64* %31 
  tail call ccc  void  @print_int(i64  %32)  
  tail call ccc  void  @putchar(i8  10)  
  ret void 
}


define external ccc  i64 @"coordinate.fcopy<0>"(i64  %"crd1#0")    {
entry:
  ret i64 %"crd1#0" 
}
--------------------------------------------------
 Module coordinate.Coordinate([])
  public submods  : 
  public types    : 
  public resources: 
  public procs    : coordinate.Coordinate.=<0>
                    coordinate.Coordinate.Coordinate<0>
                    coordinate.Coordinate.Coordinate<1>
                    coordinate.Coordinate.x<0>
                    coordinate.Coordinate.x<1>
                    coordinate.Coordinate.y<0>
                    coordinate.Coordinate.y<1>
                    coordinate.Coordinate.z<0>
                    coordinate.Coordinate.z<1>
  imports         : use coordinate
                    use wybe
  types           : 
  resources       : 
  procs           : 

= > public inline test (6 calls)
0: =($left#0:coordinate.Coordinate, $right#0:coordinate.Coordinate, ?$$#0:wybe.bool): AliasPairs: []
    foreign lpvm access($left#0:coordinate.Coordinate, 0:wybe.int, ?$left$x#0:wybe.int)
    foreign lpvm access($left#0:coordinate.Coordinate, 8:wybe.int, ?$left$y#0:wybe.int)
    foreign lpvm access(~$left#0:coordinate.Coordinate, 16:wybe.int, ?$left$z#0:wybe.int)
    foreign lpvm access($right#0:coordinate.Coordinate, 0:wybe.int, ?$right$x#0:wybe.int)
    foreign lpvm access($right#0:coordinate.Coordinate, 8:wybe.int, ?$right$y#0:wybe.int)
    foreign lpvm access(~$right#0:coordinate.Coordinate, 16:wybe.int, ?$right$z#0:wybe.int)
    foreign llvm icmp eq(~$left$x#0:wybe.int, ~$right$x#0:wybe.int, ?tmp$2#0:wybe.bool) @wybe:nn:nn
    case ~tmp$2#0:wybe.bool of
    0:
        foreign llvm move(0:wybe.bool, ?$$#0:wybe.bool)

    1:
        foreign llvm icmp eq(~$left$y#0:wybe.int, ~$right$y#0:wybe.int, ?tmp$3#0:wybe.bool) @wybe:nn:nn
        case ~tmp$3#0:wybe.bool of
        0:
            foreign llvm move(0:wybe.bool, ?$$#0:wybe.bool)

        1:
            foreign llvm icmp eq(~$left$z#0:wybe.int, ~$right$z#0:wybe.int, ?$$#0:wybe.bool) @wybe:nn:nn




Coordinate > public inline (0 calls)
0: Coordinate(x#0:wybe.int, y#0:wybe.int, z#0:wybe.int, ?$#0:coordinate.Coordinate): AliasPairs: []
    foreign lpvm alloc(24:wybe.int, ?$rec#0:coordinate.Coordinate)
    foreign lpvm mutate(~%$rec#0:coordinate.Coordinate, ?%$rec#1:coordinate.Coordinate, 0:wybe.int, 1:wybe.int, 24:wybe.int, 0:wybe.int, ~x#0:wybe.int)
    foreign lpvm mutate(~%$rec#1:coordinate.Coordinate, ?%$rec#2:coordinate.Coordinate, 8:wybe.int, 1:wybe.int, 24:wybe.int, 0:wybe.int, ~y#0:wybe.int)
    foreign lpvm mutate(~%$rec#2:coordinate.Coordinate, ?%$#0:coordinate.Coordinate, 16:wybe.int, 1:wybe.int, 24:wybe.int, 0:wybe.int, ~z#0:wybe.int)
Coordinate > public inline (6 calls)
1: Coordinate(?x#0:wybe.int, ?y#0:wybe.int, ?z#0:wybe.int, $#0:coordinate.Coordinate): AliasPairs: []
    foreign lpvm access($#0:coordinate.Coordinate, 0:wybe.int, ?x#0:wybe.int)
    foreign lpvm access($#0:coordinate.Coordinate, 8:wybe.int, ?y#0:wybe.int)
    foreign lpvm access(~$#0:coordinate.Coordinate, 16:wybe.int, ?z#0:wybe.int)


x > public inline (0 calls)
0: x($rec#0:coordinate.Coordinate, ?$#0:wybe.int): AliasPairs: []
    foreign lpvm access(~$rec#0:coordinate.Coordinate, 0:wybe.int, ?$#0:wybe.int)
x > public inline (0 calls)
1: x($rec#0:coordinate.Coordinate, ?$rec#1:coordinate.Coordinate, $field#0:wybe.int): AliasPairs: []
    foreign lpvm mutate noalias(~%$rec#0:coordinate.Coordinate, ?%$rec#1:coordinate.Coordinate, 0:wybe.int, 0:wybe.int, 24:wybe.int, 0:wybe.int, ~$field#0:wybe.int)


y > public inline (0 calls)
0: y($rec#0:coordinate.Coordinate, ?$#0:wybe.int): AliasPairs: []
    foreign lpvm access(~$rec#0:coordinate.Coordinate, 8:wybe.int, ?$#0:wybe.int)
y > public inline (0 calls)
1: y($rec#0:coordinate.Coordinate, ?$rec#1:coordinate.Coordinate, $field#0:wybe.int): AliasPairs: []
    foreign lpvm mutate noalias(~%$rec#0:coordinate.Coordinate, ?%$rec#1:coordinate.Coordinate, 8:wybe.int, 0:wybe.int, 24:wybe.int, 0:wybe.int, ~$field#0:wybe.int)


z > public inline (0 calls)
0: z($rec#0:coordinate.Coordinate, ?$#0:wybe.int): AliasPairs: []
    foreign lpvm access(~$rec#0:coordinate.Coordinate, 16:wybe.int, ?$#0:wybe.int)
z > public inline (0 calls)
1: z($rec#0:coordinate.Coordinate, ?$rec#1:coordinate.Coordinate, $field#0:wybe.int): AliasPairs: []
    foreign lpvm mutate noalias(~%$rec#0:coordinate.Coordinate, ?%$rec#1:coordinate.Coordinate, 16:wybe.int, 0:wybe.int, 24:wybe.int, 0:wybe.int, ~$field#0:wybe.int)

  LLVM code       :

; ModuleID = 'coordinate.Coordinate'


 


declare external ccc  i8* @wybe_malloc(i32)    


declare external ccc  void @llvm.memcpy.p0i8.p0i8.i32(i8*, i8*, i32, i32, i1)    


define external ccc  i1 @"coordinate.Coordinate.=<0>"(i64  %"$left#0", i64  %"$right#0")    {
entry:
  %1 = inttoptr i64 %"$left#0" to i64* 
  %2 = getelementptr  i64, i64* %1, i64 0 
  %3 = load  i64, i64* %2 
  %4 = add   i64 %"$left#0", 8 
  %5 = inttoptr i64 %4 to i64* 
  %6 = getelementptr  i64, i64* %5, i64 0 
  %7 = load  i64, i64* %6 
  %8 = add   i64 %"$left#0", 16 
  %9 = inttoptr i64 %8 to i64* 
  %10 = getelementptr  i64, i64* %9, i64 0 
  %11 = load  i64, i64* %10 
  %12 = inttoptr i64 %"$right#0" to i64* 
  %13 = getelementptr  i64, i64* %12, i64 0 
  %14 = load  i64, i64* %13 
  %15 = add   i64 %"$right#0", 8 
  %16 = inttoptr i64 %15 to i64* 
  %17 = getelementptr  i64, i64* %16, i64 0 
  %18 = load  i64, i64* %17 
  %19 = add   i64 %"$right#0", 16 
  %20 = inttoptr i64 %19 to i64* 
  %21 = getelementptr  i64, i64* %20, i64 0 
  %22 = load  i64, i64* %21 
  %"tmp$2#0" = icmp eq i64 %3, %14 
  br i1 %"tmp$2#0", label %if.then, label %if.else 
if.then:
  %"tmp$3#0" = icmp eq i64 %7, %18 
  br i1 %"tmp$3#0", label %if.then1, label %if.else1 
if.else:
  ret i1 0 
if.then1:
  %"$$#0" = icmp eq i64 %11, %22 
  ret i1 %"$$#0" 
if.else1:
  ret i1 %"tmp$3#0" 
}


define external ccc  i64 @"coordinate.Coordinate.Coordinate<0>"(i64  %"x#0", i64  %"y#0", i64  %"z#0")    {
entry:
  %23 = trunc i64 24 to i32  
  %24 = tail call ccc  i8*  @wybe_malloc(i32  %23)  
  %25 = ptrtoint i8* %24 to i64 
  %26 = inttoptr i64 %25 to i64* 
  %27 = getelementptr  i64, i64* %26, i64 0 
  store  i64 %"x#0", i64* %27 
  %28 = add   i64 %25, 8 
  %29 = inttoptr i64 %28 to i64* 
  %30 = getelementptr  i64, i64* %29, i64 0 
  store  i64 %"y#0", i64* %30 
  %31 = add   i64 %25, 16 
  %32 = inttoptr i64 %31 to i64* 
  %33 = getelementptr  i64, i64* %32, i64 0 
  store  i64 %"z#0", i64* %33 
  ret i64 %25 
}


define external ccc  {i64, i64, i64} @"coordinate.Coordinate.Coordinate<1>"(i64  %"$#0")    {
entry:
  %34 = inttoptr i64 %"$#0" to i64* 
  %35 = getelementptr  i64, i64* %34, i64 0 
  %36 = load  i64, i64* %35 
  %37 = add   i64 %"$#0", 8 
  %38 = inttoptr i64 %37 to i64* 
  %39 = getelementptr  i64, i64* %38, i64 0 
  %40 = load  i64, i64* %39 
  %41 = add   i64 %"$#0", 16 
  %42 = inttoptr i64 %41 to i64* 
  %43 = getelementptr  i64, i64* %42, i64 0 
  %44 = load  i64, i64* %43 
  %45 = insertvalue {i64, i64, i64} undef, i64 %36, 0 
  %46 = insertvalue {i64, i64, i64} %45, i64 %40, 1 
  %47 = insertvalue {i64, i64, i64} %46, i64 %44, 2 
  ret {i64, i64, i64} %47 
}


define external ccc  i64 @"coordinate.Coordinate.x<0>"(i64  %"$rec#0")    {
entry:
  %48 = inttoptr i64 %"$rec#0" to i64* 
  %49 = getelementptr  i64, i64* %48, i64 0 
  %50 = load  i64, i64* %49 
  ret i64 %50 
}


define external ccc  i64 @"coordinate.Coordinate.x<1>"(i64  %"$rec#0", i64  %"$field#0")    {
entry:
  %51 = trunc i64 24 to i32  
  %52 = tail call ccc  i8*  @wybe_malloc(i32  %51)  
  %53 = ptrtoint i8* %52 to i64 
  %54 = inttoptr i64 %53 to i8* 
  %55 = inttoptr i64 %"$rec#0" to i8* 
  %56 = trunc i64 24 to i32  
  tail call ccc  void  @llvm.memcpy.p0i8.p0i8.i32(i8*  %54, i8*  %55, i32  %56, i32  8, i1  0)  
  %57 = inttoptr i64 %53 to i64* 
  %58 = getelementptr  i64, i64* %57, i64 0 
  store  i64 %"$field#0", i64* %58 
  ret i64 %53 
}


define external ccc  i64 @"coordinate.Coordinate.y<0>"(i64  %"$rec#0")    {
entry:
  %59 = add   i64 %"$rec#0", 8 
  %60 = inttoptr i64 %59 to i64* 
  %61 = getelementptr  i64, i64* %60, i64 0 
  %62 = load  i64, i64* %61 
  ret i64 %62 
}


define external ccc  i64 @"coordinate.Coordinate.y<1>"(i64  %"$rec#0", i64  %"$field#0")    {
entry:
  %63 = trunc i64 24 to i32  
  %64 = tail call ccc  i8*  @wybe_malloc(i32  %63)  
  %65 = ptrtoint i8* %64 to i64 
  %66 = inttoptr i64 %65 to i8* 
  %67 = inttoptr i64 %"$rec#0" to i8* 
  %68 = trunc i64 24 to i32  
  tail call ccc  void  @llvm.memcpy.p0i8.p0i8.i32(i8*  %66, i8*  %67, i32  %68, i32  8, i1  0)  
  %69 = add   i64 %65, 8 
  %70 = inttoptr i64 %69 to i64* 
  %71 = getelementptr  i64, i64* %70, i64 0 
  store  i64 %"$field#0", i64* %71 
  ret i64 %65 
}


define external ccc  i64 @"coordinate.Coordinate.z<0>"(i64  %"$rec#0")    {
entry:
  %72 = add   i64 %"$rec#0", 16 
  %73 = inttoptr i64 %72 to i64* 
  %74 = getelementptr  i64, i64* %73, i64 0 
  %75 = load  i64, i64* %74 
  ret i64 %75 
}


define external ccc  i64 @"coordinate.Coordinate.z<1>"(i64  %"$rec#0", i64  %"$field#0")    {
entry:
  %76 = trunc i64 24 to i32  
  %77 = tail call ccc  i8*  @wybe_malloc(i32  %76)  
  %78 = ptrtoint i8* %77 to i64 
  %79 = inttoptr i64 %78 to i8* 
  %80 = inttoptr i64 %"$rec#0" to i8* 
  %81 = trunc i64 24 to i32  
  tail call ccc  void  @llvm.memcpy.p0i8.p0i8.i32(i8*  %79, i8*  %80, i32  %81, i32  8, i1  0)  
  %82 = add   i64 %78, 16 
  %83 = inttoptr i64 %82 to i64* 
  %84 = getelementptr  i64, i64* %83, i64 0 
  store  i64 %"$field#0", i64* %84 
  ret i64 %78 
}
