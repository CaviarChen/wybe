======================================================================
AFTER EVERYTHING:
 Module coordinate
  public submods  : 
  public types    : Coordinate: (coordinate.Coordinate,"pointer")
  public resources: 
  public procs    : coordinate.<0>
                    coordinate.fcopy<0>
                    coordinate.Coordinate.=<0>
                    coordinate.Coordinate.=<1>
                    coordinate.Coordinate.=<2>
                    coordinate.Coordinate.Coordinate<0>
                    coordinate.Coordinate.Coordinate<1>
                    coordinate.Coordinate.x<0>
                    coordinate.Coordinate.x<1>
                    coordinate.Coordinate.y<0>
                    coordinate.Coordinate.y<1>
                    coordinate.Coordinate.z<0>
                    coordinate.Coordinate.z<1>
  imports         : public use coordinate.Coordinate
                    use wybe
  types           : Coordinate/0 (pointer)  @coordinate:1:8
  resources       : 
  procs           : 

*main* > public (0 calls)
0: (wybe.io$io#0:wybe.phantom, ?wybe.io$io#4:wybe.phantom): AliasPairs: []
    foreign lpvm alloc(24:wybe.int, ?tmp$7#0:coordinate.Coordinate)
    foreign lpvm mutate(~tmp$7#0:coordinate.Coordinate, ?tmp$8#0:coordinate.Coordinate, 24:wybe.int, 0:wybe.int, 1:wybe.int, 1000:wybe.int)
    foreign lpvm mutate(~tmp$8#0:coordinate.Coordinate, ?tmp$9#0:coordinate.Coordinate, 24:wybe.int, 8:wybe.int, 1:wybe.int, 1000:wybe.int)
    foreign lpvm mutate(~tmp$9#0:coordinate.Coordinate, ?tmp$10#0:coordinate.Coordinate, 24:wybe.int, 16:wybe.int, 1:wybe.int, 1000:wybe.int)
    foreign lpvm mutate(tmp$10#0:coordinate.Coordinate, ?%crd1#1:coordinate.Coordinate, 24:wybe.int, 16:wybe.int, 0:wybe.int, 8000:wybe.int)
    foreign c print_string("expect crd1.z=8000: ":wybe.string, ~#wybe.io$io#0:wybe.phantom, ?#wybe.io$io#1:wybe.phantom) @wybe:92:41
    foreign lpvm access(~crd1#1:coordinate.Coordinate, 16:wybe.int, ?tmp$2#0:wybe.int)
    foreign c print_int(~tmp$2#0:wybe.int, ~#wybe.io$io#1:wybe.phantom, ?tmp$23#0:wybe.phantom) @wybe:80:38
    foreign c putchar('\n':wybe.char, ~tmp$23#0:wybe.phantom, ?#wybe.io$io#2:wybe.phantom) @wybe:78:28
    foreign c print_string("expect crd2.z=1000: ":wybe.string, ~#wybe.io$io#2:wybe.phantom, ?#wybe.io$io#3:wybe.phantom) @wybe:92:41
    foreign lpvm access(~tmp$10#0:coordinate.Coordinate, 16:wybe.int, ?tmp$3#0:wybe.int)
    foreign c print_int(~tmp$3#0:wybe.int, ~#wybe.io$io#3:wybe.phantom, ?tmp$29#0:wybe.phantom) @wybe:80:38
    foreign c putchar('\n':wybe.char, ~tmp$29#0:wybe.phantom, ?#wybe.io$io#4:wybe.phantom) @wybe:78:28


fcopy > public inline (1 calls)
0: fcopy(crd1#0:coordinate.Coordinate, ?$#0:coordinate.Coordinate): AliasPairs: []
    foreign llvm move(~crd1#0:coordinate.Coordinate, ?$#0:coordinate.Coordinate) @coordinate:6:8
  submodules      : coordinate.Coordinate
--------------------------------------------------
 Module coordinate.Coordinate([])
  public submods  : 
  public types    : 
  public resources: 
  public procs    : coordinate.Coordinate.=<0>
                    coordinate.Coordinate.=<1>
                    coordinate.Coordinate.=<2>
                    coordinate.Coordinate.Coordinate<0>
                    coordinate.Coordinate.Coordinate<1>
                    coordinate.Coordinate.x<0>
                    coordinate.Coordinate.x<1>
                    coordinate.Coordinate.y<0>
                    coordinate.Coordinate.y<1>
                    coordinate.Coordinate.z<0>
                    coordinate.Coordinate.z<1>
  imports         : use coordinate
                    use wybe
  types           : 
  resources       : 
  procs           : 

= > public inline (0 calls)
0: =(?out#0:coordinate.Coordinate, in#0:coordinate.Coordinate): AliasPairs: []
    foreign llvm move(~in#0:coordinate.Coordinate, ?out#0:coordinate.Coordinate)
= > public inline (0 calls)
1: =(in#0:coordinate.Coordinate, ?out#0:coordinate.Coordinate): AliasPairs: []
    foreign llvm move(~in#0:coordinate.Coordinate, ?out#0:coordinate.Coordinate)
= > public inline test (6 calls)
2: =($left#0:coordinate.Coordinate, $right#0:coordinate.Coordinate, ?$$#0:wybe.bool): AliasPairs: []
    foreign lpvm access($left#0:coordinate.Coordinate, 0:wybe.int, ?$left$x#0:wybe.int)
    foreign lpvm access($left#0:coordinate.Coordinate, 8:wybe.int, ?$left$y#0:wybe.int)
    foreign lpvm access(~$left#0:coordinate.Coordinate, 16:wybe.int, ?$left$z#0:wybe.int)
    foreign lpvm access($right#0:coordinate.Coordinate, 0:wybe.int, ?$right$x#0:wybe.int)
    foreign lpvm access($right#0:coordinate.Coordinate, 8:wybe.int, ?$right$y#0:wybe.int)
    foreign lpvm access(~$right#0:coordinate.Coordinate, 16:wybe.int, ?$right$z#0:wybe.int)
    foreign llvm icmp eq(~$left$x#0:wybe.int, ~$right$x#0:wybe.int, ?tmp$2#0:wybe.bool) @wybe:28:40
    case ~tmp$2#0:wybe.bool of
    0:
        foreign llvm move(0:wybe.bool, ?$$#0:wybe.bool)

    1:
        foreign llvm icmp eq(~$left$y#0:wybe.int, ~$right$y#0:wybe.int, ?tmp$3#0:wybe.bool) @wybe:28:40
        case ~tmp$3#0:wybe.bool of
        0:
            foreign llvm move(0:wybe.bool, ?$$#0:wybe.bool)

        1:
            foreign llvm icmp eq(~$left$z#0:wybe.int, ~$right$z#0:wybe.int, ?$$#0:wybe.bool) @wybe:28:40




Coordinate > public inline (0 calls)
0: Coordinate(x#0:wybe.int, y#0:wybe.int, z#0:wybe.int, ?$#0:coordinate.Coordinate): AliasPairs: []
    foreign lpvm alloc(24:wybe.int, ?$rec#0:coordinate.Coordinate)
    foreign lpvm mutate(~%$rec#0:coordinate.Coordinate, ?%$rec#1:coordinate.Coordinate, 24:wybe.int, 0:wybe.int, 1:wybe.int, ~x#0:wybe.int)
    foreign lpvm mutate(~%$rec#1:coordinate.Coordinate, ?%$rec#2:coordinate.Coordinate, 24:wybe.int, 8:wybe.int, 1:wybe.int, ~y#0:wybe.int)
    foreign lpvm mutate(~%$rec#2:coordinate.Coordinate, ?%$#0:coordinate.Coordinate, 24:wybe.int, 16:wybe.int, 1:wybe.int, ~z#0:wybe.int)
Coordinate > public inline (6 calls)
1: Coordinate(?x#0:wybe.int, ?y#0:wybe.int, ?z#0:wybe.int, $#0:coordinate.Coordinate): AliasPairs: []
    foreign lpvm access($#0:coordinate.Coordinate, 0:wybe.int, ?x#0:wybe.int)
    foreign lpvm access($#0:coordinate.Coordinate, 8:wybe.int, ?y#0:wybe.int)
    foreign lpvm access(~$#0:coordinate.Coordinate, 16:wybe.int, ?z#0:wybe.int)


x > public inline (0 calls)
0: x($rec#0:coordinate.Coordinate, ?$#0:wybe.int): AliasPairs: []
    foreign lpvm access(~$rec#0:coordinate.Coordinate, 0:wybe.int, ?$#0:wybe.int)
x > public inline (0 calls)
1: x($rec#0:coordinate.Coordinate, ?$rec#1:coordinate.Coordinate, $field#0:wybe.int): AliasPairs: []
    foreign lpvm mutate(~%$rec#0:coordinate.Coordinate, ?%$rec#1:coordinate.Coordinate, 24:wybe.int, 0:wybe.int, 0:wybe.int, ~$field#0:wybe.int)


y > public inline (0 calls)
0: y($rec#0:coordinate.Coordinate, ?$#0:wybe.int): AliasPairs: []
    foreign lpvm access(~$rec#0:coordinate.Coordinate, 8:wybe.int, ?$#0:wybe.int)
y > public inline (0 calls)
1: y($rec#0:coordinate.Coordinate, ?$rec#1:coordinate.Coordinate, $field#0:wybe.int): AliasPairs: []
    foreign lpvm mutate(~%$rec#0:coordinate.Coordinate, ?%$rec#1:coordinate.Coordinate, 24:wybe.int, 8:wybe.int, 0:wybe.int, ~$field#0:wybe.int)


z > public inline (0 calls)
0: z($rec#0:coordinate.Coordinate, ?$#0:wybe.int): AliasPairs: []
    foreign lpvm access(~$rec#0:coordinate.Coordinate, 16:wybe.int, ?$#0:wybe.int)
z > public inline (0 calls)
1: z($rec#0:coordinate.Coordinate, ?$rec#1:coordinate.Coordinate, $field#0:wybe.int): AliasPairs: []
    foreign lpvm mutate(~%$rec#0:coordinate.Coordinate, ?%$rec#1:coordinate.Coordinate, 24:wybe.int, 16:wybe.int, 0:wybe.int, ~$field#0:wybe.int)
coordinate, coordinate.Coordinate
======================================================================
AFTER LLVM IR:

; ModuleID = 'coordinate'
source_filename = "test-cases/coordinate.wybe"

@coordinate.19 = constant [21 x i8] c"expect crd2.z=1000: \00"
@coordinate.15 = constant [21 x i8] c"expect crd1.z=8000: \00"

declare void @putchar(i8) local_unnamed_addr

declare void @print_int(i64) local_unnamed_addr

declare void @print_string(i8*) local_unnamed_addr

declare i8* @wybe_malloc(i32) local_unnamed_addr

declare void @llvm.memcpy.p0i8.p0i8.i32(i8*, i8*, i32, i1)

define i32 @coordinate.main() local_unnamed_addr {
entry:
  %0 = tail call i8* @wybe_malloc(i32 24)
  %1 = bitcast i8* %0 to i64*
  store i64 1000, i64* %1, align 4
  %2 = getelementptr i8, i8* %0, i64 8
  %3 = bitcast i8* %2 to i64*
  store i64 1000, i64* %3, align 4
  %4 = getelementptr i8, i8* %0, i64 16
  %5 = bitcast i8* %4 to i64*
  store i64 1000, i64* %5, align 4
  %6 = tail call i8* @wybe_malloc(i32 24)
  tail call void @llvm.memcpy.p0i8.p0i8.i32(i8* %6, i8* %0, i32 24, i1 false)
  %7 = getelementptr i8, i8* %6, i64 16
  %8 = bitcast i8* %7 to i64*
  store i64 8000, i64* %8, align 4
  tail call void @print_string(i8* getelementptr inbounds ([21 x i8], [21 x i8]* @coordinate.15, i64 0, i64 0))
  %9 = load i64, i64* %8, align 4
  tail call void @print_int(i64 %9)
  tail call void @putchar(i8 10)
  tail call void @print_string(i8* getelementptr inbounds ([21 x i8], [21 x i8]* @coordinate.19, i64 0, i64 0))
  %10 = load i64, i64* %5, align 4
  tail call void @print_int(i64 %10)
  tail call void @putchar(i8 10)
  ret i32 0
}

; Function Attrs: norecurse nounwind readnone
define i64* @"coordinate.fcopy<0>"(i64* readnone returned %"crd1#0") local_unnamed_addr #0 {
entry:
  ret i64* %"crd1#0"
}

; Function Attrs: norecurse nounwind readnone
define i64* @"coordinate.Coordinate.=<0>"(i64* readnone returned %"in#0") local_unnamed_addr #0 {
entry:
  ret i64* %"in#0"
}

; Function Attrs: norecurse nounwind readnone
define i64* @"coordinate.Coordinate.=<1>"(i64* readnone returned %"in#0") local_unnamed_addr #0 {
entry:
  ret i64* %"in#0"
}

; Function Attrs: norecurse nounwind readonly
define i1 @"coordinate.Coordinate.=<2>"(i64* nocapture readonly, i64* nocapture readonly) local_unnamed_addr #1 {
entry:
  %2 = load i64, i64* %0, align 4
  %3 = getelementptr i64, i64* %0, i64 2
  %4 = load i64, i64* %3, align 4
  %5 = load i64, i64* %1, align 4
  %6 = getelementptr i64, i64* %1, i64 2
  %7 = load i64, i64* %6, align 4
  %"tmp$2#0" = icmp eq i64 %2, %5
  br i1 %"tmp$2#0", label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %8 = getelementptr i64, i64* %1, i64 1
  %9 = load i64, i64* %8, align 4
  %10 = getelementptr i64, i64* %0, i64 1
  %11 = load i64, i64* %10, align 4
  %"tmp$3#0" = icmp eq i64 %11, %9
  br i1 %"tmp$3#0", label %if.then1, label %if.else

if.else:                                          ; preds = %if.then, %entry
  ret i1 false

if.then1:                                         ; preds = %if.then
  %"$$#0" = icmp eq i64 %4, %7
  ret i1 %"$$#0"
}

define i64* @"coordinate.Coordinate.Coordinate<0>"(i64 %"x#0", i64 %"y#0", i64 %"z#0") local_unnamed_addr {
entry:
  %0 = tail call i8* @wybe_malloc(i32 24)
  %1 = bitcast i8* %0 to i64*
  store i64 %"x#0", i64* %1, align 4
  %2 = getelementptr i8, i8* %0, i64 8
  %3 = bitcast i8* %2 to i64*
  store i64 %"y#0", i64* %3, align 4
  %4 = getelementptr i8, i8* %0, i64 16
  %5 = bitcast i8* %4 to i64*
  store i64 %"z#0", i64* %5, align 4
  ret i64* %1
}

; Function Attrs: norecurse nounwind readonly
define { i64, i64, i64 } @"coordinate.Coordinate.Coordinate<1>"(i64* nocapture readonly) local_unnamed_addr #1 {
entry:
  %1 = load i64, i64* %0, align 4
  %2 = getelementptr i64, i64* %0, i64 1
  %3 = load i64, i64* %2, align 4
  %4 = getelementptr i64, i64* %0, i64 2
  %5 = load i64, i64* %4, align 4
  %6 = insertvalue { i64, i64, i64 } undef, i64 %1, 0
  %7 = insertvalue { i64, i64, i64 } %6, i64 %3, 1
  %8 = insertvalue { i64, i64, i64 } %7, i64 %5, 2
  ret { i64, i64, i64 } %8
}

; Function Attrs: norecurse nounwind readonly
define i64 @"coordinate.Coordinate.x<0>"(i64* nocapture readonly) local_unnamed_addr #1 {
entry:
  %1 = load i64, i64* %0, align 4
  ret i64 %1
}

define i64* @"coordinate.Coordinate.x<1>"(i64* %"$rec#0", i64 %"$field#0") local_unnamed_addr {
entry:
  %0 = tail call i8* @wybe_malloc(i32 24)
  %1 = bitcast i8* %0 to i64*
  %2 = bitcast i64* %"$rec#0" to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i32(i8* %0, i8* %2, i32 24, i1 false)
  store i64 %"$field#0", i64* %1, align 4
  ret i64* %1
}

; Function Attrs: norecurse nounwind readonly
define i64 @"coordinate.Coordinate.y<0>"(i64* nocapture readonly) local_unnamed_addr #1 {
entry:
  %1 = getelementptr i64, i64* %0, i64 1
  %2 = load i64, i64* %1, align 4
  ret i64 %2
}

define i64* @"coordinate.Coordinate.y<1>"(i64* %"$rec#0", i64 %"$field#0") local_unnamed_addr {
entry:
  %0 = tail call i8* @wybe_malloc(i32 24)
  %1 = bitcast i8* %0 to i64*
  %2 = bitcast i64* %"$rec#0" to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i32(i8* %0, i8* %2, i32 24, i1 false)
  %3 = getelementptr i8, i8* %0, i64 8
  %4 = bitcast i8* %3 to i64*
  store i64 %"$field#0", i64* %4, align 4
  ret i64* %1
}

; Function Attrs: norecurse nounwind readonly
define i64 @"coordinate.Coordinate.z<0>"(i64* nocapture readonly) local_unnamed_addr #1 {
entry:
  %1 = getelementptr i64, i64* %0, i64 2
  %2 = load i64, i64* %1, align 4
  ret i64 %2
}

define i64* @"coordinate.Coordinate.z<1>"(i64* %"$rec#0", i64 %"$field#0") local_unnamed_addr {
entry:
  %0 = tail call i8* @wybe_malloc(i32 24)
  %1 = bitcast i8* %0 to i64*
  %2 = bitcast i64* %"$rec#0" to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i32(i8* %0, i8* %2, i32 24, i1 false)
  %3 = getelementptr i8, i8* %0, i64 16
  %4 = bitcast i8* %3 to i64*
  store i64 %"$field#0", i64* %4, align 4
  ret i64* %1
}

attributes #0 = { norecurse nounwind readnone }
attributes #1 = { norecurse nounwind readonly }

--------------------------------------------------
; ModuleID = 'coordinate.Coordinate'
source_filename = "test-cases"

declare i8* @wybe_malloc(i32) local_unnamed_addr

declare void @llvm.memcpy.p0i8.p0i8.i32(i8*, i8*, i32, i1)

; Function Attrs: norecurse nounwind readnone
define i64* @"coordinate.Coordinate.=<0>"(i64* readnone returned %"in#0") local_unnamed_addr #0 {
entry:
  ret i64* %"in#0"
}

; Function Attrs: norecurse nounwind readnone
define i64* @"coordinate.Coordinate.=<1>"(i64* readnone returned %"in#0") local_unnamed_addr #0 {
entry:
  ret i64* %"in#0"
}

; Function Attrs: norecurse nounwind readonly
define i1 @"coordinate.Coordinate.=<2>"(i64* nocapture readonly, i64* nocapture readonly) local_unnamed_addr #1 {
entry:
  %2 = load i64, i64* %0, align 4
  %3 = getelementptr i64, i64* %0, i64 2
  %4 = load i64, i64* %3, align 4
  %5 = load i64, i64* %1, align 4
  %6 = getelementptr i64, i64* %1, i64 2
  %7 = load i64, i64* %6, align 4
  %"tmp$2#0" = icmp eq i64 %2, %5
  br i1 %"tmp$2#0", label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %8 = getelementptr i64, i64* %1, i64 1
  %9 = load i64, i64* %8, align 4
  %10 = getelementptr i64, i64* %0, i64 1
  %11 = load i64, i64* %10, align 4
  %"tmp$3#0" = icmp eq i64 %11, %9
  br i1 %"tmp$3#0", label %if.then1, label %if.else

if.else:                                          ; preds = %if.then, %entry
  ret i1 false

if.then1:                                         ; preds = %if.then
  %"$$#0" = icmp eq i64 %4, %7
  ret i1 %"$$#0"
}

define i64* @"coordinate.Coordinate.Coordinate<0>"(i64 %"x#0", i64 %"y#0", i64 %"z#0") local_unnamed_addr {
entry:
  %0 = tail call i8* @wybe_malloc(i32 24)
  %1 = bitcast i8* %0 to i64*
  store i64 %"x#0", i64* %1, align 4
  %2 = getelementptr i8, i8* %0, i64 8
  %3 = bitcast i8* %2 to i64*
  store i64 %"y#0", i64* %3, align 4
  %4 = getelementptr i8, i8* %0, i64 16
  %5 = bitcast i8* %4 to i64*
  store i64 %"z#0", i64* %5, align 4
  ret i64* %1
}

; Function Attrs: norecurse nounwind readonly
define { i64, i64, i64 } @"coordinate.Coordinate.Coordinate<1>"(i64* nocapture readonly) local_unnamed_addr #1 {
entry:
  %1 = load i64, i64* %0, align 4
  %2 = getelementptr i64, i64* %0, i64 1
  %3 = load i64, i64* %2, align 4
  %4 = getelementptr i64, i64* %0, i64 2
  %5 = load i64, i64* %4, align 4
  %6 = insertvalue { i64, i64, i64 } undef, i64 %1, 0
  %7 = insertvalue { i64, i64, i64 } %6, i64 %3, 1
  %8 = insertvalue { i64, i64, i64 } %7, i64 %5, 2
  ret { i64, i64, i64 } %8
}

; Function Attrs: norecurse nounwind readonly
define i64 @"coordinate.Coordinate.x<0>"(i64* nocapture readonly) local_unnamed_addr #1 {
entry:
  %1 = load i64, i64* %0, align 4
  ret i64 %1
}

define i64* @"coordinate.Coordinate.x<1>"(i64* %"$rec#0", i64 %"$field#0") local_unnamed_addr {
entry:
  %0 = tail call i8* @wybe_malloc(i32 24)
  %1 = bitcast i8* %0 to i64*
  %2 = bitcast i64* %"$rec#0" to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i32(i8* %0, i8* %2, i32 24, i1 false)
  store i64 %"$field#0", i64* %1, align 4
  ret i64* %1
}

; Function Attrs: norecurse nounwind readonly
define i64 @"coordinate.Coordinate.y<0>"(i64* nocapture readonly) local_unnamed_addr #1 {
entry:
  %1 = getelementptr i64, i64* %0, i64 1
  %2 = load i64, i64* %1, align 4
  ret i64 %2
}

define i64* @"coordinate.Coordinate.y<1>"(i64* %"$rec#0", i64 %"$field#0") local_unnamed_addr {
entry:
  %0 = tail call i8* @wybe_malloc(i32 24)
  %1 = bitcast i8* %0 to i64*
  %2 = bitcast i64* %"$rec#0" to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i32(i8* %0, i8* %2, i32 24, i1 false)
  %3 = getelementptr i8, i8* %0, i64 8
  %4 = bitcast i8* %3 to i64*
  store i64 %"$field#0", i64* %4, align 4
  ret i64* %1
}

; Function Attrs: norecurse nounwind readonly
define i64 @"coordinate.Coordinate.z<0>"(i64* nocapture readonly) local_unnamed_addr #1 {
entry:
  %1 = getelementptr i64, i64* %0, i64 2
  %2 = load i64, i64* %1, align 4
  ret i64 %2
}

define i64* @"coordinate.Coordinate.z<1>"(i64* %"$rec#0", i64 %"$field#0") local_unnamed_addr {
entry:
  %0 = tail call i8* @wybe_malloc(i32 24)
  %1 = bitcast i8* %0 to i64*
  %2 = bitcast i64* %"$rec#0" to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i32(i8* %0, i8* %2, i32 24, i1 false)
  %3 = getelementptr i8, i8* %0, i64 16
  %4 = bitcast i8* %3 to i64*
  store i64 %"$field#0", i64* %4, align 4
  ret i64* %1
}

attributes #0 = { norecurse nounwind readnone }
attributes #1 = { norecurse nounwind readonly }

