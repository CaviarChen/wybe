Public func second(x:list(t)):t {update:1:8} = head(tail(x {update:1:35}) {update:1:35}) {update:1:35}
Public proc second(!x:list(t), y:t) {update:3:8}[=(head(tail(!x {update:4:5}) {update:4:5}) {update:4:5}, y {update:4:20}) {update:4:5}]

 Module update
  public submods  : 
  public types    : 
  public resources: 
  public procs    : second(!x:list(t), y:t) <2>
                    second(x:list(t), ?$:t) <1>
  imports         : 
  types           : 
  resources       : 
  procs           : second: [
proc second(!x:list(t), y:t) (id 2):  {update:3:8}
    tail(x, ?$tmp2) {update:4:5}
    head($tmp2, ?$tmp3) {update:4:5}
    =(!$tmp3, y) {update:4:5}
    head(!$tmp2, $tmp3) {update:4:5}
    tail(!x, $tmp2) {update:4:5},
proc second(x:list(t), ?$:t) (id 1):  {update:1:8}
    tail(x, ?$tmp0) {update:1:35}
    head($tmp0, ?$tmp1) {update:1:35}
    =(?$, $tmp1) {?}]

Submodules of update:

