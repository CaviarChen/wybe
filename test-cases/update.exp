Public func second(x:list(t)):t {update:1:8} = head(tail(x {update:1:35}) {update:1:35}) {update:1:35}
Public proc second(!x:list(t), y:t) {update:3:8}[=(head(tail(!x {update:4:5}) {update:4:5}) {update:4:5}, y {update:4:20}) {update:4:5}]

 Module update
  public submods  : 
  public types    : 
  public resources: 
  public procs    : second(x:0:list(t), ?x:-1:list(t), y:0:t) <1> {update:3:8}
                    second(x:0:list(t), ?$:-1:t) <0> {update:1:8}
  imports         : 
  types           : 
  resources       : 
  procs           : second:
proc second(x:0:list(t), ?$:-1:t) (id 0):  {update:1:8}
    tail(x:0, ?$tmp1:0) {update:1:35}
    head($tmp1:0, ?$tmp0:0) {update:1:35}
    =(?$:0, $tmp0:0) {?}
proc second(x:0:list(t), ?x:-1:list(t), y:0:t) (id 1):  {update:3:8}
    tail(x:0, ?x:1, ?$tmp1:0) {update:4:5}
    head($tmp1:0, ?$tmp0:0) {update:4:5}
    =($tmp0:0, y:0) {update:4:5}

Submodules of update:

