======================================================================
AFTER EVERYTHING:
 Module proc_factorial
  public submods  : 
  public types    : 
  public resources: 
  public procs    : proc_factorial.<0>
                    proc_factorial.factorial<0>
  imports         : use wybe
  types           : 
  resources       : 
  procs           : 

*main* > public inline (0 calls)
0: (wybe.io$io#0:wybe.phantom, ?wybe.io$io#1:wybe.phantom):
    proc_factorial.gen$1<0>(5:wybe.int, 1:wybe.int, ~#wybe.io$io#0:wybe.phantom, ?#wybe.io$io#1:wybe.phantom) @proc_factorial:3:5


factorial > public inline (1 calls)
0: factorial(n#0:wybe.int, wybe.io$io#0:wybe.phantom, ?wybe.io$io#1:wybe.phantom):
    proc_factorial.gen$1<0>(~n#0:wybe.int, 1:wybe.int, ~wybe.io$io#0:wybe.phantom, ?wybe.io$io#1:wybe.phantom) @proc_factorial:3:5


gen$1 > (2 calls)
0: gen$1(n#0:wybe.int, result#0:wybe.int, wybe.io$io#0:wybe.phantom, ?wybe.io$io#1:wybe.phantom):
    foreign llvm icmp sgt(n#0:wybe.int, 1:wybe.int, ?tmp$3#0:wybe.bool) @wybe:26:39
    case ~tmp$3#0:wybe.bool of
    0:
        foreign c print_int(~result#0:wybe.int, ~wybe.io$io#0:wybe.phantom, ?tmp$9#0:wybe.phantom) @wybe:76:38
        foreign c putchar('\n':wybe.char, ~tmp$9#0:wybe.phantom, ?wybe.io$io#1:wybe.phantom) @wybe:74:28

    1:
        foreign llvm mul(n#0:wybe.int, ~result#0:wybe.int, ?tmp$0#0:wybe.int) @wybe:21:38
        foreign llvm sub(~n#0:wybe.int, 1:wybe.int, ?tmp$1#0:wybe.int) @wybe:16:38
        proc_factorial.gen$1<0>(~tmp$1#0:wybe.int, ~tmp$0#0:wybe.int, ~wybe.io$io#0:wybe.phantom, ?wybe.io$io#1:wybe.phantom) @proc_factorial:3:5



gen$2 > inline (1 calls)
0: gen$2([n#0:wybe.int], result#0:wybe.int, wybe.io$io#0:wybe.phantom, ?wybe.io$io#1:wybe.phantom):
    foreign c print_int(~result#0:wybe.int, ~#wybe.io$io#0:wybe.phantom, ?tmp$5#0:wybe.phantom) @wybe:76:38
    foreign c putchar('\n':wybe.char, ~tmp$5#0:wybe.phantom, ?#wybe.io$io#1:wybe.phantom) @wybe:74:28
proc_factorial
======================================================================
AFTER LLVM IR:

; ModuleID = 'proc_factorial'
source_filename = "test-cases/proc_factorial.wybe"

declare void @putchar(i8) local_unnamed_addr

declare void @print_int(i64) local_unnamed_addr

define i32 @proc_factorial.main() local_unnamed_addr {
entry:
  tail call void @"proc_factorial.gen$1<0>"(i64 5, i64 1)
  ret i32 0
}

define void @"proc_factorial.factorial<0>"(i64 %"n#0") local_unnamed_addr {
entry:
  tail call void @"proc_factorial.gen$1<0>"(i64 %"n#0", i64 1)
  ret void
}

define void @"proc_factorial.gen$1<0>"(i64 %"n#0", i64 %"result#0") local_unnamed_addr {
entry:
  %"tmp$3#01" = icmp sgt i64 %"n#0", 1
  br i1 %"tmp$3#01", label %if.then.preheader, label %if.else

if.then.preheader:                                ; preds = %entry
  br label %if.then

if.then:                                          ; preds = %if.then.preheader, %if.then
  %"result#0.tr3" = phi i64 [ %"tmp$0#0", %if.then ], [ %"result#0", %if.then.preheader ]
  %"n#0.tr2" = phi i64 [ %"tmp$1#0", %if.then ], [ %"n#0", %if.then.preheader ]
  %"tmp$0#0" = mul i64 %"result#0.tr3", %"n#0.tr2"
  %"tmp$1#0" = add nsw i64 %"n#0.tr2", -1
  %"tmp$3#0" = icmp sgt i64 %"n#0.tr2", 2
  br i1 %"tmp$3#0", label %if.then, label %if.else

if.else:                                          ; preds = %if.then, %entry
  %"result#0.tr.lcssa" = phi i64 [ %"result#0", %entry ], [ %"tmp$0#0", %if.then ]
  tail call void @print_int(i64 %"result#0.tr.lcssa")
  tail call void @putchar(i8 10)
  ret void
}

define void @"proc_factorial.gen$2<0>"(i64 %"result#0") local_unnamed_addr {
entry:
  tail call void @print_int(i64 %"result#0")
  tail call void @putchar(i8 10)
  ret void
}

