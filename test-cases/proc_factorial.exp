======================================================================
AFTER EVERYTHING:
 Module proc_factorial
  public submods  :
  public types    :
  public resources:
  public procs    : proc_factorial.<0>
                    proc_factorial.factorial<0>
  imports         : use wybe
  types           :
  resources       :
  procs           :

*main* > public inline (0 calls)
0: (argc#0:wybe.int, [?argc#0:wybe.int], argv#0:wybe.int, [?argv#0:wybe.int], exit_code#0:wybe.int, [?exit_code#0:wybe.int], io#0:phantom, ?io#1:phantom):
    proc_factorial.gen$1<0>(~#io#0:phantom, 5:wybe.int, 1:wybe.int, ?#io#1:phantom) @proc_factorial:3:5


factorial > public inline (1 calls)
0: factorial(n#0:wybe.int, io#0:phantom, ?io#1:phantom):
    proc_factorial.gen$1<0>(~io#0:phantom, ~n#0:wybe.int, 1:wybe.int, ?io#1:phantom) @proc_factorial:3:5


gen$1 > (2 calls)
0: gen$1(io#0:phantom, n#0:wybe.int, result#0:wybe.int, ?io#1:phantom):
    foreign llvm icmp sgt(n#0:wybe.int, 1:wybe.int, ?tmp$3#0:wybe.bool) @wybe:nn:nn
    case ~tmp$3#0:wybe.bool of
    0:
        foreign c print_int(~result#0:wybe.int, ~io#0:phantom, ?tmp$9#0:phantom) @wybe:nn:nn
        foreign c putchar('\n':wybe.char, ~tmp$9#0:phantom, ?io#1:phantom) @wybe:nn:nn

    1:
        foreign llvm mul(n#0:wybe.int, ~result#0:wybe.int, ?tmp$0#0:wybe.int) @wybe:nn:nn
        foreign llvm sub(~n#0:wybe.int, 1:wybe.int, ?tmp$1#0:wybe.int) @wybe:nn:nn
        proc_factorial.gen$1<0>(~io#0:phantom, ~tmp$1#0:wybe.int, ~tmp$0#0:wybe.int, ?io#1:phantom) @proc_factorial:3:5



gen$2 > inline (1 calls)
AFTER LLVM IR:
=======
0: gen$2(io#0:phantom, [n#0:wybe.int], result#0:wybe.int, ?io#1:phantom):
    foreign c print_int(~result#0:wybe.int, ~#io#0:phantom, ?tmp$5#0:phantom) @wybe:nn:nn
    foreign c putchar('\n':wybe.char, ~tmp$5#0:phantom, ?#io#1:phantom) @wybe:nn:nn

  LLVM code       :

; ModuleID = 'proc_factorial'


declare external ccc void @putchar(i8)

declare external ccc void @print_int(i64)

declare external ccc i8* @wybe_malloc(i32)

define external ccc void @"proc_factorial.<0>"(i64 %"argc#0", i64 %"argv#0", i64 %"exit_code#0"){
entry:
  tail call ccc void @"proc_factorial.gen$1<0>"(i64 5, i64 1)
  ret void
}

define external ccc void @"proc_factorial.factorial<0>"(i64 %"n#0"){
entry:
  tail call ccc void @"proc_factorial.gen$1<0>"(i64 %"n#0", i64 1)
  ret void
}

define external ccc void @"proc_factorial.gen$1<0>"(i64 %"n#0", i64 %"result#0"){
entry:
  %"tmp$3#0" = icmp sgt i64 %"n#0", 1
  br i1 %"tmp$3#0", label %if.then, label %if.else
if.then:
  %"tmp$0#0" = mul i64 %"n#0", %"result#0"
  %"tmp$1#0" = sub i64 %"n#0", 1
  tail call ccc void @"proc_factorial.gen$1<0>"(i64 %"tmp$1#0", i64 %"tmp$0#0")
  ret void
if.else:
  tail call ccc void @print_int(i64 %"result#0")
  tail call ccc void @putchar(i8 10)
  ret void
}

define external ccc void @"proc_factorial.gen$2<0>"(i64 %"result#0"){
entry:
  tail call ccc void @print_int(i64 %"result#0")
  tail call ccc void @putchar(i8 10)
  ret void
}
