======================================================================
AFTER EVERYTHING:
 Module alias4
  public submods  : 
  public types    : 
  public resources: 
  public procs    : alias4.<0>
                    alias4.bar<0>
                    alias4.replicate1<0>
  imports         : use position
                    use wybe
  types           : 
  resources       : 
  procs           : 

*main* > public inline (0 calls)
0: (wybe.io$io#0:wybe.phantom, ?wybe.io$io#1:wybe.phantom): AliasPairs: []
    alias4.bar<0>(~#wybe.io$io#0:wybe.phantom, ?#wybe.io$io#1:wybe.phantom) @alias4:28:2


bar > public (1 calls)
0: bar(wybe.io$io#0:wybe.phantom, ?wybe.io$io#9:wybe.phantom): AliasPairs: []
    foreign lpvm alloc(16:wybe.int, ?tmp$7#0:position.position)
    foreign lpvm mutate(~tmp$7#0:position.position, ?tmp$8#0:position.position, 16:wybe.int, 0:wybe.int, 1:wybe.int, 100:wybe.int)
    foreign lpvm mutate(~tmp$8#0:position.position, ?tmp$0#0:position.position, 16:wybe.int, 8:wybe.int, 1:wybe.int, 100:wybe.int)
    alias4.replicate1<0>(tmp$0#0:position.position, ?p2#0:position.position, ~#wybe.io$io#0:wybe.phantom, ?#wybe.io$io#1:wybe.phantom) @alias4:15:4
    foreign lpvm mutate(~tmp$0#0:position.position, ?%p1#1:position.position, 16:wybe.int, 0:wybe.int, 1:wybe.int, 555:wybe.int)
    foreign c print_string("p1.x: ":wybe.string, ~#wybe.io$io#1:wybe.phantom, ?#wybe.io$io#2:wybe.phantom) @wybe:92:41
    foreign lpvm access(p1#1:position.position, 0:wybe.int, ?tmp$1#0:wybe.int)
    foreign c print_int(~tmp$1#0:wybe.int, ~#wybe.io$io#2:wybe.phantom, ?tmp$17#0:wybe.phantom) @wybe:80:38
    foreign c putchar('\n':wybe.char, ~tmp$17#0:wybe.phantom, ?#wybe.io$io#3:wybe.phantom) @wybe:78:28
    foreign c print_string("p1.y: ":wybe.string, ~#wybe.io$io#3:wybe.phantom, ?#wybe.io$io#4:wybe.phantom) @wybe:92:41
    foreign lpvm access(~p1#1:position.position, 8:wybe.int, ?tmp$2#0:wybe.int)
    foreign c print_int(~tmp$2#0:wybe.int, ~#wybe.io$io#4:wybe.phantom, ?tmp$23#0:wybe.phantom) @wybe:80:38
    foreign c putchar('\n':wybe.char, ~tmp$23#0:wybe.phantom, ?#wybe.io$io#5:wybe.phantom) @wybe:78:28
    foreign c print_string("p2.x: ":wybe.string, ~#wybe.io$io#5:wybe.phantom, ?#wybe.io$io#6:wybe.phantom) @wybe:92:41
    foreign lpvm access(p2#0:position.position, 0:wybe.int, ?tmp$3#0:wybe.int)
    foreign c print_int(~tmp$3#0:wybe.int, ~#wybe.io$io#6:wybe.phantom, ?tmp$29#0:wybe.phantom) @wybe:80:38
    foreign c putchar('\n':wybe.char, ~tmp$29#0:wybe.phantom, ?#wybe.io$io#7:wybe.phantom) @wybe:78:28
    foreign c print_string("p2.y: ":wybe.string, ~#wybe.io$io#7:wybe.phantom, ?#wybe.io$io#8:wybe.phantom) @wybe:92:41
    foreign lpvm access(~p2#0:position.position, 8:wybe.int, ?tmp$4#0:wybe.int)
    foreign c print_int(~tmp$4#0:wybe.int, ~#wybe.io$io#8:wybe.phantom, ?tmp$35#0:wybe.phantom) @wybe:80:38
    foreign c putchar('\n':wybe.char, ~tmp$35#0:wybe.phantom, ?#wybe.io$io#9:wybe.phantom) @wybe:78:28


replicate1 > public (1 calls)
0: replicate1(p1#0:position.position, ?p2#0:position.position, wybe.io$io#0:wybe.phantom, ?wybe.io$io#2:wybe.phantom): AliasPairs: []
    foreign lpvm alloc(16:wybe.int, ?tmp$6#0:position.position)
    foreign lpvm mutate(~tmp$6#0:position.position, ?tmp$7#0:position.position, 16:wybe.int, 0:wybe.int, 1:wybe.int, 0:wybe.int)
    foreign lpvm mutate(~tmp$7#0:position.position, ?tmp$0#0:position.position, 16:wybe.int, 8:wybe.int, 1:wybe.int, 0:wybe.int)
    foreign c print_string("random replicate1":wybe.string, ~#wybe.io$io#0:wybe.phantom, ?tmp$11#0:wybe.phantom) @wybe:92:41
    foreign c putchar('\n':wybe.char, ~tmp$11#0:wybe.phantom, ?#wybe.io$io#1:wybe.phantom) @wybe:78:28
    foreign lpvm access(~tmp$0#0:position.position, 0:wybe.int, ?tmp$1#0:wybe.int)
    foreign c print_int(~tmp$1#0:wybe.int, ~#wybe.io$io#1:wybe.phantom, ?tmp$15#0:wybe.phantom) @wybe:80:38
    foreign c putchar('\n':wybe.char, ~tmp$15#0:wybe.phantom, ?#wybe.io$io#2:wybe.phantom) @wybe:78:28
    foreign lpvm access(~p1#0:position.position, 0:wybe.int, ?tmp$3#0:wybe.int)
    foreign lpvm alloc(16:wybe.int, ?tmp$19#0:position.position)
    foreign lpvm mutate(~tmp$19#0:position.position, ?tmp$20#0:position.position, 16:wybe.int, 0:wybe.int, 1:wybe.int, ~tmp$3#0:wybe.int)
    foreign lpvm mutate(~tmp$20#0:position.position, ?p2#0:position.position, 16:wybe.int, 8:wybe.int, 1:wybe.int, 200:wybe.int)
--------------------------------------------------
 Module position
  public submods  : 
  public types    : position: (position.position,"pointer")
  public resources: 
  public procs    : position.printPosition<0>
                    position.position.=<0>
                    position.position.=<1>
                    position.position.=<2>
                    position.position.position<0>
                    position.position.position<1>
                    position.position.x<0>
                    position.position.x<1>
                    position.position.y<0>
                    position.position.y<1>
  imports         : public use position.position
                    use wybe
  types           : position/0 (pointer)  @position:1:8
  resources       : 
  procs           : 

printPosition > public (0 calls)
0: printPosition(pos#0:position.position, wybe.io$io#0:wybe.phantom, ?wybe.io$io#5:wybe.phantom): AliasPairs: []
    foreign c print_string(" (":wybe.string, ~#wybe.io$io#0:wybe.phantom, ?#wybe.io$io#1:wybe.phantom) @wybe:92:41
    foreign lpvm access(pos#0:position.position, 0:wybe.int, ?tmp$0#0:wybe.int)
    foreign c print_int(~tmp$0#0:wybe.int, ~#wybe.io$io#1:wybe.phantom, ?#wybe.io$io#2:wybe.phantom) @wybe:80:38
    foreign c print_string(",":wybe.string, ~#wybe.io$io#2:wybe.phantom, ?#wybe.io$io#3:wybe.phantom) @wybe:92:41
    foreign lpvm access(~pos#0:position.position, 8:wybe.int, ?tmp$1#0:wybe.int)
    foreign c print_int(~tmp$1#0:wybe.int, ~#wybe.io$io#3:wybe.phantom, ?#wybe.io$io#4:wybe.phantom) @wybe:80:38
    foreign c print_string(")":wybe.string, ~#wybe.io$io#4:wybe.phantom, ?tmp$14#0:wybe.phantom) @wybe:92:41
    foreign c putchar('\n':wybe.char, ~tmp$14#0:wybe.phantom, ?#wybe.io$io#5:wybe.phantom) @wybe:78:28
  submodules      : position.position
--------------------------------------------------
 Module position.position([])
  public submods  : 
  public types    : 
  public resources: 
  public procs    : position.position.=<0>
                    position.position.=<1>
                    position.position.=<2>
                    position.position.position<0>
                    position.position.position<1>
                    position.position.x<0>
                    position.position.x<1>
                    position.position.y<0>
                    position.position.y<1>
  imports         : use position
                    use wybe
  types           : 
  resources       : 
  procs           : 

= > public inline (0 calls)
0: =(?out#0:position.position, in#0:position.position): AliasPairs: []
    foreign llvm move(~in#0:position.position, ?out#0:position.position)
= > public inline (0 calls)
1: =(in#0:position.position, ?out#0:position.position): AliasPairs: []
    foreign llvm move(~in#0:position.position, ?out#0:position.position)
= > public inline test (3 calls)
2: =($left#0:position.position, $right#0:position.position, ?$$#0:wybe.bool): AliasPairs: []
    foreign lpvm access($left#0:position.position, 0:wybe.int, ?$left$x#0:wybe.int)
    foreign lpvm access(~$left#0:position.position, 8:wybe.int, ?$left$y#0:wybe.int)
    foreign lpvm access($right#0:position.position, 0:wybe.int, ?$right$x#0:wybe.int)
    foreign lpvm access(~$right#0:position.position, 8:wybe.int, ?$right$y#0:wybe.int)
    foreign llvm icmp eq(~$left$x#0:wybe.int, ~$right$x#0:wybe.int, ?tmp$2#0:wybe.bool) @wybe:28:40
    case ~tmp$2#0:wybe.bool of
    0:
        foreign llvm move(0:wybe.bool, ?$$#0:wybe.bool)

    1:
        foreign llvm icmp eq(~$left$y#0:wybe.int, ~$right$y#0:wybe.int, ?$$#0:wybe.bool) @wybe:28:40



position > public inline (0 calls)
0: position(x#0:wybe.int, y#0:wybe.int, ?$#0:position.position): AliasPairs: []
    foreign lpvm alloc(16:wybe.int, ?$rec#0:position.position)
    foreign lpvm mutate(~%$rec#0:position.position, ?%$rec#1:position.position, 16:wybe.int, 0:wybe.int, 1:wybe.int, ~x#0:wybe.int)
    foreign lpvm mutate(~%$rec#1:position.position, ?%$#0:position.position, 16:wybe.int, 8:wybe.int, 1:wybe.int, ~y#0:wybe.int)
position > public inline (4 calls)
1: position(?x#0:wybe.int, ?y#0:wybe.int, $#0:position.position): AliasPairs: []
    foreign lpvm access($#0:position.position, 0:wybe.int, ?x#0:wybe.int)
    foreign lpvm access(~$#0:position.position, 8:wybe.int, ?y#0:wybe.int)


x > public inline (0 calls)
0: x($rec#0:position.position, ?$#0:wybe.int): AliasPairs: []
    foreign lpvm access(~$rec#0:position.position, 0:wybe.int, ?$#0:wybe.int)
x > public inline (0 calls)
1: x($rec#0:position.position, ?$rec#1:position.position, $field#0:wybe.int): AliasPairs: []
    foreign lpvm mutate(~%$rec#0:position.position, ?%$rec#1:position.position, 16:wybe.int, 0:wybe.int, 0:wybe.int, ~$field#0:wybe.int)


y > public inline (0 calls)
0: y($rec#0:position.position, ?$#0:wybe.int): AliasPairs: []
    foreign lpvm access(~$rec#0:position.position, 8:wybe.int, ?$#0:wybe.int)
y > public inline (0 calls)
1: y($rec#0:position.position, ?$rec#1:position.position, $field#0:wybe.int): AliasPairs: []
    foreign lpvm mutate(~%$rec#0:position.position, ?%$rec#1:position.position, 16:wybe.int, 8:wybe.int, 0:wybe.int, ~$field#0:wybe.int)
alias4, position, position.position
======================================================================
AFTER LLVM IR:

; ModuleID = 'alias4'
source_filename = "test-cases/alias4.wybe"

@alias4.22 = constant [7 x i8] c"p2.y: \00"
@alias4.18 = constant [7 x i8] c"p2.x: \00"
@alias4.14 = constant [7 x i8] c"p1.y: \00"
@alias4.10 = constant [7 x i8] c"p1.x: \00"
@alias4.32 = constant [18 x i8] c"random replicate1\00"

declare void @putchar(i8) local_unnamed_addr

declare void @print_int(i64) local_unnamed_addr

declare void @print_string(i8*) local_unnamed_addr

declare i8* @wybe_malloc(i32) local_unnamed_addr

define i32 @alias4.main() local_unnamed_addr {
entry:
  tail call void @"alias4.bar<0>"()
  ret i32 0
}

define void @"alias4.bar<0>"() local_unnamed_addr {
entry:
  %0 = tail call i8* @wybe_malloc(i32 16)
  %1 = bitcast i8* %0 to i64*
  store i64 100, i64* %1, align 4
  %2 = getelementptr i8, i8* %0, i64 8
  %3 = bitcast i8* %2 to i64*
  store i64 100, i64* %3, align 4
  %4 = tail call i64* @"alias4.replicate1<0>"(i64* %1)
  store i64 555, i64* %1, align 4
  tail call void @print_string(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @alias4.10, i64 0, i64 0))
  %5 = load i64, i64* %1, align 4
  tail call void @print_int(i64 %5)
  tail call void @putchar(i8 10)
  tail call void @print_string(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @alias4.14, i64 0, i64 0))
  %6 = load i64, i64* %3, align 4
  tail call void @print_int(i64 %6)
  tail call void @putchar(i8 10)
  tail call void @print_string(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @alias4.18, i64 0, i64 0))
  %7 = load i64, i64* %4, align 4
  tail call void @print_int(i64 %7)
  tail call void @putchar(i8 10)
  tail call void @print_string(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @alias4.22, i64 0, i64 0))
  %8 = getelementptr i64, i64* %4, i64 1
  %9 = load i64, i64* %8, align 4
  tail call void @print_int(i64 %9)
  tail call void @putchar(i8 10)
  ret void
}

define i64* @"alias4.replicate1<0>"(i64* nocapture readonly) local_unnamed_addr {
entry:
  %1 = tail call i8* @wybe_malloc(i32 16)
  %2 = bitcast i8* %1 to i64*
  call void @llvm.memset.p0i8.i64(i8* %1, i8 0, i64 16, i32 4, i1 false)
  tail call void @print_string(i8* getelementptr inbounds ([18 x i8], [18 x i8]* @alias4.32, i64 0, i64 0))
  tail call void @putchar(i8 10)
  %3 = load i64, i64* %2, align 4
  tail call void @print_int(i64 %3)
  tail call void @putchar(i8 10)
  %4 = load i64, i64* %0, align 4
  %5 = tail call i8* @wybe_malloc(i32 16)
  %6 = bitcast i8* %5 to i64*
  store i64 %4, i64* %6, align 4
  %7 = getelementptr i8, i8* %5, i64 8
  %8 = bitcast i8* %7 to i64*
  store i64 200, i64* %8, align 4
  ret i64* %6
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i32, i1) #0

attributes #0 = { argmemonly nounwind }

--------------------------------------------------
; ModuleID = 'position'
source_filename = "test-cases/position.wybe"

@position.9 = constant [2 x i8] c")\00"
@position.5 = constant [2 x i8] c",\00"
@position.1 = constant [3 x i8] c" (\00"

declare void @putchar(i8) local_unnamed_addr

declare void @print_string(i8*) local_unnamed_addr

declare void @print_int(i64) local_unnamed_addr

define void @"position.printPosition<0>"(i64* nocapture readonly) local_unnamed_addr {
entry:
  tail call void @print_string(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @position.1, i64 0, i64 0))
  %1 = load i64, i64* %0, align 4
  tail call void @print_int(i64 %1)
  tail call void @print_string(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @position.5, i64 0, i64 0))
  %2 = getelementptr i64, i64* %0, i64 1
  %3 = load i64, i64* %2, align 4
  tail call void @print_int(i64 %3)
  tail call void @print_string(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @position.9, i64 0, i64 0))
  tail call void @putchar(i8 10)
  ret void
}

--------------------------------------------------
; ModuleID = 'position.position'
source_filename = "test-cases"

declare i8* @wybe_malloc(i32) local_unnamed_addr

declare void @llvm.memcpy.p0i8.p0i8.i32(i8*, i8*, i32, i1)

; Function Attrs: norecurse nounwind readnone
define i64* @"position.position.=<0>"(i64* readnone returned %"in#0") local_unnamed_addr #0 {
entry:
  ret i64* %"in#0"
}

; Function Attrs: norecurse nounwind readnone
define i64* @"position.position.=<1>"(i64* readnone returned %"in#0") local_unnamed_addr #0 {
entry:
  ret i64* %"in#0"
}

; Function Attrs: norecurse nounwind readonly
define i1 @"position.position.=<2>"(i64* nocapture readonly, i64* nocapture readonly) local_unnamed_addr #1 {
entry:
  %2 = load i64, i64* %0, align 4
  %3 = load i64, i64* %1, align 4
  %"tmp$2#0" = icmp eq i64 %2, %3
  br i1 %"tmp$2#0", label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %4 = getelementptr i64, i64* %1, i64 1
  %5 = load i64, i64* %4, align 4
  %6 = getelementptr i64, i64* %0, i64 1
  %7 = load i64, i64* %6, align 4
  %"$$#0" = icmp eq i64 %7, %5
  ret i1 %"$$#0"

if.else:                                          ; preds = %entry
  ret i1 false
}

define i64* @"position.position.position<0>"(i64 %"x#0", i64 %"y#0") local_unnamed_addr {
entry:
  %0 = tail call i8* @wybe_malloc(i32 16)
  %1 = bitcast i8* %0 to i64*
  store i64 %"x#0", i64* %1, align 4
  %2 = getelementptr i8, i8* %0, i64 8
  %3 = bitcast i8* %2 to i64*
  store i64 %"y#0", i64* %3, align 4
  ret i64* %1
}

; Function Attrs: norecurse nounwind readonly
define { i64, i64 } @"position.position.position<1>"(i64* nocapture readonly) local_unnamed_addr #1 {
entry:
  %1 = load i64, i64* %0, align 4
  %2 = getelementptr i64, i64* %0, i64 1
  %3 = load i64, i64* %2, align 4
  %4 = insertvalue { i64, i64 } undef, i64 %1, 0
  %5 = insertvalue { i64, i64 } %4, i64 %3, 1
  ret { i64, i64 } %5
}

; Function Attrs: norecurse nounwind readonly
define i64 @"position.position.x<0>"(i64* nocapture readonly) local_unnamed_addr #1 {
entry:
  %1 = load i64, i64* %0, align 4
  ret i64 %1
}

define i64* @"position.position.x<1>"(i64* %"$rec#0", i64 %"$field#0") local_unnamed_addr {
entry:
  %0 = tail call i8* @wybe_malloc(i32 16)
  %1 = bitcast i8* %0 to i64*
  %2 = bitcast i64* %"$rec#0" to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i32(i8* %0, i8* %2, i32 16, i1 false)
  store i64 %"$field#0", i64* %1, align 4
  ret i64* %1
}

; Function Attrs: norecurse nounwind readonly
define i64 @"position.position.y<0>"(i64* nocapture readonly) local_unnamed_addr #1 {
entry:
  %1 = getelementptr i64, i64* %0, i64 1
  %2 = load i64, i64* %1, align 4
  ret i64 %2
}

define i64* @"position.position.y<1>"(i64* %"$rec#0", i64 %"$field#0") local_unnamed_addr {
entry:
  %0 = tail call i8* @wybe_malloc(i32 16)
  %1 = bitcast i8* %0 to i64*
  %2 = bitcast i64* %"$rec#0" to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i32(i8* %0, i8* %2, i32 16, i1 false)
  %3 = getelementptr i8, i8* %0, i64 8
  %4 = bitcast i8* %3 to i64*
  store i64 %"$field#0", i64* %4, align 4
  ret i64* %1
}

attributes #0 = { norecurse nounwind readnone }
attributes #1 = { norecurse nounwind readonly }

