======================================================================
AFTER EVERYTHING:
 Module alias4
  public submods  : 
  public types    : 
  public resources: 
  public procs    : alias4.<0>
                    alias4.bar<0>
                    alias4.replicate1<0>
  imports         : use position
                    use wybe
  types           : 
  resources       : 
  procs           : 

*main* > public inline (0 calls)
0: (argc#0:wybe.int, [?argc#0:wybe.int], argv#0:wybe.int, [?argv#0:wybe.int], exit_code#0:wybe.int, [?exit_code#0:wybe.int], io#0:phantom, ?io#1:phantom): AliasPairs: []
    alias4.bar<0>(~#io#0:phantom, ?#io#1:phantom) @alias4:32:2


bar > public (1 calls)
0: bar(io#0:phantom, ?io#11:phantom): AliasPairs: []
    foreign lpvm alloc(16:wybe.int, ?tmp$3#0:position.position)
    foreign lpvm mutate(~tmp$3#0:position.position, ?tmp$4#0:position.position, 16:wybe.int, 0:wybe.int, 1:wybe.int, 100:wybe.int)
    foreign lpvm mutate(~tmp$4#0:position.position, ?tmp$0#0:position.position, 16:wybe.int, 8:wybe.int, 1:wybe.int, 100:wybe.int)
    alias4.replicate1<0>(tmp$0#0:position.position, ?p2#0:position.position, ~#io#0:phantom, ?#io#1:phantom) @alias4:15:4
    foreign c print_string("--- After calling replicate1: ":wybe.string, ~#io#1:phantom, ?tmp$7#0:phantom) @wybe:nn:nn
    foreign c putchar('\n':wybe.char, ~tmp$7#0:phantom, ?#io#2:phantom) @wybe:nn:nn
    foreign c print_string("expect p1(100,100):":wybe.string, ~#io#2:phantom, ?#io#3:phantom) @wybe:nn:nn
    position.printPosition<0>(tmp$0#0:position.position, ~#io#3:phantom, ?#io#4:phantom) @alias4:19:4
    foreign c print_string("expect p2(100,200):":wybe.string, ~#io#4:phantom, ?#io#5:phantom) @wybe:nn:nn
    position.printPosition<0>(p2#0:position.position, ~#io#5:phantom, ?#io#6:phantom) @alias4:21:4
    foreign lpvm mutate(~tmp$0#0:position.position, ?%p1#1:position.position, 16:wybe.int, 0:wybe.int, 0:wybe.int, 555:wybe.int)
    foreign c print_string("--- After calling x(!p1, 555): ":wybe.string, ~#io#6:phantom, ?tmp$16#0:phantom) @wybe:nn:nn
    foreign c putchar('\n':wybe.char, ~tmp$16#0:phantom, ?#io#7:phantom) @wybe:nn:nn
    foreign c print_string("expect p1(555,100):":wybe.string, ~#io#7:phantom, ?#io#8:phantom) @wybe:nn:nn
    position.printPosition<0>(~p1#1:position.position, ~#io#8:phantom, ?#io#9:phantom) @alias4:27:4
    foreign c print_string("expect p2(100,200):":wybe.string, ~#io#9:phantom, ?#io#10:phantom) @wybe:nn:nn
    position.printPosition<0>(~p2#0:position.position, ~#io#10:phantom, ?#io#11:phantom) @alias4:29:4


replicate1 > public (1 calls)
0: replicate1(p1#0:position.position, ?p2#0:position.position, io#0:phantom, ?io#2:phantom): AliasPairs: []
    foreign lpvm alloc(16:wybe.int, ?tmp$6#0:position.position)
    foreign lpvm mutate(~tmp$6#0:position.position, ?tmp$7#0:position.position, 16:wybe.int, 0:wybe.int, 1:wybe.int, 0:wybe.int)
    foreign lpvm mutate(~tmp$7#0:position.position, ?tmp$0#0:position.position, 16:wybe.int, 8:wybe.int, 1:wybe.int, 0:wybe.int)
    foreign c print_string("random replicate1":wybe.string, ~#io#0:phantom, ?tmp$10#0:phantom) @wybe:nn:nn
    foreign c putchar('\n':wybe.char, ~tmp$10#0:phantom, ?#io#1:phantom) @wybe:nn:nn
    foreign lpvm access(~tmp$0#0:position.position, 0:wybe.int, ?tmp$1#0:wybe.int)
    foreign c print_int(~tmp$1#0:wybe.int, ~#io#1:phantom, ?tmp$14#0:phantom) @wybe:nn:nn
    foreign c putchar('\n':wybe.char, ~tmp$14#0:phantom, ?#io#2:phantom) @wybe:nn:nn
    foreign lpvm access(~p1#0:position.position, 0:wybe.int, ?tmp$3#0:wybe.int)
    foreign lpvm alloc(16:wybe.int, ?tmp$18#0:position.position)
    foreign lpvm mutate(~tmp$18#0:position.position, ?tmp$19#0:position.position, 16:wybe.int, 0:wybe.int, 1:wybe.int, ~tmp$3#0:wybe.int)
    foreign lpvm mutate(~tmp$19#0:position.position, ?p2#0:position.position, 16:wybe.int, 8:wybe.int, 1:wybe.int, 200:wybe.int)

  LLVM code       :

; ModuleID = 'alias4'


 


declare external ccc  void @"position.printPosition<0>"(i64*)    


declare external ccc  void @print_string(i8*)    


declare external ccc  void @putchar(i8)    


@alias4.18 =    constant [20 x i8] c"expect p2(100,200):\00"


@alias4.17 =    constant [20 x i8] c"expect p1(555,100):\00"


@alias4.16 =    constant [32 x i8] c"--- After calling x(!p1, 555): \00"


@alias4.9 =    constant [20 x i8] c"expect p2(100,200):\00"


@alias4.8 =    constant [20 x i8] c"expect p1(100,100):\00"


@alias4.7 =    constant [31 x i8] c"--- After calling replicate1: \00"


declare external ccc  void @print_int(i64)    


@alias4.25 =    constant [18 x i8] c"random replicate1\00"


declare external ccc  i8* @wybe_malloc(i32)    


declare external ccc  void @llvm.memcpy.p0i8.p0i8.i32(i8*, i8*, i32, i32, i1)    


define external ccc  void @"alias4.<0>"(i64  %"argc#0", i64  %"argv#0", i64  %"exit_code#0")    {
entry:
  tail call ccc  void  @"alias4.bar<0>"()  
  ret void 
}


define external ccc  void @"alias4.bar<0>"()    {
entry:
  %1 = tail call ccc  i8*  @wybe_malloc(i32  16)  
  %2 = bitcast i8* %1 to i64* 
  %3 = bitcast i64* %2 to i64* 
  %4 = getelementptr  i64, i64* %3, i64 0 
  store  i64 100, i64* %4 
  %5 = bitcast i64* %2 to i64* 
  %6 = getelementptr  i64, i64* %5, i64 1 
  store  i64 100, i64* %6 
  %"p2#0" = tail call ccc  i64*  @"alias4.replicate1<0>"(i64*  %2)  
  tail call ccc  void  @print_string(i8*  getelementptr inbounds ([31 x i8], [31 x i8]* @alias4.7, i32 0, i32 0))  
  tail call ccc  void  @putchar(i8  10)  
  tail call ccc  void  @print_string(i8*  getelementptr inbounds ([20 x i8], [20 x i8]* @alias4.8, i32 0, i32 0))  
  tail call ccc  void  @"position.printPosition<0>"(i64*  %2)  
  tail call ccc  void  @print_string(i8*  getelementptr inbounds ([20 x i8], [20 x i8]* @alias4.9, i32 0, i32 0))  
  tail call ccc  void  @"position.printPosition<0>"(i64*  %"p2#0")  
  %10 = tail call ccc  i8*  @wybe_malloc(i32  16)  
  %11 = bitcast i8* %10 to i64* 
  %12 = bitcast i64* %11 to i8* 
  %13 = bitcast i64* %2 to i8* 
  tail call ccc  void  @llvm.memcpy.p0i8.p0i8.i32(i8*  %12, i8*  %13, i32  16, i32  8, i1  0)  
  %14 = bitcast i64* %11 to i64* 
  %15 = getelementptr  i64, i64* %14, i64 0 
  store  i64 555, i64* %15 
  tail call ccc  void  @print_string(i8*  getelementptr inbounds ([32 x i8], [32 x i8]* @alias4.16, i32 0, i32 0))  
  tail call ccc  void  @putchar(i8  10)  
  tail call ccc  void  @print_string(i8*  getelementptr inbounds ([20 x i8], [20 x i8]* @alias4.17, i32 0, i32 0))  
  tail call ccc  void  @"position.printPosition<0>"(i64*  %11)  
  tail call ccc  void  @print_string(i8*  getelementptr inbounds ([20 x i8], [20 x i8]* @alias4.18, i32 0, i32 0))  
  tail call ccc  void  @"position.printPosition<0>"(i64*  %"p2#0")  
  ret void 
}


define external ccc  i64* @"alias4.replicate1<0>"(i64*  %"p1#0")    {
entry:
  %19 = tail call ccc  i8*  @wybe_malloc(i32  16)  
  %20 = bitcast i8* %19 to i64* 
  %21 = bitcast i64* %20 to i64* 
  %22 = getelementptr  i64, i64* %21, i64 0 
  store  i64 0, i64* %22 
  %23 = bitcast i64* %20 to i64* 
  %24 = getelementptr  i64, i64* %23, i64 1 
  store  i64 0, i64* %24 
  tail call ccc  void  @print_string(i8*  getelementptr inbounds ([18 x i8], [18 x i8]* @alias4.25, i32 0, i32 0))  
  tail call ccc  void  @putchar(i8  10)  
  %26 = bitcast i64* %20 to i64* 
  %27 = getelementptr  i64, i64* %26, i64 0 
  %28 = load  i64, i64* %27 
  tail call ccc  void  @print_int(i64  %28)  
  tail call ccc  void  @putchar(i8  10)  
  %29 = bitcast i64* %"p1#0" to i64* 
  %30 = getelementptr  i64, i64* %29, i64 0 
  %31 = load  i64, i64* %30 
  %32 = tail call ccc  i8*  @wybe_malloc(i32  16)  
  %33 = bitcast i8* %32 to i64* 
  %34 = bitcast i64* %33 to i64* 
  %35 = getelementptr  i64, i64* %34, i64 0 
  store  i64 %31, i64* %35 
  %36 = bitcast i64* %33 to i64* 
  %37 = getelementptr  i64, i64* %36, i64 1 
  store  i64 200, i64* %37 
  ret i64* %33 
}
--------------------------------------------------
 Module position
  public submods  : 
  public types    : position: (position.position,"pointer")
  public resources: 
  public procs    : position.printPosition<0>
                    position.position.=<0>
                    position.position.position<0>
                    position.position.position<1>
                    position.position.x<0>
                    position.position.x<1>
                    position.position.y<0>
                    position.position.y<1>
  imports         : public use position.position
                    use wybe
  types           : position/0 (pointer)  @position:1:5
  resources       : 
  submodules      : position.position
  procs           : 

printPosition > public (0 calls)
0: printPosition(pos#0:position.position, io#0:phantom, ?io#5:phantom): AliasPairs: []
    foreign c print_string(" (":wybe.string, ~#io#0:phantom, ?#io#1:phantom) @wybe:nn:nn
    foreign lpvm access(pos#0:position.position, 0:wybe.int, ?tmp$0#0:wybe.int)
    foreign c print_int(~tmp$0#0:wybe.int, ~#io#1:phantom, ?#io#2:phantom) @wybe:nn:nn
    foreign c print_string(",":wybe.string, ~#io#2:phantom, ?#io#3:phantom) @wybe:nn:nn
    foreign lpvm access(~pos#0:position.position, 8:wybe.int, ?tmp$1#0:wybe.int)
    foreign c print_int(~tmp$1#0:wybe.int, ~#io#3:phantom, ?#io#4:phantom) @wybe:nn:nn
    foreign c print_string(")":wybe.string, ~#io#4:phantom, ?tmp$14#0:phantom) @wybe:nn:nn
    foreign c putchar('\n':wybe.char, ~tmp$14#0:phantom, ?#io#5:phantom) @wybe:nn:nn

  LLVM code       :

; ModuleID = 'position'


 


declare external ccc  void @putchar(i8)    


declare external ccc  void @print_string(i8*)    


declare external ccc  void @print_int(i64)    


@position.9 =    constant [2 x i8] c")\00"


@position.5 =    constant [2 x i8] c",\00"


@position.1 =    constant [3 x i8] c" (\00"


declare external ccc  i8* @wybe_malloc(i32)    


declare external ccc  void @llvm.memcpy.p0i8.p0i8.i32(i8*, i8*, i32, i32, i1)    


define external ccc  void @"position.printPosition<0>"(i64*  %"pos#0")    {
entry:
  tail call ccc  void  @print_string(i8*  getelementptr inbounds ([3 x i8], [3 x i8]* @position.1, i32 0, i32 0))  
  %2 = bitcast i64* %"pos#0" to i64* 
  %3 = getelementptr  i64, i64* %2, i64 0 
  %4 = load  i64, i64* %3 
  tail call ccc  void  @print_int(i64  %4)  
  tail call ccc  void  @print_string(i8*  getelementptr inbounds ([2 x i8], [2 x i8]* @position.5, i32 0, i32 0))  
  %6 = bitcast i64* %"pos#0" to i64* 
  %7 = getelementptr  i64, i64* %6, i64 1 
  %8 = load  i64, i64* %7 
  tail call ccc  void  @print_int(i64  %8)  
  tail call ccc  void  @print_string(i8*  getelementptr inbounds ([2 x i8], [2 x i8]* @position.9, i32 0, i32 0))  
  tail call ccc  void  @putchar(i8  10)  
  ret void 
}
--------------------------------------------------
 Module position.position([])
  public submods  : 
  public types    : 
  public resources: 
  public procs    : position.position.=<0>
                    position.position.position<0>
                    position.position.position<1>
                    position.position.x<0>
                    position.position.x<1>
                    position.position.y<0>
                    position.position.y<1>
  imports         : use position
                    use wybe
  types           : 
  resources       : 
  procs           : 

= > public inline test (3 calls)
0: =($left#0:position.position, $right#0:position.position, ?$$#0:wybe.bool): AliasPairs: []
    foreign lpvm access($left#0:position.position, 0:wybe.int, ?$left$x#0:wybe.int)
    foreign lpvm access(~$left#0:position.position, 8:wybe.int, ?$left$y#0:wybe.int)
    foreign lpvm access($right#0:position.position, 0:wybe.int, ?$right$x#0:wybe.int)
    foreign lpvm access(~$right#0:position.position, 8:wybe.int, ?$right$y#0:wybe.int)
    foreign llvm icmp eq(~$left$x#0:wybe.int, ~$right$x#0:wybe.int, ?tmp$2#0:wybe.bool) @wybe:nn:nn
    case ~tmp$2#0:wybe.bool of
    0:
        foreign llvm move(0:wybe.bool, ?$$#0:wybe.bool)

    1:
        foreign llvm icmp eq(~$left$y#0:wybe.int, ~$right$y#0:wybe.int, ?$$#0:wybe.bool) @wybe:nn:nn



position > public inline (0 calls)
0: position(x#0:wybe.int, y#0:wybe.int, ?$#0:position.position): AliasPairs: []
    foreign lpvm alloc(16:wybe.int, ?$rec#0:position.position)
    foreign lpvm mutate(~%$rec#0:position.position, ?%$rec#1:position.position, 16:wybe.int, 0:wybe.int, 1:wybe.int, ~x#0:wybe.int)
    foreign lpvm mutate(~%$rec#1:position.position, ?%$#0:position.position, 16:wybe.int, 8:wybe.int, 1:wybe.int, ~y#0:wybe.int)
position > public inline (4 calls)
1: position(?x#0:wybe.int, ?y#0:wybe.int, $#0:position.position): AliasPairs: []
    foreign lpvm access($#0:position.position, 0:wybe.int, ?x#0:wybe.int)
    foreign lpvm access(~$#0:position.position, 8:wybe.int, ?y#0:wybe.int)


x > public inline (0 calls)
0: x($rec#0:position.position, ?$#0:wybe.int): AliasPairs: []
    foreign lpvm access(~$rec#0:position.position, 0:wybe.int, ?$#0:wybe.int)
x > public inline (0 calls)
1: x($rec#0:position.position, ?$rec#1:position.position, $field#0:wybe.int): AliasPairs: []
    foreign lpvm mutate(~%$rec#0:position.position, ?%$rec#1:position.position, 16:wybe.int, 0:wybe.int, 0:wybe.int, ~$field#0:wybe.int)


y > public inline (0 calls)
0: y($rec#0:position.position, ?$#0:wybe.int): AliasPairs: []
    foreign lpvm access(~$rec#0:position.position, 8:wybe.int, ?$#0:wybe.int)
y > public inline (0 calls)
1: y($rec#0:position.position, ?$rec#1:position.position, $field#0:wybe.int): AliasPairs: []
    foreign lpvm mutate(~%$rec#0:position.position, ?%$rec#1:position.position, 16:wybe.int, 8:wybe.int, 0:wybe.int, ~$field#0:wybe.int)

  LLVM code       :

; ModuleID = 'position.position'


 


declare external ccc  i8* @wybe_malloc(i32)    


declare external ccc  void @llvm.memcpy.p0i8.p0i8.i32(i8*, i8*, i32, i32, i1)    


define external ccc  i1 @"position.position.=<0>"(i64*  %"$left#0", i64*  %"$right#0")    {
entry:
  %1 = bitcast i64* %"$left#0" to i64* 
  %2 = getelementptr  i64, i64* %1, i64 0 
  %3 = load  i64, i64* %2 
  %4 = bitcast i64* %"$left#0" to i64* 
  %5 = getelementptr  i64, i64* %4, i64 1 
  %6 = load  i64, i64* %5 
  %7 = bitcast i64* %"$right#0" to i64* 
  %8 = getelementptr  i64, i64* %7, i64 0 
  %9 = load  i64, i64* %8 
  %10 = bitcast i64* %"$right#0" to i64* 
  %11 = getelementptr  i64, i64* %10, i64 1 
  %12 = load  i64, i64* %11 
  %"tmp$2#0" = icmp eq i64 %3, %9 
  br i1 %"tmp$2#0", label %if.then, label %if.else 
if.then:
  %"$$#0" = icmp eq i64 %6, %12 
  ret i1 %"$$#0" 
if.else:
  ret i1 0 
}


define external ccc  i64* @"position.position.position<0>"(i64  %"x#0", i64  %"y#0")    {
entry:
  %13 = tail call ccc  i8*  @wybe_malloc(i32  16)  
  %14 = bitcast i8* %13 to i64* 
  %15 = bitcast i64* %14 to i64* 
  %16 = getelementptr  i64, i64* %15, i64 0 
  store  i64 %"x#0", i64* %16 
  %17 = bitcast i64* %14 to i64* 
  %18 = getelementptr  i64, i64* %17, i64 1 
  store  i64 %"y#0", i64* %18 
  ret i64* %14 
}


define external ccc  {i64, i64} @"position.position.position<1>"(i64*  %"$#0")    {
entry:
  %19 = bitcast i64* %"$#0" to i64* 
  %20 = getelementptr  i64, i64* %19, i64 0 
  %21 = load  i64, i64* %20 
  %22 = bitcast i64* %"$#0" to i64* 
  %23 = getelementptr  i64, i64* %22, i64 1 
  %24 = load  i64, i64* %23 
  %25 = insertvalue {i64, i64} undef, i64 %21, 0 
  %26 = insertvalue {i64, i64} %25, i64 %24, 1 
  ret {i64, i64} %26 
}


define external ccc  i64 @"position.position.x<0>"(i64*  %"$rec#0")    {
entry:
  %27 = bitcast i64* %"$rec#0" to i64* 
  %28 = getelementptr  i64, i64* %27, i64 0 
  %29 = load  i64, i64* %28 
  ret i64 %29 
}


define external ccc  i64* @"position.position.x<1>"(i64*  %"$rec#0", i64  %"$field#0")    {
entry:
  %30 = tail call ccc  i8*  @wybe_malloc(i32  16)  
  %31 = bitcast i8* %30 to i64* 
  %32 = bitcast i64* %31 to i8* 
  %33 = bitcast i64* %"$rec#0" to i8* 
  tail call ccc  void  @llvm.memcpy.p0i8.p0i8.i32(i8*  %32, i8*  %33, i32  16, i32  8, i1  0)  
  %34 = bitcast i64* %31 to i64* 
  %35 = getelementptr  i64, i64* %34, i64 0 
  store  i64 %"$field#0", i64* %35 
  ret i64* %31 
}


define external ccc  i64 @"position.position.y<0>"(i64*  %"$rec#0")    {
entry:
  %36 = bitcast i64* %"$rec#0" to i64* 
  %37 = getelementptr  i64, i64* %36, i64 1 
  %38 = load  i64, i64* %37 
  ret i64 %38 
}


define external ccc  i64* @"position.position.y<1>"(i64*  %"$rec#0", i64  %"$field#0")    {
entry:
  %39 = tail call ccc  i8*  @wybe_malloc(i32  16)  
  %40 = bitcast i8* %39 to i64* 
  %41 = bitcast i64* %40 to i8* 
  %42 = bitcast i64* %"$rec#0" to i8* 
  tail call ccc  void  @llvm.memcpy.p0i8.p0i8.i32(i8*  %41, i8*  %42, i32  16, i32  8, i1  0)  
  %43 = bitcast i64* %40 to i64* 
  %44 = getelementptr  i64, i64* %43, i64 1 
  store  i64 %"$field#0", i64* %44 
  ret i64* %40 
}
