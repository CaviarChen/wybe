-*- mode: text -*-

Fix bugs:


Documentation:
o Write Wybe intro
o Write setup/build/install document

Complete the implementation:
o Support many non-constant constructors
o Ensure a variable both assigned and used in a statement has the assignment
  happen first, wherever it appears in the statement
o Support versioning for libraries
o Support auto-download for libraries (with sandboxing?)

Error checking:
o Error if foreign call has no outputs; suggest use !I/O.
o Ensure no statement binds the same variable multiple times

Improve error handling:
o Give meaningful message for errors detected in generated procs
o Detect and report use of uninitialised variables, including update
   of uninitialised variables
o Type and mode check foreign call arguments for llvm and lpvm calls;
  don't abort compiler on errors.

Complete the language:
o Support higher order procs and functions through multiple specialisation
o Fix the syntax!
    o At expression level, support infix ops, where the ops are sequences of
      operator characters
    o At statement level, support brace-enclosed statement sequence as statement
    o Interpolation (string and array)
        o "...@foo..." = "..." ++ foo ++ "..."
	o "...@(foo(bar,baz))..." = "..." ++ foo(bar,baz) ++ "..."
	o [foo,@bar(baz),zip] = [foo] ++ bar(baz) ++ [zip]
	o if ++ can run backwards, then [?foo,@?bar] and [@?foo,bar] can be patterns
	o with this, no need for [ ... | ...] syntax
o Provide scoped way to set resources
o Provide way to give top-level initial value to resources
o Support polymorphism
o Provide switch-on-constructor syntax and implementation
o Support subtypes
o Support generators (lazy lists)
o Support declared laziness through multiple specialisation
o Support optional and named arguments
o Support generators (nondet procs)
o Support "commutative" resources, which don't need to be threaded everywhere


Library:
o Implement decent string type


Optimise:
o Keep track of bounds on tags to avoid unnecessary tests and allow tag switches
o Eliminate remaining redundant (final) variable-variable moves
o Eliminate round trip cast to and from int
o Remove unneeded input and unchanged output arguments
o Inter-procedure common sub-expression elimination
o Code hoisting
o Destructive update transformation (CTGC)
o delay statements until their outputs are needed
    o delay into one arm of a branch if only one arm needs the outputs


Build System:
o Record procs before inlining to allow rebuild when dependencies change


Blocks:
o add Procedure id for global module level procedures
o Insert target triple into the definition of LLVMAST.Module during
  creation.


Emit:
o Improve Logging


Make:
o Add creation of cabal sandbox and dependency install 


Porting:
o to Linux
o to Windows
o Rewrite compiler in Wybe
