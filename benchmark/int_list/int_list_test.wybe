use int_list


def test_int_list(x:int_list, y:int_list, z:int_list) use !io {
    reverse(!x)
    reverse(!z)
    ?y = append(y, 99)
    !println("-")
    !println(x)
    !println(y)
    !println(z)

    ?l = extend(x, y)
    ?l = extend(l, z)
    !println("-")
    !println(l)

    ?l = insert(l, 4, 78)
    ?l = pop(l, 20)
    ?l = remove(l, 2)
    !println("-")
    !println(l)

    sort(!l)
    !println("-")
    !println(l)
}

# build list
!malloc_count(?mc1)
?x = range(1, 10000, 1)
?y = range(2, 20000, 2)
?z = range(3, 30000, 3)
!println("x y z:")
!println(x)
!println(y)
!println(z)
!malloc_count(?mc2)
?mc_build = mc2 - mc1



!println("--------------------")
!println("tests with alias")
!malloc_count(?mc1)
!test_int_list(x, y, z)
!malloc_count(?mc2)
?mc_test_aliased = mc2 - mc1
!println("original x y z:")
!println(x)
!println(y)
!println(z)
!println("--------------------")


!println("--------------------")
!println("tests without alias")
!malloc_count(?mc1)
!test_int_list(x, y, z)
!malloc_count(?mc2)
?mc_test_not_aliased = mc2 - mc1
!println("--------------------")


!print(" ** malloc count of building lists: ")
!println(mc_build)
!print(" ** malloc count of test(aliased): ")
!println(mc_test_aliased)
!print(" ** malloc count of test(non-aliased): ")
!println(mc_test_not_aliased)
