[1mAST[0m: Get loaded module wybe
[1mAST[0m:  got nothing!
[1mBuilder[0m: module wybe is not yet loaded
[1mBuilder[0m: [ S: wybelibs/wybe.wybe
[1mBuilder[0m: | O: wybelibs/wybe.o
[1mBuilder[0m: | D: NIL
[1mBuilder[0m: | A: NIL
[1mBuilder[0m: ]
[1mBuilder[0m: === ??? Trying to load LPVM Module(s) from wybelibs/wybe.o
[1mBuilder[0m: Decoding successful!
[1mBuilder[0m: === >>> Extracted Module bytes from "wybelibs/wybe.o"
[1mBuilder[0m: === >>> Found modules: wybe, wybe.bool, wybe.char, wybe.float, wybe.int, wybe.io, wybe.phantom, wybe.string
[1mBuilder[0m: === >>> Building dependencies: wybe.bool, wybe.char, wybe.float, wybe.int, wybe.io, wybe.phantom, wybe.string, wybe, wybe, wybe, wybe, wybe, wybe, wybe
[1mBuilder[0m: Load dependency: wybe.bool
[1mAST[0m: Get loaded module wybe.bool
[1mAST[0m:  worked
[1mBuilder[0m: module wybe.bool is already loaded
[1mBuilder[0m: Load dependency: wybe.char
[1mAST[0m: Get loaded module wybe.char
[1mAST[0m:  worked
[1mBuilder[0m: module wybe.char is already loaded
[1mBuilder[0m: Load dependency: wybe.float
[1mAST[0m: Get loaded module wybe.float
[1mAST[0m:  worked
[1mBuilder[0m: module wybe.float is already loaded
[1mBuilder[0m: Load dependency: wybe.int
[1mAST[0m: Get loaded module wybe.int
[1mAST[0m:  worked
[1mBuilder[0m: module wybe.int is already loaded
[1mBuilder[0m: Load dependency: wybe.io
[1mAST[0m: Get loaded module wybe.io
[1mAST[0m:  worked
[1mBuilder[0m: module wybe.io is already loaded
[1mBuilder[0m: Load dependency: wybe.phantom
[1mAST[0m: Get loaded module wybe.phantom
[1mAST[0m:  worked
[1mBuilder[0m: module wybe.phantom is already loaded
[1mBuilder[0m: Load dependency: wybe.string
[1mAST[0m: Get loaded module wybe.string
[1mAST[0m:  worked
[1mBuilder[0m: module wybe.string is already loaded
[1mBuilder[0m: Load dependency: wybe
[1mBuilder[0m: Load dependency: wybe
[1mBuilder[0m: Load dependency: wybe
[1mBuilder[0m: Load dependency: wybe
[1mBuilder[0m: Load dependency: wybe
[1mBuilder[0m: Load dependency: wybe
[1mBuilder[0m: Load dependency: wybe
[1mBuilder[0m: === <<< Extracted Module put in it's place from "wybelibs/wybe.o"
[1mAST[0m: Get loaded module main_hello
[1mAST[0m:  got nothing!
[1mBuilder[0m: module main_hello is not yet loaded
[1mBuilder[0m: [ S: test-cases/main_hello.wybe
[1mBuilder[0m: | O: test-cases/main_hello.o
[1mBuilder[0m: | D: NIL
[1mBuilder[0m: | A: NIL
[1mBuilder[0m: ]
[1mBuilder[0m: ===> Compiling module main_hello
[1mAST[0m: Entering module main_hello
[1mBuilder[0m: HASH: 2a7a912c6ae16d922b12266f6cc6356b7b7155f9
[1mAST[0m: Noting import of command_line, NOT currently being loaded, into main_hello
[1mAST[0m: Noting import of wybe, NOT currently being loaded, into main_hello
[1mBuilder[0m: building dependencies: command_line, wybe
[1mBuilder[0m: Load dependency: command_line
[1mAST[0m: Get loaded module command_line
[1mAST[0m:  got nothing!
[1mBuilder[0m: module command_line is not yet loaded
[1mBuilder[0m: [ S: wybelibs/command_line.wybe
[1mBuilder[0m: | O: wybelibs/command_line.o
[1mBuilder[0m: | D: NIL
[1mBuilder[0m: | A: NIL
[1mBuilder[0m: ]
[1mBuilder[0m: === ??? Trying to load LPVM Module(s) from wybelibs/command_line.o
[1mBuilder[0m: Decoding successful!
[1mBuilder[0m: === >>> Extracted Module bytes from "wybelibs/command_line.o"
[1mBuilder[0m: === >>> Found modules: command_line
[1mBuilder[0m: === >>> Building dependencies: wybe
[1mBuilder[0m: Load dependency: wybe
[1mAST[0m: Get loaded module wybe
[1mAST[0m:  worked
[1mBuilder[0m: module wybe is already loaded
[1mBuilder[0m: === <<< Extracted Module put in it's place from "wybelibs/command_line.o"
[1mBuilder[0m: Load dependency: wybe
[1mAST[0m: Get loaded module wybe
[1mAST[0m:  worked
[1mBuilder[0m: module wybe is already loaded
[1mAST[0m: Exiting module main_hello with imports:
[1mAST[0m:         use command_line
[1mAST[0m:         use wybe
[1mAST[0m: Exiting module main_hello
[1mAST[0m:     loadNum = 9, minDependencyNum = 9
[1mAST[0m: finished with module SCC main_hello
[1mAST[0m: remaining deferred modules: 
[1mBuilder[0m: <=== finished compling module main_hello
[1mBuilder[0m: compileModSCC: [main_hello]
[1mAST[0m: finding module main_hello
[1mAST[0m: found 0 matching modules under compilation
[1mAST[0m: found it
[1mAST[0m: Get loaded module command_line
[1mAST[0m:  worked
[1mAST[0m: Get loaded module wybe
[1mAST[0m:  worked
[1mAST[0m: Get loaded module wybe.bool
[1mAST[0m:  worked
[1mAST[0m: Get loaded module wybe.char
[1mAST[0m:  worked
[1mAST[0m: Get loaded module wybe.float
[1mAST[0m:  worked
[1mAST[0m: Get loaded module wybe.int
[1mAST[0m:  worked
[1mAST[0m: Get loaded module wybe.io
[1mAST[0m:  worked
[1mAST[0m: Get loaded module wybe.phantom
[1mAST[0m:  worked
[1mAST[0m: Get loaded module wybe.string
[1mAST[0m:  worked
[1mAST[0m: Get loaded module command_line
[1mAST[0m:  worked
[1mAST[0m: Get loaded module wybe
[1mAST[0m:  worked
[1mAST[0m: Get loaded module wybe.bool
[1mAST[0m:  worked
[1mAST[0m: Get loaded module wybe.char
[1mAST[0m:  worked
[1mAST[0m: Get loaded module wybe.float
[1mAST[0m:  worked
[1mAST[0m: Get loaded module wybe.int
[1mAST[0m:  worked
[1mAST[0m: Get loaded module wybe.io
[1mAST[0m:  worked
[1mAST[0m: Get loaded module wybe.phantom
[1mAST[0m:  worked
[1mAST[0m: Get loaded module wybe.string
[1mAST[0m:  worked
[1mAST[0m: Adding definition of main_hello.<0>:
[1mAST[0m: *main* > public (0 calls)
[1mAST[0m: 4: () use !command_line.argc, !command_line.argv, !command_line.exit_code, !wybe.io.io:
[1mAST[0m:     foreign llvm move(42 @main_hello:3:16, ?exit_code @main_hello:3:1)
[1mAST[0m:     !println("hello, world!" @main_hello:4:10)
[1mAST[0m:     !print(argc @main_hello:5:8)
[1mAST[0m:     !print(" command line arguments" @main_hello:6:8)
======================================================================
AFTER FLATTENING:
 Module command_line
  public submods  : 
  public types    : 
  public resources: argc: command_line.argc
                    argv: command_line.argv
                    exit_code: command_line.exit_code
  public procs    : 
  imports         : use wybe
  types           : 
  resources       : argc: fromList [(command_line.argc,Just wybe.int @command_line:2:8)] @command_line:2:8
                    argv: fromList [(command_line.argv,Just wybe.int @command_line:3:8)] @command_line:3:8
                    exit_code: fromList [(command_line.exit_code,Just wybe.int @command_line:4:8)] @command_line:4:8
  procs           : 


  LLVM code       :

; ModuleID = 'command_line'


declare external ccc i8* @wybe_malloc(i32)
--------------------------------------------------
 Module main_hello
  public submods  : 
  public types    : 
  public resources: 
  public procs    : main_hello.<0>
  imports         : use command_line
                    use wybe
  types           : 
  resources       : 
  procs           : 

*main* > public (0 calls)
0: () use !command_line.argc, !command_line.argv, !command_line.exit_code, !wybe.io.io:
    foreign llvm move(42 @main_hello:3:16, ?exit_code @main_hello:3:1)
    !println("hello, world!" @main_hello:4:10)
    !print(argc @main_hello:5:8)
    !print(" command line arguments" @main_hello:6:8)

No LLVM code

[1mAST[0m: finding module main_hello
[1mAST[0m: found 0 matching modules under compilation
[1mAST[0m: found it
[1mAST[0m: Handle importation from command_line into main_hello:  use command_line
[1mAST[0m: Get loaded module command_line
[1mAST[0m:  worked
[1mAST[0m:     importing types    : 
[1mAST[0m:     importing resources: argc, argv, exit_code
[1mAST[0m:     importing procs    : 
[1mAST[0m: Handle importation from wybe into main_hello:  use wybe
[1mAST[0m: Get loaded module wybe
[1mAST[0m:  worked
[1mAST[0m:     importing types    : bool, char, float, int, phantom, string
[1mAST[0m:     importing resources: io
[1mAST[0m:     importing procs    : , *, +, -, /, /=, <, <=, =, >, >=, and, decr, false, incr, nl, not, or, power, print, println, read, sqrt, true
[1mBuilder[0m: ======================================================================
[1mBuilder[0m: resource and type checking module(s) main_hello...
[1mTypes[0m: **** Validating parameter types in module main_hello
[1mAST[0m: finding module main_hello
[1mAST[0m: found 0 matching modules under compilation
[1mAST[0m: found it
[1mTypes[0m: Validating def of 
[1mTypes[0m: **** Exiting module main_hello
[1mAST[0m: finding module main_hello
[1mAST[0m: found 0 matching modules under compilation
[1mAST[0m: found it
[1mTypes[0m: **** Type checking module main_hello
[1mAST[0m: finding module main_hello
[1mAST[0m: found 0 matching modules under compilation
[1mAST[0m: found it
[1mTypes[0m: **** Strongly connected components:
[1mTypes[0m:     
[1mTypes[0m: Type checking non-recursive proc 
[1mTypes[0m: ** Type checking decl of proc 
[1mAST[0m: Looking up resource command_line.argc
[1mAST[0m: Finding visible symbol command_line.argc from module main_hello
[1mAST[0m: *** ALL visible modules: command_line
[1mAST[0m: Candidates: fromList [command_line.argc]
[1mAST[0m: Get loaded module command_line
[1mAST[0m:  worked
[1mAST[0m: Looking up resource command_line.argv
[1mAST[0m: Finding visible symbol command_line.argv from module main_hello
[1mAST[0m: *** ALL visible modules: command_line
[1mAST[0m: Candidates: fromList [command_line.argv]
[1mAST[0m: Get loaded module command_line
[1mAST[0m:  worked
[1mAST[0m: Looking up resource command_line.exit_code
[1mAST[0m: Finding visible symbol command_line.exit_code from module main_hello
[1mAST[0m: *** ALL visible modules: command_line
[1mAST[0m: Candidates: fromList [command_line.exit_code]
[1mAST[0m: Get loaded module command_line
[1mAST[0m:  worked
[1mAST[0m: Looking up resource wybe.io.io
[1mAST[0m: Finding visible symbol wybe.io.io from module main_hello
[1mAST[0m: *** ALL visible modules: wybe.io
[1mAST[0m: Candidates: fromList [wybe.io.io]
[1mAST[0m: Get loaded module wybe.io
[1mAST[0m:  worked
[1mTypes[0m: ** Type checking proc : Typing {typingDict = fromList [("argc",wybe.int),("argv",wybe.int),("exit_code",wybe.int),("io",phantom)], typingErrs = []}
[1mTypes[0m:    with resources: fromList [!command_line.argc,!command_line.argv,!command_line.exit_code,!wybe.io.io]
[1mTypes[0m:    containing calls: 
[1mTypes[0m:         foreign llvm move(42 @main_hello:3:16, ?exit_code @main_hello:3:1)
[1mTypes[0m:         !println("hello, world!" @main_hello:4:10)
[1mTypes[0m:         !print(argc @main_hello:5:8)
[1mTypes[0m:         !print(" command line arguments" @main_hello:6:8)
[1mTypes[0m: Type checking foreign instruction unifying arguments 42 @main_hello:3:16 and ?exit_code @main_hello:3:1
[1mTypes[0m: constraining var "exit_code" to type wybe.int
[1mAST[0m: Finding visible symbol println from module main_hello
[1mAST[0m: *** ALL visible modules: wybe.io
[1mAST[0m:    name 'println' for module spec '' matches: wybe.io.println<0>, wybe.io.println<1>, wybe.io.println<2>, wybe.io.println<3>, wybe.io.println<4>
[1mAST[0m: Get loaded module wybe.io
[1mAST[0m:  worked
[1mAST[0m: Get loaded module wybe.io
[1mAST[0m:  worked
[1mAST[0m: Get loaded module wybe.io
[1mAST[0m:  worked
[1mAST[0m: Get loaded module wybe.io
[1mAST[0m:  worked
[1mAST[0m: Get loaded module wybe.io
[1mAST[0m:  worked
[1mAST[0m: Get loaded module wybe.io
[1mAST[0m:  worked
[1mAST[0m: Get loaded module wybe.io
[1mAST[0m:  worked
[1mAST[0m: Get loaded module wybe.io
[1mAST[0m:  worked
[1mAST[0m: Get loaded module wybe.io
[1mAST[0m:  worked
[1mAST[0m: Get loaded module wybe.io
[1mAST[0m:  worked
[1mAST[0m: Finding visible symbol print from module main_hello
[1mAST[0m: *** ALL visible modules: wybe.io
[1mAST[0m:    name 'print' for module spec '' matches: wybe.io.print<0>, wybe.io.print<1>, wybe.io.print<2>, wybe.io.print<3>, wybe.io.print<4>
[1mAST[0m: Get loaded module wybe.io
[1mAST[0m:  worked
[1mAST[0m: Get loaded module wybe.io
[1mAST[0m:  worked
[1mAST[0m: Get loaded module wybe.io
[1mAST[0m:  worked
[1mAST[0m: Get loaded module wybe.io
[1mAST[0m:  worked
[1mAST[0m: Get loaded module wybe.io
[1mAST[0m:  worked
[1mAST[0m: Get loaded module wybe.io
[1mAST[0m:  worked
[1mAST[0m: Get loaded module wybe.io
[1mAST[0m:  worked
[1mAST[0m: Get loaded module wybe.io
[1mAST[0m:  worked
[1mAST[0m: Get loaded module wybe.io
[1mAST[0m:  worked
[1mAST[0m: Get loaded module wybe.io
[1mAST[0m:  worked
[1mAST[0m: Finding visible symbol print from module main_hello
[1mAST[0m: *** ALL visible modules: wybe.io
[1mAST[0m:    name 'print' for module spec '' matches: wybe.io.print<0>, wybe.io.print<1>, wybe.io.print<2>, wybe.io.print<3>, wybe.io.print<4>
[1mAST[0m: Get loaded module wybe.io
[1mAST[0m:  worked
[1mAST[0m: Get loaded module wybe.io
[1mAST[0m:  worked
[1mAST[0m: Get loaded module wybe.io
[1mAST[0m:  worked
[1mAST[0m: Get loaded module wybe.io
[1mAST[0m:  worked
[1mAST[0m: Get loaded module wybe.io
[1mAST[0m:  worked
[1mAST[0m: Get loaded module wybe.io
[1mAST[0m:  worked
[1mAST[0m: Get loaded module wybe.io
[1mAST[0m:  worked
[1mAST[0m: Get loaded module wybe.io
[1mAST[0m:  worked
[1mAST[0m: Get loaded module wybe.io
[1mAST[0m:  worked
[1mAST[0m: Get loaded module wybe.io
[1mAST[0m:  worked
[1mTypes[0m: Type checking call {!println("hello, world!" @main_hello:4:10)} @main_hello:4:2
[1mTypes[0m: Calling context is Det
[1mTypes[0m: Candidate types: [ProcInfo {procInfoProc = wybe.io.println<0>, procInfoArgs = [wybe.int], procInfoDetism = Det},ProcInfo {procInfoProc = wybe.io.println<1>, procInfoArgs = [wybe.float], procInfoDetism = Det},ProcInfo {procInfoProc = wybe.io.println<2>, procInfoArgs = [wybe.char], procInfoDetism = Det},ProcInfo {procInfoProc = wybe.io.println<3>, procInfoArgs = [wybe.string], procInfoDetism = Det},ProcInfo {procInfoProc = wybe.io.println<4>, procInfoArgs = [wybe.bool], procInfoDetism = Det}]
[1mTypes[0m: Actual types: [wybe.string]
[1mTypes[0m: Valid types = [[wybe.string]]
[1mTypes[0m: Converted types = [Nothing,Nothing,Nothing,Nothing,Nothing]
[1mTypes[0m: Resulting typing = Typing {typingDict = fromList [("argc",wybe.int),("argv",wybe.int),("exit_code",wybe.int),("io",phantom)], typingErrs = []}
[1mTypes[0m: Type checking call {!print(argc @main_hello:5:8)} @main_hello:5:2
[1mTypes[0m: Calling context is Det
[1mTypes[0m: Candidate types: [ProcInfo {procInfoProc = wybe.io.print<0>, procInfoArgs = [wybe.int], procInfoDetism = Det},ProcInfo {procInfoProc = wybe.io.print<1>, procInfoArgs = [wybe.float], procInfoDetism = Det},ProcInfo {procInfoProc = wybe.io.print<2>, procInfoArgs = [wybe.char], procInfoDetism = Det},ProcInfo {procInfoProc = wybe.io.print<3>, procInfoArgs = [wybe.string], procInfoDetism = Det},ProcInfo {procInfoProc = wybe.io.print<4>, procInfoArgs = [wybe.bool], procInfoDetism = Det}]
[1mTypes[0m: Actual types: [wybe.int]
[1mTypes[0m: Valid types = [[wybe.int]]
[1mTypes[0m: Converted types = [Nothing,Nothing,Nothing,Nothing,Nothing]
[1mTypes[0m: Resulting typing = Typing {typingDict = fromList [("argc",wybe.int),("argv",wybe.int),("exit_code",wybe.int),("io",phantom)], typingErrs = []}
[1mTypes[0m: Type checking call {!print(" command line arguments" @main_hello:6:8)} @main_hello:6:2
[1mTypes[0m: Calling context is Det
[1mTypes[0m: Candidate types: [ProcInfo {procInfoProc = wybe.io.print<0>, procInfoArgs = [wybe.int], procInfoDetism = Det},ProcInfo {procInfoProc = wybe.io.print<1>, procInfoArgs = [wybe.float], procInfoDetism = Det},ProcInfo {procInfoProc = wybe.io.print<2>, procInfoArgs = [wybe.char], procInfoDetism = Det},ProcInfo {procInfoProc = wybe.io.print<3>, procInfoArgs = [wybe.string], procInfoDetism = Det},ProcInfo {procInfoProc = wybe.io.print<4>, procInfoArgs = [wybe.bool], procInfoDetism = Det}]
[1mTypes[0m: Actual types: [wybe.string]
[1mTypes[0m: Valid types = [[wybe.string]]
[1mTypes[0m: Converted types = [Nothing,Nothing,Nothing,Nothing,Nothing]
[1mTypes[0m: Resulting typing = Typing {typingDict = fromList [("argc",wybe.int),("argv",wybe.int),("exit_code",wybe.int),("io",phantom)], typingErrs = []}
[1mTypes[0m: Typing independent of mode = Typing {typingDict = fromList [("argc",wybe.int),("argv",wybe.int),("exit_code",wybe.int),("io",phantom)], typingErrs = []}
[1mTypes[0m: Now mode checking
[1mTypes[0m: Mode checking foreign call {foreign llvm move(42 @main_hello:3:16, ?exit_code @main_hello:3:1)}
[1mTypes[0m:     with assigned fromList ["argc","argv","exit_code","io","phantom"]
[1mTypes[0m: New instr = {foreign llvm move(42:wybe.int @main_hello:3:16, ?exit_code:wybe.int @main_hello:3:1)}
[1mTypes[0m: New errors   = []
[1mTypes[0m: Now assigned = fromList ["argc","argv","exit_code","io","phantom"]
[1mTypes[0m: Now delayed  = []
[1mTypes[0m: Mode checking call   : {!println("hello, world!" @main_hello:4:10)}
[1mTypes[0m:     with assigned    : fromList ["argc","argv","exit_code","io","phantom"]
[1mAST[0m: Finding visible symbol println from module main_hello
[1mAST[0m: *** ALL visible modules: wybe.io
[1mAST[0m:    name 'println' for module spec '' matches: wybe.io.println<0>, wybe.io.println<1>, wybe.io.println<2>, wybe.io.println<3>, wybe.io.println<4>
[1mAST[0m: Get loaded module wybe.io
[1mAST[0m:  worked
[1mAST[0m: Get loaded module wybe.io
[1mAST[0m:  worked
[1mAST[0m: Get loaded module wybe.io
[1mAST[0m:  worked
[1mAST[0m: Get loaded module wybe.io
[1mAST[0m:  worked
[1mAST[0m: Get loaded module wybe.io
[1mAST[0m:  worked
[1mAST[0m: Get loaded module wybe.io
[1mAST[0m:  worked
[1mAST[0m: Get loaded module wybe.io
[1mAST[0m:  worked
[1mAST[0m: Get loaded module wybe.io
[1mAST[0m:  worked
[1mAST[0m: Get loaded module wybe.io
[1mAST[0m:  worked
[1mAST[0m: Get loaded module wybe.io
[1mAST[0m:  worked
[1mTypes[0m: Actual types         : [wybe.string]
[1mTypes[0m: Actual call modes    : [(ParamIn,True,Nothing)]
[1mTypes[0m: Type-correct modes   : [ProcInfo {procInfoProc = wybe.io.println<3>, procInfoArgs = [wybe.string], procInfoDetism = Det}]
[1mTypes[0m: Possible mode matches: [ProcInfo {procInfoProc = wybe.io.println<3>, procInfoArgs = [wybe.string], procInfoDetism = Det}]
[1mTypes[0m: Exact mode matches: [ProcInfo {procInfoProc = wybe.io.println<3>, procInfoArgs = [wybe.string], procInfoDetism = Det}]
[1mTypes[0m: Delay mode matches: True
[1mTypes[0m: New errors   = []
[1mTypes[0m: Now assigned = fromList ["argc","argv","exit_code","io","phantom"]
[1mTypes[0m: Now delayed  = []
[1mTypes[0m: Mode checking call   : {!print(argc @main_hello:5:8)}
[1mTypes[0m:     with assigned    : fromList ["argc","argv","exit_code","io","phantom"]
[1mAST[0m: Finding visible symbol print from module main_hello
[1mAST[0m: *** ALL visible modules: wybe.io
[1mAST[0m:    name 'print' for module spec '' matches: wybe.io.print<0>, wybe.io.print<1>, wybe.io.print<2>, wybe.io.print<3>, wybe.io.print<4>
[1mAST[0m: Get loaded module wybe.io
[1mAST[0m:  worked
[1mAST[0m: Get loaded module wybe.io
[1mAST[0m:  worked
[1mAST[0m: Get loaded module wybe.io
[1mAST[0m:  worked
[1mAST[0m: Get loaded module wybe.io
[1mAST[0m:  worked
[1mAST[0m: Get loaded module wybe.io
[1mAST[0m:  worked
[1mAST[0m: Get loaded module wybe.io
[1mAST[0m:  worked
[1mAST[0m: Get loaded module wybe.io
[1mAST[0m:  worked
[1mAST[0m: Get loaded module wybe.io
[1mAST[0m:  worked
[1mAST[0m: Get loaded module wybe.io
[1mAST[0m:  worked
[1mAST[0m: Get loaded module wybe.io
[1mAST[0m:  worked
[1mTypes[0m: Actual types         : [wybe.int]
[1mTypes[0m: Actual call modes    : [(ParamIn,True,Nothing)]
[1mTypes[0m: Type-correct modes   : [ProcInfo {procInfoProc = wybe.io.print<0>, procInfoArgs = [wybe.int], procInfoDetism = Det}]
[1mTypes[0m: Possible mode matches: [ProcInfo {procInfoProc = wybe.io.print<0>, procInfoArgs = [wybe.int], procInfoDetism = Det}]
[1mTypes[0m: Exact mode matches: [ProcInfo {procInfoProc = wybe.io.print<0>, procInfoArgs = [wybe.int], procInfoDetism = Det}]
[1mTypes[0m: Delay mode matches: True
[1mTypes[0m: New errors   = []
[1mTypes[0m: Now assigned = fromList ["argc","argv","exit_code","io","phantom"]
[1mTypes[0m: Now delayed  = []
[1mTypes[0m: Mode checking call   : {!print(" command line arguments" @main_hello:6:8)}
[1mTypes[0m:     with assigned    : fromList ["argc","argv","exit_code","io","phantom"]
[1mAST[0m: Finding visible symbol print from module main_hello
[1mAST[0m: *** ALL visible modules: wybe.io
[1mAST[0m:    name 'print' for module spec '' matches: wybe.io.print<0>, wybe.io.print<1>, wybe.io.print<2>, wybe.io.print<3>, wybe.io.print<4>
[1mAST[0m: Get loaded module wybe.io
[1mAST[0m:  worked
[1mAST[0m: Get loaded module wybe.io
[1mAST[0m:  worked
[1mAST[0m: Get loaded module wybe.io
[1mAST[0m:  worked
[1mAST[0m: Get loaded module wybe.io
[1mAST[0m:  worked
[1mAST[0m: Get loaded module wybe.io
[1mAST[0m:  worked
[1mAST[0m: Get loaded module wybe.io
[1mAST[0m:  worked
[1mAST[0m: Get loaded module wybe.io
[1mAST[0m:  worked
[1mAST[0m: Get loaded module wybe.io
[1mAST[0m:  worked
[1mAST[0m: Get loaded module wybe.io
[1mAST[0m:  worked
[1mAST[0m: Get loaded module wybe.io
[1mAST[0m:  worked
[1mTypes[0m: Actual types         : [wybe.string]
[1mTypes[0m: Actual call modes    : [(ParamIn,True,Nothing)]
[1mTypes[0m: Type-correct modes   : [ProcInfo {procInfoProc = wybe.io.print<3>, procInfoArgs = [wybe.string], procInfoDetism = Det}]
[1mTypes[0m: Possible mode matches: [ProcInfo {procInfoProc = wybe.io.print<3>, procInfoArgs = [wybe.string], procInfoDetism = Det}]
[1mTypes[0m: Exact mode matches: [ProcInfo {procInfoProc = wybe.io.print<3>, procInfoArgs = [wybe.string], procInfoDetism = Det}]
[1mTypes[0m: Delay mode matches: True
[1mTypes[0m: New errors   = []
[1mTypes[0m: Now assigned = fromList ["argc","argv","exit_code","io","phantom"]
[1mTypes[0m: Now delayed  = []
[1mTypes[0m: ===== Need to check again.
[1mTypes[0m: 
[1mTypes[0m: -----------------OLD:
[1mTypes[0m: *main* > public (0 calls)
[1mTypes[0m: 4: () use !command_line.argc, !command_line.argv, !command_line.exit_code, !wybe.io.io:
[1mTypes[0m:     foreign llvm move(42 @main_hello:3:16, ?exit_code @main_hello:3:1)
[1mTypes[0m:     !println("hello, world!" @main_hello:4:10)
[1mTypes[0m:     !print(argc @main_hello:5:8)
[1mTypes[0m:     !print(" command line arguments" @main_hello:6:8)
[1mTypes[0m: -----------------NEW:
[1mTypes[0m: *main* > public (0 calls)
[1mTypes[0m: 4: () use !command_line.argc, !command_line.argv, !command_line.exit_code, !wybe.io.io:
[1mTypes[0m:     foreign llvm move(42:wybe.int @main_hello:3:16, ?exit_code:wybe.int @main_hello:3:1)
[1mTypes[0m:     !wybe.io.<3>println("hello, world!":wybe.string @main_hello:4:10)
[1mTypes[0m:     !wybe.io.<0>print(argc:wybe.int @main_hello:5:8)
[1mTypes[0m:     !wybe.io.<3>print(" command line arguments":wybe.string @main_hello:6:8)
[1mTypes[0m: ** New definition of :
[1mTypes[0m: 
[1mTypes[0m: *main* > public (0 calls)
[1mTypes[0m: 4: () use !command_line.argc, !command_line.argv, !command_line.exit_code, !wybe.io.io:
[1mTypes[0m:     foreign llvm move(42:wybe.int @main_hello:3:16, ?exit_code:wybe.int @main_hello:3:1)
[1mTypes[0m:     !wybe.io.<3>println("hello, world!":wybe.string @main_hello:4:10)
[1mTypes[0m:     !wybe.io.<0>print(argc:wybe.int @main_hello:5:8)
[1mTypes[0m:     !wybe.io.<3>print(" command line arguments":wybe.string @main_hello:6:8)
[1mTypes[0m: **** Exiting module main_hello
======================================================================
AFTER TYPE CHECK:
 Module command_line
  public submods  : 
  public types    : 
  public resources: argc: command_line.argc
                    argv: command_line.argv
                    exit_code: command_line.exit_code
  public procs    : 
  imports         : use wybe
  types           : 
  resources       : argc: fromList [(command_line.argc,Just wybe.int @command_line:2:8)] @command_line:2:8
                    argv: fromList [(command_line.argv,Just wybe.int @command_line:3:8)] @command_line:3:8
                    exit_code: fromList [(command_line.exit_code,Just wybe.int @command_line:4:8)] @command_line:4:8
  procs           : 


  LLVM code       :

; ModuleID = 'command_line'


declare external ccc i8* @wybe_malloc(i32)
--------------------------------------------------
 Module main_hello
  public submods  : 
  public types    : 
  public resources: 
  public procs    : main_hello.<0>
  imports         : use command_line
                    use wybe
  types           : 
  resources       : 
  procs           : 

*main* > public (0 calls)
0: () use !command_line.argc, !command_line.argv, !command_line.exit_code, !wybe.io.io:
    foreign llvm move(42:wybe.int @main_hello:3:16, ?exit_code:wybe.int @main_hello:3:1)
    !wybe.io.<3>println("hello, world!":wybe.string @main_hello:4:10)
    !wybe.io.<0>print(argc:wybe.int @main_hello:5:8)
    !wybe.io.<3>print(" command line arguments":wybe.string @main_hello:6:8)

No LLVM code

[1mBuilder[0m: **** Reentering module main_hello
[1mAST[0m: finding module main_hello
[1mAST[0m: found 0 matching modules under compilation
[1mAST[0m: found it
[1mAST[0m: Looking up resource command_line.argc
[1mAST[0m: Finding visible symbol command_line.argc from module main_hello
[1mAST[0m: *** ALL visible modules: command_line
[1mAST[0m: Candidates: fromList [command_line.argc]
[1mAST[0m: Get loaded module command_line
[1mAST[0m:  worked
[1mAST[0m: Looking up resource command_line.argv
[1mAST[0m: Finding visible symbol command_line.argv from module main_hello
[1mAST[0m: *** ALL visible modules: command_line
[1mAST[0m: Candidates: fromList [command_line.argv]
[1mAST[0m: Get loaded module command_line
[1mAST[0m:  worked
[1mAST[0m: Looking up resource command_line.exit_code
[1mAST[0m: Finding visible symbol command_line.exit_code from module main_hello
[1mAST[0m: *** ALL visible modules: command_line
[1mAST[0m: Candidates: fromList [command_line.exit_code]
[1mAST[0m: Get loaded module command_line
[1mAST[0m:  worked
[1mAST[0m: Looking up resource wybe.io.io
[1mAST[0m: Finding visible symbol wybe.io.io from module main_hello
[1mAST[0m: *** ALL visible modules: wybe.io
[1mAST[0m: Candidates: fromList [wybe.io.io]
[1mAST[0m: Get loaded module wybe.io
[1mAST[0m:  worked
[1mBuilder[0m: **** Re-exiting module main_hello
[1mBuilder[0m: **** Reentering module main_hello
[1mAST[0m: finding module main_hello
[1mAST[0m: found 0 matching modules under compilation
[1mAST[0m: found it
[1mAST[0m: Looking up resource command_line.argc
[1mAST[0m: Finding visible symbol command_line.argc from module main_hello
[1mAST[0m: *** ALL visible modules: command_line
[1mAST[0m: Candidates: fromList [command_line.argc]
[1mAST[0m: Get loaded module command_line
[1mAST[0m:  worked
[1mAST[0m: Looking up resource command_line.argv
[1mAST[0m: Finding visible symbol command_line.argv from module main_hello
[1mAST[0m: *** ALL visible modules: command_line
[1mAST[0m: Candidates: fromList [command_line.argv]
[1mAST[0m: Get loaded module command_line
[1mAST[0m:  worked
[1mAST[0m: Looking up resource command_line.exit_code
[1mAST[0m: Finding visible symbol command_line.exit_code from module main_hello
[1mAST[0m: *** ALL visible modules: command_line
[1mAST[0m: Candidates: fromList [command_line.exit_code]
[1mAST[0m: Get loaded module command_line
[1mAST[0m:  worked
[1mAST[0m: Looking up resource wybe.io.io
[1mAST[0m: Finding visible symbol wybe.io.io from module main_hello
[1mAST[0m: *** ALL visible modules: wybe.io
[1mAST[0m: Candidates: fromList [wybe.io.io]
[1mAST[0m: Get loaded module wybe.io
[1mAST[0m:  worked
[1mAST[0m: Get loaded module wybe.io
[1mAST[0m:  worked
[1mAST[0m: Looking up resource wybe.io.io
[1mAST[0m: Finding visible symbol wybe.io.io from module main_hello
[1mAST[0m: *** ALL visible modules: wybe.io
[1mAST[0m: Candidates: fromList [wybe.io.io]
[1mAST[0m: Get loaded module wybe.io
[1mAST[0m:  worked
[1mAST[0m: Get loaded module wybe.io
[1mAST[0m:  worked
[1mAST[0m: Looking up resource wybe.io.io
[1mAST[0m: Finding visible symbol wybe.io.io from module main_hello
[1mAST[0m: *** ALL visible modules: wybe.io
[1mAST[0m: Candidates: fromList [wybe.io.io]
[1mAST[0m: Get loaded module wybe.io
[1mAST[0m:  worked
[1mAST[0m: Get loaded module wybe.io
[1mAST[0m:  worked
[1mAST[0m: Looking up resource wybe.io.io
[1mAST[0m: Finding visible symbol wybe.io.io from module main_hello
[1mAST[0m: *** ALL visible modules: wybe.io
[1mAST[0m: Candidates: fromList [wybe.io.io]
[1mAST[0m: Get loaded module wybe.io
[1mAST[0m:  worked
[1mBuilder[0m: **** Re-exiting module main_hello
[1mBuilder[0m: **** Reentering module main_hello
[1mAST[0m: finding module main_hello
[1mAST[0m: found 0 matching modules under compilation
[1mAST[0m: found it
[1mBuilder[0m: **** Re-exiting module main_hello
[1mBuilder[0m: **** Reentering module main_hello
[1mAST[0m: finding module main_hello
[1mAST[0m: found 0 matching modules under compilation
[1mAST[0m: found it
[1mBuilder[0m: **** Re-exiting module main_hello
[1mAST[0m: finding module main_hello
[1mAST[0m: found 0 matching modules under compilation
[1mAST[0m: found it
[1mAST[0m: finding module main_hello
[1mAST[0m: found 0 matching modules under compilation
[1mAST[0m: found it
[1mAST[0m: Get loaded module wybe.io
[1mAST[0m:  worked
[1mAST[0m: Get loaded module wybe.io
[1mAST[0m:  worked
[1mAST[0m: Get loaded module wybe.io
[1mAST[0m:  worked
[1mAST[0m: finding module main_hello
[1mAST[0m: found 0 matching modules under compilation
[1mAST[0m: found it
[1mAST[0m: Get loaded module command_line
[1mAST[0m:  worked
[1mAST[0m: finding module wybe
[1mAST[0m: found 0 matching modules under compilation
[1mAST[0m: found it
[1mAST[0m: finding module wybe
[1mAST[0m: found 0 matching modules under compilation
[1mAST[0m: found it
[1mAST[0m: finding module wybe
[1mAST[0m: found 0 matching modules under compilation
[1mAST[0m: found it
[1mAST[0m: finding module wybe
[1mAST[0m: found 0 matching modules under compilation
[1mAST[0m: found it
[1mAST[0m: finding module wybe
[1mAST[0m: found 0 matching modules under compilation
[1mAST[0m: found it
[1mAST[0m: finding module wybe
[1mAST[0m: found 0 matching modules under compilation
[1mAST[0m: found it
[1mAST[0m: Get loaded module main_hello
[1mAST[0m:  worked
[1mAST[0m: Get loaded module main_hello
[1mAST[0m:  worked
[1mAST[0m: Get loaded module main_hello
[1mAST[0m:  worked
[1mAST[0m: Get loaded module main_hello
[1mAST[0m:  worked
[1mAST[0m: Get loaded module command_line
[1mAST[0m:  worked
[1mAST[0m: Get loaded module command_line
[1mAST[0m:  worked
[1mAST[0m: Get loaded module wybe
[1mAST[0m:  worked
[1mAST[0m: Get loaded module wybe
[1mAST[0m:  worked
[1mBuilder[0m: Dependencies: [(["wybe"],False),(["command_line"],False),(["main_hello"],True)]
[1mBuilder[0m: o Modules with 'main': main_hello
[1mBuilder[0m: Main proc:
[1mBuilder[0m: main > (0 calls)
[1mBuilder[0m: 0: main() use command_line.argc, command_line.argv, ?command_line.exit_code:
[1mBuilder[0m:     foreign lpvm cast(0, ?io!:wybe.phantom)
[1mBuilder[0m:     foreign llvm move(0, ?exit_code)
[1mBuilder[0m:     foreign C gc_init()
[1mBuilder[0m:     !main_hello.()
[1mAST[0m: Entering module 
[1mAST[0m: Noting import of command_line, NOT currently being loaded, into 
[1mAST[0m: Noting import of wybe.io, NOT currently being loaded, into 
[1mAST[0m: Noting import of main_hello, NOT currently being loaded, into 
[1mAST[0m: Adding definition of .main<0>:
[1mAST[0m: main > (0 calls)
[1mAST[0m: 4: main() use command_line.argc, command_line.argv, ?command_line.exit_code:
[1mAST[0m:     foreign lpvm cast(0, ?io!:wybe.phantom)
[1mAST[0m:     foreign llvm move(0, ?exit_code)
[1mAST[0m:     foreign C gc_init()
[1mAST[0m:     !main_hello.()
[1mAST[0m: Exiting module  with imports:
[1mAST[0m:         use command_line
[1mAST[0m:         from main_hello use 
[1mAST[0m:         from wybe.io use io
[1mAST[0m: Exiting module 
[1mAST[0m:     loadNum = 11, minDependencyNum = 11
[1mAST[0m: finished with module SCC 
[1mAST[0m: remaining deferred modules: 
[1mBuilder[0m: compileModSCC: []
[1mAST[0m: finding module 
[1mAST[0m: found 0 matching modules under compilation
[1mAST[0m: found it
======================================================================
AFTER FLATTENING:
 Module 
  public submods  : 
  public types    : 
  public resources: 
  public procs    : 
  imports         : use command_line
                    from main_hello use 
                    from wybe.io use io
  types           : 
  resources       : 
  procs           : 

main > (0 calls)
0: main() use command_line.argc, command_line.argv, ?command_line.exit_code:
    foreign lpvm cast(0, ?io!:wybe.phantom)
    foreign llvm move(0, ?exit_code)
    foreign C gc_init()
    !main_hello.()

No LLVM code

--------------------------------------------------
 Module command_line
  public submods  : 
  public types    : 
  public resources: argc: command_line.argc
                    argv: command_line.argv
                    exit_code: command_line.exit_code
  public procs    : 
  imports         : use wybe
  types           : 
  resources       : argc: fromList [(command_line.argc,Just wybe.int @command_line:2:8)] @command_line:2:8
                    argv: fromList [(command_line.argv,Just wybe.int @command_line:3:8)] @command_line:3:8
                    exit_code: fromList [(command_line.exit_code,Just wybe.int @command_line:4:8)] @command_line:4:8
  procs           : 


  LLVM code       :

; ModuleID = 'command_line'


declare external ccc i8* @wybe_malloc(i32)
--------------------------------------------------
 Module main_hello
  public submods  : 
  public types    : 
  public resources: 
  public procs    : main_hello.<0>
  imports         : use command_line
                    use wybe
  types           : 
  resources       : 
  procs           : 

*main* > public inline (0 calls)
0: (argc#0:wybe.int, [?argc#0:wybe.int], argv#0:wybe.int, [?argv#0:wybe.int], [exit_code#0:wybe.int], ?exit_code#1:wybe.int, io#0:phantom, ?io#3:phantom):
    foreign llvm move(42:wybe.int, ?exit_code#1:wybe.int) @main_hello:3:1
    foreign c print_string("hello, world!":wybe.string, ~#io#0:phantom, ?tmp$2#0:phantom) @wybe:92:41
    foreign c putchar('\n':wybe.char, ~tmp$2#0:phantom, ?#io#1:phantom) @wybe:78:28
    foreign c print_int(argc#0:wybe.int, ~#io#1:phantom, ?#io#2:phantom) @wybe:80:38
    foreign c print_string(" command line arguments":wybe.string, ~#io#2:phantom, ?#io#3:phantom) @wybe:92:41

  LLVM code       :

; ModuleID = 'main_hello'


declare external ccc void @print_string(i8*)

declare external ccc void @print_int(i64)

declare external ccc void @putchar(i8)

@main_hello.2 = constant [24 x i8] c" command line arguments\00"

@main_hello.1 = constant [14 x i8] c"hello, world!\00"

declare external ccc i8* @wybe_malloc(i32)

define external ccc i32 @main_hello.main(i64 %"argc#0", i64 %"argv#0"){
entry:
  tail call ccc void @print_string(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @main_hello.1, i32 0, i32 0))
  tail call ccc void @putchar(i8 10)
  tail call ccc void @print_int(i64 %"argc#0")
  tail call ccc void @print_string(i8* getelementptr inbounds ([24 x i8], [24 x i8]* @main_hello.2, i32 0, i32 0))
  %3 = alloca i32
  store i32 0, i32* %3
  ret i32 0
}
[1mAST[0m: finding module 
[1mAST[0m: found 0 matching modules under compilation
[1mAST[0m: found it
[1mAST[0m: Handle importation from command_line into :  use command_line
[1mAST[0m: Get loaded module command_line
[1mAST[0m:  worked
[1mAST[0m:     importing types    : 
[1mAST[0m:     importing resources: argc, argv, exit_code
[1mAST[0m:     importing procs    : 
[1mAST[0m: Handle importation from main_hello into :  from main_hello use 
[1mAST[0m: Get loaded module main_hello
[1mAST[0m:  worked
[1mAST[0m:     importing types    : 
[1mAST[0m:     importing resources: 
[1mAST[0m:     importing procs    : 
[1mAST[0m: Handle importation from wybe.io into :  from wybe.io use io
[1mAST[0m: Get loaded module wybe.io
[1mAST[0m:  worked
[1mAST[0m:     importing types    : 
[1mAST[0m:     importing resources: io
[1mAST[0m:     importing procs    : 
[1mBuilder[0m: ======================================================================
[1mBuilder[0m: resource and type checking module(s) ...
[1mTypes[0m: **** Validating parameter types in module 
[1mAST[0m: finding module 
[1mAST[0m: found 0 matching modules under compilation
[1mAST[0m: found it
[1mTypes[0m: Validating def of main
[1mTypes[0m: **** Exiting module 
[1mAST[0m: finding module 
[1mAST[0m: found 0 matching modules under compilation
[1mAST[0m: found it
[1mTypes[0m: **** Type checking module 
[1mAST[0m: finding module 
[1mAST[0m: found 0 matching modules under compilation
[1mAST[0m: found it
[1mTypes[0m: **** Strongly connected components:
[1mTypes[0m:     main
[1mTypes[0m: Type checking non-recursive proc main
[1mTypes[0m: ** Type checking decl of proc main
[1mAST[0m: Looking up resource command_line.argc
[1mAST[0m: Finding visible symbol command_line.argc from module 
[1mAST[0m: *** ALL visible modules: command_line
[1mAST[0m: Candidates: fromList [command_line.argc]
[1mAST[0m: Get loaded module command_line
[1mAST[0m:  worked
[1mAST[0m: Looking up resource command_line.argv
[1mAST[0m: Finding visible symbol command_line.argv from module 
[1mAST[0m: *** ALL visible modules: command_line
[1mAST[0m: Candidates: fromList [command_line.argv]
[1mAST[0m: Get loaded module command_line
[1mAST[0m:  worked
[1mAST[0m: Looking up resource command_line.exit_code
[1mAST[0m: Finding visible symbol command_line.exit_code from module 
[1mAST[0m: *** ALL visible modules: command_line
[1mAST[0m: Candidates: fromList [command_line.exit_code]
[1mAST[0m: Get loaded module command_line
[1mAST[0m:  worked
[1mTypes[0m: ** Type checking proc main: Typing {typingDict = fromList [("argc",wybe.int),("argv",wybe.int),("exit_code",wybe.int)], typingErrs = []}
[1mTypes[0m:    with resources: fromList [command_line.argc,command_line.argv,?command_line.exit_code]
[1mTypes[0m:    containing calls: 
[1mTypes[0m:         foreign lpvm cast(0, ?io!:wybe.phantom)
[1mTypes[0m:         foreign llvm move(0, ?exit_code)
[1mTypes[0m:         foreign C gc_init()
[1mTypes[0m:         !main_hello.()
[1mTypes[0m: Type checking foreign instruction unifying arguments 0 and ?exit_code
[1mTypes[0m: constraining var "exit_code" to type wybe.int
[1mAST[0m: Finding visible symbol main_hello. from module 
[1mAST[0m: *** ALL visible modules: main_hello
[1mAST[0m:    name '' for module spec 'main_hello' matches: main_hello.<0>
[1mAST[0m: Get loaded module main_hello
[1mAST[0m:  worked
[1mAST[0m: Get loaded module main_hello
[1mAST[0m:  worked
[1mTypes[0m: Type checking call {!main_hello.()}
[1mTypes[0m: Calling context is Det
[1mTypes[0m: Candidate types: [ProcInfo {procInfoProc = main_hello.<0>, procInfoArgs = [], procInfoDetism = Det}]
[1mTypes[0m: Actual types: []
[1mTypes[0m: Valid types = [[]]
[1mTypes[0m: Converted types = [Nothing]
[1mTypes[0m: Resulting typing = Typing {typingDict = fromList [("argc",wybe.int),("argv",wybe.int),("exit_code",wybe.int)], typingErrs = []}
[1mTypes[0m: Typing independent of mode = Typing {typingDict = fromList [("argc",wybe.int),("argv",wybe.int),("exit_code",wybe.int)], typingErrs = []}
[1mTypes[0m: Now mode checking
[1mTypes[0m: Mode checking foreign call {foreign lpvm cast(0, ?io!:wybe.phantom)}
[1mTypes[0m:     with assigned fromList ["argc","argv","phantom"]
[1mTypes[0m: New instr = {foreign lpvm cast(0:wybe.int, ?io!:phantom)}
[1mTypes[0m: New errors   = []
[1mTypes[0m: Now assigned = fromList ["argc","argv","io","phantom"]
[1mTypes[0m: Now delayed  = []
[1mTypes[0m: Mode checking foreign call {foreign llvm move(0, ?exit_code)}
[1mTypes[0m:     with assigned fromList ["argc","argv","io","phantom"]
[1mTypes[0m: New instr = {foreign llvm move(0:wybe.int, ?exit_code:wybe.int)}
[1mTypes[0m: New errors   = []
[1mTypes[0m: Now assigned = fromList ["argc","argv","exit_code","io","phantom"]
[1mTypes[0m: Now delayed  = []
[1mTypes[0m: Mode checking foreign call {foreign C gc_init()}
[1mTypes[0m:     with assigned fromList ["argc","argv","exit_code","io","phantom"]
[1mTypes[0m: New instr = {foreign C gc_init()}
[1mTypes[0m: New errors   = []
[1mTypes[0m: Now assigned = fromList ["argc","argv","exit_code","io","phantom"]
[1mTypes[0m: Now delayed  = []
[1mTypes[0m: Mode checking call   : {!main_hello.()}
[1mTypes[0m:     with assigned    : fromList ["argc","argv","exit_code","io","phantom"]
[1mAST[0m: Finding visible symbol main_hello. from module 
[1mAST[0m: *** ALL visible modules: main_hello
[1mAST[0m:    name '' for module spec 'main_hello' matches: main_hello.<0>
[1mAST[0m: Get loaded module main_hello
[1mAST[0m:  worked
[1mAST[0m: Get loaded module main_hello
[1mAST[0m:  worked
[1mTypes[0m: Actual types         : []
[1mTypes[0m: Actual call modes    : []
[1mTypes[0m: Type-correct modes   : [ProcInfo {procInfoProc = main_hello.<0>, procInfoArgs = [], procInfoDetism = Det}]
[1mTypes[0m: Possible mode matches: [ProcInfo {procInfoProc = main_hello.<0>, procInfoArgs = [], procInfoDetism = Det}]
[1mTypes[0m: Exact mode matches: [ProcInfo {procInfoProc = main_hello.<0>, procInfoArgs = [], procInfoDetism = Det}]
[1mTypes[0m: Delay mode matches: True
[1mTypes[0m: New errors   = []
[1mTypes[0m: Now assigned = fromList ["argc","argv","exit_code","io","phantom"]
[1mTypes[0m: Now delayed  = []
[1mTypes[0m: ===== Need to check again.
[1mTypes[0m: 
[1mTypes[0m: -----------------OLD:
[1mTypes[0m: main > (0 calls)
[1mTypes[0m: 4: main() use command_line.argc, command_line.argv, ?command_line.exit_code:
[1mTypes[0m:     foreign lpvm cast(0, ?io!:wybe.phantom)
[1mTypes[0m:     foreign llvm move(0, ?exit_code)
[1mTypes[0m:     foreign C gc_init()
[1mTypes[0m:     !main_hello.()
[1mTypes[0m: -----------------NEW:
[1mTypes[0m: main > (0 calls)
[1mTypes[0m: 4: main() use command_line.argc, command_line.argv, ?command_line.exit_code:
[1mTypes[0m:     foreign lpvm cast(0:wybe.int, ?io!:phantom)
[1mTypes[0m:     foreign llvm move(0:wybe.int, ?exit_code:wybe.int)
[1mTypes[0m:     foreign C gc_init()
[1mTypes[0m:     !main_hello.<0>()
[1mTypes[0m: ** New definition of main:
[1mTypes[0m: 
[1mTypes[0m: main > (0 calls)
[1mTypes[0m: 4: main() use command_line.argc, command_line.argv, ?command_line.exit_code:
[1mTypes[0m:     foreign lpvm cast(0:wybe.int, ?io!:phantom)
[1mTypes[0m:     foreign llvm move(0:wybe.int, ?exit_code:wybe.int)
[1mTypes[0m:     foreign C gc_init()
[1mTypes[0m:     !main_hello.<0>()
[1mTypes[0m: **** Exiting module 
======================================================================
AFTER TYPE CHECK:
 Module 
  public submods  : 
  public types    : 
  public resources: 
  public procs    : 
  imports         : use command_line
                    from main_hello use 
                    from wybe.io use io
  types           : 
  resources       : 
  procs           : 

main > (0 calls)
0: main() use command_line.argc, command_line.argv, ?command_line.exit_code:
    foreign lpvm cast(0:wybe.int, ?io!:phantom)
    foreign llvm move(0:wybe.int, ?exit_code:wybe.int)
    foreign C gc_init()
    !main_hello.<0>()

No LLVM code

--------------------------------------------------
 Module command_line
  public submods  : 
  public types    : 
  public resources: argc: command_line.argc
                    argv: command_line.argv
                    exit_code: command_line.exit_code
  public procs    : 
  imports         : use wybe
  types           : 
  resources       : argc: fromList [(command_line.argc,Just wybe.int @command_line:2:8)] @command_line:2:8
                    argv: fromList [(command_line.argv,Just wybe.int @command_line:3:8)] @command_line:3:8
                    exit_code: fromList [(command_line.exit_code,Just wybe.int @command_line:4:8)] @command_line:4:8
  procs           : 


  LLVM code       :

; ModuleID = 'command_line'


declare external ccc i8* @wybe_malloc(i32)
--------------------------------------------------
 Module main_hello
  public submods  : 
  public types    : 
  public resources: 
  public procs    : main_hello.<0>
  imports         : use command_line
                    use wybe
  types           : 
  resources       : 
  procs           : 

*main* > public inline (0 calls)
0: (argc#0:wybe.int, [?argc#0:wybe.int], argv#0:wybe.int, [?argv#0:wybe.int], [exit_code#0:wybe.int], ?exit_code#1:wybe.int, io#0:phantom, ?io#3:phantom):
    foreign llvm move(42:wybe.int, ?exit_code#1:wybe.int) @main_hello:3:1
    foreign c print_string("hello, world!":wybe.string, ~#io#0:phantom, ?tmp$2#0:phantom) @wybe:92:41
    foreign c putchar('\n':wybe.char, ~tmp$2#0:phantom, ?#io#1:phantom) @wybe:78:28
    foreign c print_int(argc#0:wybe.int, ~#io#1:phantom, ?#io#2:phantom) @wybe:80:38
    foreign c print_string(" command line arguments":wybe.string, ~#io#2:phantom, ?#io#3:phantom) @wybe:92:41

  LLVM code       :

; ModuleID = 'main_hello'


declare external ccc void @print_string(i8*)

declare external ccc void @print_int(i64)

declare external ccc void @putchar(i8)

@main_hello.2 = constant [24 x i8] c" command line arguments\00"

@main_hello.1 = constant [14 x i8] c"hello, world!\00"

declare external ccc i8* @wybe_malloc(i32)

define external ccc i32 @main_hello.main(i64 %"argc#0", i64 %"argv#0"){
entry:
  tail call ccc void @print_string(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @main_hello.1, i32 0, i32 0))
  tail call ccc void @putchar(i8 10)
  tail call ccc void @print_int(i64 %"argc#0")
  tail call ccc void @print_string(i8* getelementptr inbounds ([24 x i8], [24 x i8]* @main_hello.2, i32 0, i32 0))
  %3 = alloca i32
  store i32 0, i32* %3
  ret i32 0
}
[1mBuilder[0m: **** Reentering module 
[1mAST[0m: finding module 
[1mAST[0m: found 0 matching modules under compilation
[1mAST[0m: found it
[1mAST[0m: Looking up resource command_line.argc
[1mAST[0m: Finding visible symbol command_line.argc from module 
[1mAST[0m: *** ALL visible modules: command_line
[1mAST[0m: Candidates: fromList [command_line.argc]
[1mAST[0m: Get loaded module command_line
[1mAST[0m:  worked
[1mAST[0m: Looking up resource command_line.argv
[1mAST[0m: Finding visible symbol command_line.argv from module 
[1mAST[0m: *** ALL visible modules: command_line
[1mAST[0m: Candidates: fromList [command_line.argv]
[1mAST[0m: Get loaded module command_line
[1mAST[0m:  worked
[1mAST[0m: Looking up resource command_line.exit_code
[1mAST[0m: Finding visible symbol command_line.exit_code from module 
[1mAST[0m: *** ALL visible modules: command_line
[1mAST[0m: Candidates: fromList [command_line.exit_code]
[1mAST[0m: Get loaded module command_line
[1mAST[0m:  worked
[1mBuilder[0m: **** Re-exiting module 
[1mBuilder[0m: **** Reentering module 
[1mAST[0m: finding module 
[1mAST[0m: found 0 matching modules under compilation
[1mAST[0m: found it
[1mAST[0m: Looking up resource command_line.argc
[1mAST[0m: Finding visible symbol command_line.argc from module 
[1mAST[0m: *** ALL visible modules: command_line
[1mAST[0m: Candidates: fromList [command_line.argc]
[1mAST[0m: Get loaded module command_line
[1mAST[0m:  worked
[1mAST[0m: Looking up resource command_line.argv
[1mAST[0m: Finding visible symbol command_line.argv from module 
[1mAST[0m: *** ALL visible modules: command_line
[1mAST[0m: Candidates: fromList [command_line.argv]
[1mAST[0m: Get loaded module command_line
[1mAST[0m:  worked
[1mAST[0m: Looking up resource command_line.exit_code
[1mAST[0m: Finding visible symbol command_line.exit_code from module 
[1mAST[0m: *** ALL visible modules: command_line
[1mAST[0m: Candidates: fromList [command_line.exit_code]
[1mAST[0m: Get loaded module command_line
[1mAST[0m:  worked
[1mAST[0m: Get loaded module main_hello
[1mAST[0m:  worked
[1mAST[0m: Looking up resource command_line.argc
[1mAST[0m: Finding visible symbol command_line.argc from module 
[1mAST[0m: *** ALL visible modules: command_line
[1mAST[0m: Candidates: fromList [command_line.argc]
[1mAST[0m: Get loaded module command_line
[1mAST[0m:  worked
[1mAST[0m: Looking up resource command_line.argv
[1mAST[0m: Finding visible symbol command_line.argv from module 
[1mAST[0m: *** ALL visible modules: command_line
[1mAST[0m: Candidates: fromList [command_line.argv]
[1mAST[0m: Get loaded module command_line
[1mAST[0m:  worked
[1mAST[0m: Looking up resource command_line.exit_code
[1mAST[0m: Finding visible symbol command_line.exit_code from module 
[1mAST[0m: *** ALL visible modules: command_line
[1mAST[0m: Candidates: fromList [command_line.exit_code]
[1mAST[0m: Get loaded module command_line
[1mAST[0m:  worked
[1mAST[0m: Looking up resource wybe.io.io
[1mAST[0m: Finding visible symbol wybe.io.io from module 
[1mAST[0m: *** ALL visible modules: wybe.io
[1mAST[0m: Candidates: fromList [wybe.io.io]
[1mAST[0m: Get loaded module wybe.io
[1mAST[0m:  worked
[1mBuilder[0m: **** Re-exiting module 
[1mBuilder[0m: **** Reentering module 
[1mAST[0m: finding module 
[1mAST[0m: found 0 matching modules under compilation
[1mAST[0m: found it
[1mBuilder[0m: **** Re-exiting module 
[1mBuilder[0m: **** Reentering module 
[1mAST[0m: finding module 
[1mAST[0m: found 0 matching modules under compilation
[1mAST[0m: found it
[1mBuilder[0m: **** Re-exiting module 
[1mAST[0m: finding module 
[1mAST[0m: found 0 matching modules under compilation
[1mAST[0m: found it
[1mAST[0m: finding module 
[1mAST[0m: found 0 matching modules under compilation
[1mAST[0m: found it
[1mAST[0m: Get loaded module main_hello
[1mAST[0m:  worked
[1mAST[0m: finding module 
[1mAST[0m: found 0 matching modules under compilation
[1mAST[0m: found it
[1mAST[0m: Get loaded module command_line
[1mAST[0m:  worked
[1mAST[0m: Get loaded module main_hello
[1mAST[0m:  worked
[1mBuilder[0m: Finished building *main* module: 
[1mBuilder[0m: o Built 'main' module for target: 
[1mBuilder[0m: o Creating temp Main module @ ...../tmp/tmpMain.o
[1mAST[0m: finding module wybe
[1mAST[0m: found 0 matching modules under compilation
[1mAST[0m: found it
[1mBuilder[0m: SOURCE for wybe :: "wybelibs/wybe.wybe"
[1mBuilder[0m: DIR is: "wybelibs"
[1mAST[0m: finding module command_line
[1mAST[0m: found 0 matching modules under compilation
[1mAST[0m: found it
[1mBuilder[0m: SOURCE for command_line :: "wybelibs/command_line.wybe"
[1mBuilder[0m: DIR is: "wybelibs"
[1mAST[0m: finding module main_hello
[1mAST[0m: found 0 matching modules under compilation
[1mAST[0m: found it
[1mBuilder[0m: SOURCE for main_hello :: "test-cases/main_hello.wybe"
[1mBuilder[0m: DIR is: "test-cases"
Internal error: Undefined symbols for architecture x86_64:
  "_read_float", referenced from:
      _wybe.io.read<1> in wybe.o
  "_read_int", referenced from:
      _wybe.io.read<0> in wybe.o
  "_read_line", referenced from:
      _wybe.io.read<3> in wybe.o
  "_wybe.bool.=<0>.1", referenced from:
      _wybe.io.print<4> in wybe.o
  "_wybe.int./=<0>.2", referenced from:
      _wybe.string./=<0> in wybe.o
  "_wybe.int.<<0>.3", referenced from:
      _wybe.string.<<0> in wybe.o
  "_wybe.int.<=<0>.4", referenced from:
      _wybe.string.<=<0> in wybe.o
  "_wybe.int.=<0>.5", referenced from:
      _wybe.string.=<0> in wybe.o
  "_wybe.int.><0>.6", referenced from:
      _wybe.string.><0> in wybe.o
  "_wybe.int.>=<0>.7", referenced from:
      _wybe.string.>=<0> in wybe.o
ld: symbol(s) not found for architecture x86_64
clang: error: linker command failed with exit code 1 (use -v to see invocation)

CallStack (from HasCallStack):
  error, called at AST.hs:2470:17 in main:AST
